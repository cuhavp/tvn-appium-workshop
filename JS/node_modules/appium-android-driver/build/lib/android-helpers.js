"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _appiumAndroidIme = require("appium-android-ime");

var _ioAppium = require("io.appium.settings");

var _bootstrap = _interopRequireDefault(require("./bootstrap"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumAdb = _interopRequireDefault(require("appium-adb"));

var _unlockHelpers = _interopRequireWildcard(require("./unlock-helpers"));

const PACKAGE_INSTALL_TIMEOUT = 90000;
const CHROME_BROWSER_PACKAGE_ACTIVITY = {
  chrome: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  chromium: {
    pkg: 'org.chromium.chrome.shell',
    activity: '.ChromeShellActivity'
  },
  chromebeta: {
    pkg: 'com.chrome.beta',
    activity: 'com.google.android.apps.chrome.Main'
  },
  browser: {
    pkg: 'com.android.browser',
    activity: 'com.android.browser.BrowserActivity'
  },
  'chromium-browser': {
    pkg: 'org.chromium.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  'chromium-webview': {
    pkg: 'org.chromium.webview_shell',
    activity: 'org.chromium.webview_shell.WebViewBrowserActivity'
  },
  default: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  }
};
const SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
const SETTINGS_HELPER_MAIN_ACTIVITY = '.Settings';
const SETTINGS_HELPER_UNLOCK_ACTIVITY = '.Unlock';
const UNICODE_IME_PKG_ID = 'io.appium.android.ime';
let helpers = {};
exports.helpers = helpers;

helpers.createBaseADB = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const javaVersion = opts.javaVersion,
          adbPort = opts.adbPort,
          suppressKillServer = opts.suppressKillServer,
          remoteAdbHost = opts.remoteAdbHost,
          clearDeviceLogsOnStart = opts.clearDeviceLogsOnStart,
          adbExecTimeout = opts.adbExecTimeout,
          useKeystore = opts.useKeystore,
          keystorePath = opts.keystorePath,
          keystorePassword = opts.keystorePassword,
          keyAlias = opts.keyAlias,
          keyPassword = opts.keyPassword;
    return yield _appiumAdb.default.createADB({
      javaVersion,
      adbPort,
      suppressKillServer,
      remoteAdbHost,
      clearDeviceLogsOnStart,
      adbExecTimeout,
      useKeystore,
      keystorePath,
      keystorePassword,
      keyAlias,
      keyPassword
    });
  });

  return function () {
    return _ref.apply(this, arguments);
  };
}();

helpers.parseJavaVersion = function (stderr) {
  let lines = stderr.split("\n");
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let line = _step.value;

      if (new RegExp(/(java|openjdk) version/).test(line)) {
        return line.split(" ")[2].replace(/"/g, '');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
};

helpers.getJavaVersion = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (logVersion = true) {
    let _ref3 = yield (0, _teen_process.exec)('java', ['-version']),
        stderr = _ref3.stderr;

    let javaVer = helpers.parseJavaVersion(stderr);

    if (javaVer === null) {
      throw new Error("Could not get the Java version. Is Java installed?");
    }

    if (logVersion) {
      _logger.default.info(`Java version is: ${javaVer}`);
    }

    return javaVer;
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

helpers.prepareEmulator = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (adb, opts) {
    let avd = opts.avd,
        avdArgs = opts.avdArgs,
        language = opts.language,
        locale = opts.locale,
        avdLaunchTimeout = opts.avdLaunchTimeout,
        avdReadyTimeout = opts.avdReadyTimeout;

    if (!avd) {
      throw new Error("Cannot launch AVD without AVD name");
    }

    let avdName = avd.replace('@', '');
    let runningAVD = yield adb.getRunningAVD(avdName);

    if (runningAVD !== null) {
      if (avdArgs && avdArgs.toLowerCase().indexOf("-wipe-data") > -1) {
        _logger.default.debug(`Killing '${avdName}' because it needs to be wiped at start.`);

        yield adb.killEmulator(avdName);
      } else {
        _logger.default.debug("Not launching AVD because it is already running.");

        return;
      }
    }

    avdArgs = this.prepareAVDArgs(opts, adb, avdArgs);
    yield adb.launchAVD(avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout);
  });

  return function (_x, _x2) {
    return _ref4.apply(this, arguments);
  };
}();

helpers.prepareAVDArgs = function (opts, adb, avdArgs) {
  let args = avdArgs ? [avdArgs] : [];

  if (!_lodash.default.isUndefined(opts.networkSpeed)) {
    let networkSpeed = this.ensureNetworkSpeed(adb, opts.networkSpeed);
    args.push('-netspeed', networkSpeed);
  }

  if (opts.isHeadless) {
    args.push('-no-window');
  }

  return args.join(' ');
};

helpers.ensureNetworkSpeed = function (adb, networkSpeed) {
  if (_lodash.default.values(adb.NETWORK_SPEED).indexOf(networkSpeed) !== -1) {
    return networkSpeed;
  }

  _logger.default.warn(`Wrong network speed param ${networkSpeed}, using default: full. Supported values: ${_lodash.default.values(adb.NETWORK_SPEED)}`);

  return adb.NETWORK_SPEED.FULL;
};

helpers.ensureDeviceLocale = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (adb, language, country) {
    if (!_lodash.default.isString(language) && !_lodash.default.isString(country)) {
      _logger.default.warn(`setDeviceLanguageCountry requires language or country.`);

      _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

      return;
    }

    yield adb.setDeviceLanguageCountry(language, country);

    if (!(yield adb.ensureCurrentLocale(language, country))) {
      throw new Error(`Failed to set language: ${language} and country: ${country}`);
    }
  });

  return function (_x3, _x4, _x5) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.getDeviceInfoFromCaps = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const adb = yield helpers.createBaseADB(opts);
    let udid = opts.udid;
    let emPort = null;

    if (opts.avd) {
      yield helpers.prepareEmulator(adb, opts);
      udid = adb.curDeviceId;
      emPort = adb.emulatorPort;
    } else {
      _logger.default.info("Retrieving device list");

      let devices = yield adb.getDevicesWithRetry();

      if (udid) {
        if (!_lodash.default.includes(_lodash.default.map(devices, 'udid'), udid)) {
          _logger.default.errorAndThrow(`Device ${udid} was not in the list of connected devices`);
        }

        emPort = adb.getPortFromEmulatorString(udid);
      } else if (opts.platformVersion) {
        opts.platformVersion = `${opts.platformVersion}`.trim();

        _logger.default.info(`Looking for a device with Android '${opts.platformVersion}'`);

        let availDevicesStr = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = devices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            let device = _step2.value;
            yield adb.setDeviceId(device.udid);
            let deviceOS = yield adb.getPlatformVersion();
            availDevicesStr.push(`${device.udid} (${deviceOS})`);

            if (deviceOS.indexOf(opts.platformVersion) === 0) {
              udid = device.udid;
              break;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (!udid) {
          _logger.default.errorAndThrow(`Unable to find an active device or emulator ` + `with OS ${opts.platformVersion}. The following are available: ` + availDevicesStr.join(', '));
        }

        emPort = adb.getPortFromEmulatorString(udid);
      } else {
        udid = devices[0].udid;
        emPort = adb.getPortFromEmulatorString(udid);
      }
    }

    _logger.default.info(`Using device: ${udid}`);

    return {
      udid,
      emPort
    };
  });

  return function () {
    return _ref6.apply(this, arguments);
  };
}();

helpers.createADB = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const udid = opts.udid,
          emPort = opts.emPort;
    const adb = yield helpers.createBaseADB(opts);
    adb.setDeviceId(udid);

    if (emPort) {
      adb.setEmulatorPort(emPort);
    }

    return adb;
  });

  return function () {
    return _ref7.apply(this, arguments);
  };
}();

helpers.validatePackageActivityNames = function (opts) {
  var _arr = ['appPackage', 'appActivity', 'appWaitPackage', 'appWaitActivity'];

  for (var _i = 0; _i < _arr.length; _i++) {
    const key = _arr[_i];
    const name = opts[key];

    if (!name) {
      continue;
    }

    const match = /([^\w.*,])+/.exec(name);

    if (!match) {
      continue;
    }

    _logger.default.warn(`Capability '${key}' is expected to only include latin letters, digits, underscore, dot, comma and asterisk characters.`);

    _logger.default.warn(`Current value '${name}' has non-matching character at index ${match.index}: '${name.substring(0, match.index + 1)}'`);
  }
};

helpers.getLaunchInfo = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (adb, opts) {
    let app = opts.app,
        appPackage = opts.appPackage,
        appActivity = opts.appActivity,
        appWaitPackage = opts.appWaitPackage,
        appWaitActivity = opts.appWaitActivity;

    if (!app) {
      _logger.default.warn("No app sent in, not parsing package/activity");

      return;
    }

    this.validatePackageActivityNames(opts);

    if (appPackage && appActivity) {
      return;
    }

    _logger.default.debug("Parsing package and activity from app manifest");

    let _ref9 = yield adb.packageAndLaunchActivityFromManifest(app),
        apkPackage = _ref9.apkPackage,
        apkActivity = _ref9.apkActivity;

    if (apkPackage && !appPackage) {
      appPackage = apkPackage;
    }

    if (!appWaitPackage) {
      appWaitPackage = appPackage;
    }

    if (apkActivity && !appActivity) {
      appActivity = apkActivity;
    }

    if (!appWaitActivity) {
      appWaitActivity = appActivity;
    }

    _logger.default.debug(`Parsed package and activity are: ${apkPackage}/${apkActivity}`);

    return {
      appPackage,
      appWaitPackage,
      appActivity,
      appWaitActivity
    };
  });

  return function (_x6, _x7) {
    return _ref8.apply(this, arguments);
  };
}();

helpers.resetApp = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (adb, opts = {}) {
    const app = opts.app,
          appPackage = opts.appPackage,
          fastReset = opts.fastReset,
          fullReset = opts.fullReset,
          _opts$androidInstallT = opts.androidInstallTimeout,
          androidInstallTimeout = _opts$androidInstallT === void 0 ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallT,
          autoGrantPermissions = opts.autoGrantPermissions,
          allowTestPackages = opts.allowTestPackages;

    if (!appPackage) {
      throw new Error("'appPackage' option is required");
    }

    const isInstalled = yield adb.isAppInstalled(appPackage);

    if (isInstalled) {
      try {
        yield adb.forceStop(appPackage);
      } catch (ign) {}

      if (!fullReset && fastReset) {
        const output = yield adb.clear(appPackage);

        if (_lodash.default.isString(output) && output.toLowerCase().includes('failed')) {
          throw new Error(`Cannot clear the application data of '${appPackage}'. Original error: ${output}`);
        }

        if (autoGrantPermissions) {
          try {
            yield adb.grantAllPermissions(appPackage);
          } catch (error) {
            _logger.default.error(`Unable to grant permissions requested. Original error: ${error.message}`);
          }
        }

        _logger.default.debug(`Performed fast reset on the installed '${appPackage}' application (stop and clear)`);

        return;
      }
    }

    if (!app) {
      throw new Error("'app' option is required for reinstall");
    }

    _logger.default.debug(`Running full reset on '${appPackage}' (reinstall)`);

    if (isInstalled) {
      yield adb.uninstallApk(appPackage);
    }

    yield adb.install(app, {
      grantPermissions: autoGrantPermissions,
      timeout: androidInstallTimeout,
      allowTestPackages
    });
  });

  return function (_x8) {
    return _ref10.apply(this, arguments);
  };
}();

helpers.installApk = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (adb, opts = {}) {
    const app = opts.app,
          appPackage = opts.appPackage,
          fastReset = opts.fastReset,
          fullReset = opts.fullReset,
          _opts$androidInstallT2 = opts.androidInstallTimeout,
          androidInstallTimeout = _opts$androidInstallT2 === void 0 ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallT2,
          autoGrantPermissions = opts.autoGrantPermissions,
          allowTestPackages = opts.allowTestPackages;

    if (!app || !appPackage) {
      throw new Error("'app' and 'appPackage' options are required");
    }

    if (fullReset) {
      yield this.resetApp(adb, opts);
      return;
    }

    const shouldPerformFastReset = fastReset && (yield adb.isAppInstalled(appPackage));
    yield adb.installOrUpgrade(app, appPackage, {
      grantPermissions: autoGrantPermissions,
      timeout: androidInstallTimeout,
      allowTestPackages
    });

    if (shouldPerformFastReset) {
      _logger.default.info(`Performing fast reset on '${appPackage}'`);

      yield this.resetApp(adb, opts);
    }
  });

  return function (_x9) {
    return _ref11.apply(this, arguments);
  };
}();

helpers.installOtherApks = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (otherApps, adb, opts) {
    let _opts$androidInstallT3 = opts.androidInstallTimeout,
        androidInstallTimeout = _opts$androidInstallT3 === void 0 ? PACKAGE_INSTALL_TIMEOUT : _opts$androidInstallT3,
        autoGrantPermissions = opts.autoGrantPermissions,
        allowTestPackages = opts.allowTestPackages;
    yield _bluebird.default.all(otherApps.map(otherApp => {
      _logger.default.debug(`Installing app: ${otherApp}`);

      return adb.installOrUpgrade(otherApp, null, {
        grantPermissions: autoGrantPermissions,
        timeout: androidInstallTimeout,
        allowTestPackages
      });
    }));
  });

  return function (_x10, _x11, _x12) {
    return _ref12.apply(this, arguments);
  };
}();

helpers.initUnicodeKeyboard = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (adb) {
    _logger.default.debug('Enabling Unicode keyboard support');

    _logger.default.debug("Pushing unicode ime to device...");

    try {
      yield adb.install(_appiumAndroidIme.path, {
        replace: false
      });
    } catch (err) {
      _logger.default.info(`Performing full reinstall of ${UNICODE_IME_PKG_ID} as a possible fix for: ${err.message}`);

      yield adb.uninstallApk(UNICODE_IME_PKG_ID);
      yield adb.install(_appiumAndroidIme.path, {
        replace: false
      });
    }

    let defaultIME = yield adb.defaultIME();

    _logger.default.debug(`Unsetting previous IME ${defaultIME}`);

    const appiumIME = `${UNICODE_IME_PKG_ID}/.UnicodeIME`;

    _logger.default.debug(`Setting IME to '${appiumIME}'`);

    yield adb.enableIME(appiumIME);
    yield adb.setIME(appiumIME);
    return defaultIME;
  });

  return function (_x13) {
    return _ref13.apply(this, arguments);
  };
}();

helpers.setMockLocationApp = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (adb, app) {
    try {
      if ((yield adb.getApiLevel()) < 23) {
        yield adb.shell(['settings', 'put', 'secure', 'mock_location', '1']);
      } else {
        yield adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']);
      }
    } catch (err) {
      _logger.default.warn(`Unable to set mock location for app '${app}': ${err.message}`);
    }
  });

  return function (_x14, _x15) {
    return _ref14.apply(this, arguments);
  };
}();

helpers.installHelperApp = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (adb, apkPath, packageId, appName) {
    try {
      yield adb.installOrUpgrade(apkPath, packageId, {
        grantPermissions: true
      });
    } catch (err) {
      _logger.default.warn(`Ignored error while installing Appium ${appName} helper: ` + `'${err.message}'. Manually uninstalling the application ` + `with package id '${packageId}' may help. Expect some Appium ` + `features may not work as expected unless this problem is ` + `fixed.`);
    }
  });

  return function (_x16, _x17, _x18, _x19) {
    return _ref15.apply(this, arguments);
  };
}();

helpers.pushSettingsApp = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (adb, throwError = false) {
    _logger.default.debug("Pushing settings apk to device...");

    yield helpers.installHelperApp(adb, _ioAppium.path, SETTINGS_HELPER_PKG_ID, 'Settings');

    if (yield adb.processExists(SETTINGS_HELPER_PKG_ID)) {
      _logger.default.debug(`${SETTINGS_HELPER_PKG_ID} is already running. ` + `There is no need to reset its permissions.`);

      return;
    }

    try {
      yield adb.startApp({
        pkg: SETTINGS_HELPER_PKG_ID,
        activity: SETTINGS_HELPER_MAIN_ACTIVITY,
        action: "android.intent.action.MAIN",
        category: "android.intent.category.LAUNCHER",
        flags: "0x10200000",
        stopApp: false
      });
    } catch (err) {
      _logger.default.warn(`Failed to launch settings app: ${err.message}`);

      if (throwError) {
        throw err;
      }
    }
  });

  return function (_x20) {
    return _ref16.apply(this, arguments);
  };
}();

helpers.pushStrings = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (language, adb, opts) {
    const remoteDir = '/data/local/tmp';
    const stringsJson = 'strings.json';
    const remoteFile = `${remoteDir}/${stringsJson}`;
    yield adb.rimraf(remoteFile);
    let app;

    try {
      app = opts.app || (yield adb.pullApk(opts.appPackage, opts.tmpDir));
    } catch (err) {
      _logger.default.info(`Failed to pull an apk from '${opts.appPackage}' to '${opts.tmpDir}'. Original error: ${err.message}`);
    }

    if (_lodash.default.isEmpty(opts.appPackage) || !(yield _appiumSupport.fs.exists(app))) {
      _logger.default.debug(`No app or package specified. Returning empty strings`);

      return {};
    }

    const stringsTmpDir = _path.default.resolve(opts.tmpDir, opts.appPackage);

    try {
      _logger.default.debug('Extracting strings from apk', app, language, stringsTmpDir);

      const _ref18 = yield adb.extractStringsFromApk(app, language, stringsTmpDir),
            apkStrings = _ref18.apkStrings,
            localPath = _ref18.localPath;

      yield adb.push(localPath, remoteDir);
      return apkStrings;
    } catch (err) {
      _logger.default.warn(`Could not get strings, continuing anyway. Original error: ${err.message}`);

      yield adb.shell('echo', [`'{}' > ${remoteFile}`]);
    } finally {
      yield _appiumSupport.fs.rimraf(stringsTmpDir);
    }

    return {};
  });

  return function (_x21, _x22, _x23) {
    return _ref17.apply(this, arguments);
  };
}();

helpers.unlockWithUIAutomation = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (driver, adb, unlockCapabilities) {
    let unlockType = unlockCapabilities.unlockType;

    if (!_unlockHelpers.default.isValidUnlockType(unlockType)) {
      throw new Error(`Invalid unlock type ${unlockType}`);
    }

    let unlockKey = unlockCapabilities.unlockKey;

    if (!_unlockHelpers.default.isValidKey(unlockType, unlockKey)) {
      throw new Error(`Missing unlockKey ${unlockKey} capability for unlockType ${unlockType}`);
    }

    const unlockMethod = {
      [_unlockHelpers.PIN_UNLOCK]: _unlockHelpers.default.pinUnlock,
      [_unlockHelpers.PASSWORD_UNLOCK]: _unlockHelpers.default.passwordUnlock,
      [_unlockHelpers.PATTERN_UNLOCK]: _unlockHelpers.default.patternUnlock,
      [_unlockHelpers.FINGERPRINT_UNLOCK]: _unlockHelpers.default.fingerprintUnlock
    }[unlockType];
    yield unlockMethod(adb, driver, unlockCapabilities);
  });

  return function (_x24, _x25, _x26) {
    return _ref19.apply(this, arguments);
  };
}();

helpers.unlockWithHelperApp = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (adb) {
    _logger.default.info("Unlocking screen");

    let firstRun = true;
    yield (0, _asyncbox.retry)(3, (0, _asyncToGenerator2.default)(function* () {
      if (firstRun) {
        firstRun = false;
      } else {
        try {
          if (!(yield adb.isScreenLocked())) {
            return;
          }
        } catch (e) {
          _logger.default.warn(`Error in isScreenLocked: ${e.message}`);

          _logger.default.warn("\"adb shell dumpsys window\" command has timed out.");

          _logger.default.warn("The reason of this timeout is the delayed adb response. Resetting adb server can improve it.");
        }
      }

      _logger.default.info(`Launching ${SETTINGS_HELPER_UNLOCK_ACTIVITY}`);

      yield adb.shell(['am', 'start', '-n', `${SETTINGS_HELPER_PKG_ID}/${SETTINGS_HELPER_UNLOCK_ACTIVITY}`, '-c', 'android.intent.category.LAUNCHER', '-a', 'android.intent.action.MAIN', '-f', '0x10200000']);
      yield _bluebird.default.delay(1000);
    }));
  });

  return function (_x27) {
    return _ref20.apply(this, arguments);
  };
}();

helpers.unlock = function () {
  var _ref22 = (0, _asyncToGenerator2.default)(function* (driver, adb, capabilities) {
    if (!(yield adb.isScreenLocked())) {
      _logger.default.info("Screen already unlocked, doing nothing");

      return;
    }

    _logger.default.debug("Screen is locked, trying to unlock");

    if (_lodash.default.isUndefined(capabilities.unlockType)) {
      _logger.default.warn("Using app unlock, this is going to be deprecated!");

      yield helpers.unlockWithHelperApp(adb);
    } else {
      yield helpers.unlockWithUIAutomation(driver, adb, {
        unlockType: capabilities.unlockType,
        unlockKey: capabilities.unlockKey
      });
      yield helpers.verifyUnlock(adb);
    }
  });

  return function (_x28, _x29, _x30) {
    return _ref22.apply(this, arguments);
  };
}();

helpers.verifyUnlock = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (adb) {
    yield (0, _asyncbox.retryInterval)(2, 1000, (0, _asyncToGenerator2.default)(function* () {
      if (yield adb.isScreenLocked()) {
        throw new Error("Screen did not unlock successfully, retrying");
      }

      _logger.default.debug("Screen unlocked successfully");
    }));
  });

  return function (_x31) {
    return _ref23.apply(this, arguments);
  };
}();

helpers.initDevice = function () {
  var _ref25 = (0, _asyncToGenerator2.default)(function* (adb, opts) {
    yield adb.waitForDevice();
    yield helpers.pushSettingsApp(adb);

    if (!opts.avd) {
      yield helpers.setMockLocationApp(adb, SETTINGS_HELPER_PKG_ID);
    }

    yield helpers.ensureDeviceLocale(adb, opts.language, opts.locale);
    yield adb.startLogcat();

    if (opts.unicodeKeyboard) {
      return yield helpers.initUnicodeKeyboard(adb);
    }
  });

  return function (_x32, _x33) {
    return _ref25.apply(this, arguments);
  };
}();

helpers.removeNullProperties = function (obj) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _lodash.default.keys(obj)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      let key = _step3.value;

      if (_lodash.default.isNull(obj[key]) || _lodash.default.isUndefined(obj[key])) {
        delete obj[key];
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
};

helpers.truncateDecimals = function (number, digits) {
  let multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);
  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function (browser) {
  return _lodash.default.includes(Object.keys(CHROME_BROWSER_PACKAGE_ACTIVITY), (browser || '').toLowerCase());
};

helpers.getChromePkg = function (browser) {
  return CHROME_BROWSER_PACKAGE_ACTIVITY[browser.toLowerCase()] || CHROME_BROWSER_PACKAGE_ACTIVITY.default;
};

helpers.removeAllSessionWebSocketHandlers = function () {
  var _ref26 = (0, _asyncToGenerator2.default)(function* (server, sessionId) {
    if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
      return;
    }

    const activeHandlers = yield server.getWebSocketHandlers(sessionId);
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = _lodash.default.keys(activeHandlers)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        const pathname = _step4.value;
        yield server.removeWebSocketHandler(pathname);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  });

  return function (_x34, _x35) {
    return _ref26.apply(this, arguments);
  };
}();

helpers.parseArray = function (cap) {
  let parsedCaps;

  try {
    parsedCaps = JSON.parse(cap);
  } catch (ign) {}

  if (_lodash.default.isArray(parsedCaps)) {
    return parsedCaps;
  } else if (_lodash.default.isString(cap)) {
    return [cap];
  }

  throw new Error(`must provide a string or JSON Array; received ${cap}`);
};

helpers.validateDesiredCaps = function (caps) {
  if ((!caps.browserName || !this.isChromeBrowser(caps.browserName)) && !caps.app && !caps.appPackage) {
    _logger.default.errorAndThrow('The desired capabilities must include either an app, appPackage or browserName');
  }

  if (caps.browserName) {
    if (caps.app) {
      _logger.default.warn(`The desired capabilities should generally not include both an 'app' and a 'browserName'`);
    }

    if (caps.appPackage) {
      _logger.default.errorAndThrow(`The desired should not include both of an 'appPackage' and a 'browserName'`);
    }
  }

  return true;
};

helpers.bootstrap = _bootstrap.default;
helpers.unlocker = _unlockHelpers.default;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
