"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidDriver = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _androidHelpers = _interopRequireDefault(require("./android-helpers"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumAdb = require("appium-adb");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _sharedPreferencesBuilder = require("shared-preferences-builder");

var _bluebird = _interopRequireDefault(require("bluebird"));

const APP_EXTENSION = '.apk';
const DEVICE_PORT = 4724;
const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')]];

class AndroidDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.sessionChromedrivers = {};
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash.default.clone(NO_PROXY);
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.apkStrings = {};
    this.bootstrapPort = opts.bootstrapPort || DEVICE_PORT;
    this.unlocker = _androidHelpers.default.unlocker;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
            cmd = _step$value[0],
            fn = _step$value[1];

        AndroidDriver.prototype[cmd] = fn;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  createSession(...args) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        let _ref = yield _superprop_callCreateSession(...args),
            _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            sessionId = _ref2[0],
            caps = _ref2[1];

        let serverDetails = {
          platform: 'LINUX',
          webStorageEnabled: false,
          takesScreenshot: true,
          javascriptEnabled: true,
          databaseEnabled: false,
          networkConnectionEnabled: true,
          locationContextEnabled: false,
          warnings: {},
          desired: _this.caps
        };
        _this.caps = Object.assign(serverDetails, _this.caps);
        let defaultOpts = {
          action: "android.intent.action.MAIN",
          category: "android.intent.category.LAUNCHER",
          flags: "0x10200000",
          disableAndroidWatchers: false,
          tmpDir: yield _appiumSupport.tempDir.staticDir(),
          fullReset: false,
          autoLaunch: true,
          adbPort: _appiumAdb.DEFAULT_ADB_PORT,
          androidInstallTimeout: 90000
        };

        _lodash.default.defaults(_this.opts, defaultOpts);

        if (!_this.opts.javaVersion) {
          _this.opts.javaVersion = yield _androidHelpers.default.getJavaVersion();
        }

        _this.useUnlockHelperApp = _lodash.default.isUndefined(_this.caps.unlockType);

        if (_this.opts.noReset === true) {
          _this.opts.fullReset = false;
        }

        if (_this.opts.fullReset === true) {
          _this.opts.noReset = false;
        }

        _this.opts.fastReset = !_this.opts.fullReset && !_this.opts.noReset;
        _this.opts.skipUninstall = _this.opts.fastReset || _this.opts.noReset;
        _this.curContext = _this.defaultContextName();

        if (_this.isChromeSession) {
          _logger.default.info("We're going to run a Chrome-based session");

          let _helpers$getChromePkg = _androidHelpers.default.getChromePkg(_this.opts.browserName),
              pkg = _helpers$getChromePkg.pkg,
              activity = _helpers$getChromePkg.activity;

          _this.opts.appPackage = pkg;
          _this.opts.appActivity = activity;

          _logger.default.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
        }

        if (_this.opts.nativeWebScreenshot) {
          _this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
        }

        if (_this.opts.reboot) {
          _this.setAvdFromCapabilities(caps);
        }

        let _ref3 = yield _androidHelpers.default.getDeviceInfoFromCaps(_this.opts),
            udid = _ref3.udid,
            emPort = _ref3.emPort;

        _this.opts.udid = udid;
        _this.opts.emPort = emPort;
        _this.adb = yield _androidHelpers.default.createADB({
          javaVersion: _this.opts.javaVersion,
          udid: _this.opts.udid,
          emPort: _this.opts.emPort,
          adbPort: _this.opts.adbPort,
          suppressKillServer: _this.opts.suppressKillServer,
          remoteAdbHost: _this.opts.remoteAdbHost,
          clearDeviceLogsOnStart: _this.opts.clearDeviceLogsOnStart,
          adbExecTimeout: _this.opts.adbExecTimeout
        });

        if ((yield _this.adb.getApiLevel()) >= 23) {
          _logger.default.warn("Consider setting 'automationName' capability to " + "'uiautomator2' on Android >= 6, since UIAutomator framework " + "is not maintained anymore by the OS vendor.");
        }

        if (_this.helpers.isPackageOrBundle(_this.opts.app)) {
          _this.opts.appPackage = _this.opts.app;
          _this.opts.app = null;
        }

        if (_this.opts.app) {
          _this.opts.app = yield _this.helpers.configureApp(_this.opts.app, APP_EXTENSION);
          _this.opts.appIsTemp = caps.app !== _this.opts.app;
          yield _this.checkAppPresent();
        } else if (_this.appOnDevice) {
          _logger.default.info(`App file was not listed, instead we're going to run ` + `${_this.opts.appPackage} directly on the device`);

          yield _this.checkPackagePresent();
        }

        if (_appiumSupport.util.hasValue(_this.opts.networkSpeed)) {
          if (!_this.isEmulator()) {
            _logger.default.warn("Sorry, networkSpeed capability is only available for emulators");
          } else {
            let networkSpeed = _androidHelpers.default.ensureNetworkSpeed(_this.adb, _this.opts.networkSpeed);

            yield _this.adb.networkSpeed(networkSpeed);
          }
        }

        if (_appiumSupport.util.hasValue(_this.opts.gpsEnabled)) {
          if (_this.isEmulator()) {
            _logger.default.info(`Trying to ${_this.opts.gpsEnabled ? "enable" : "disable"} gps location provider`);

            yield _this.adb.toggleGPSLocationProvider(_this.opts.gpsEnabled);
          } else {
            _logger.default.warn('Sorry! gpsEnabled capability is only available for emulators');
          }
        }

        yield _this.startAndroidSession(_this.opts);
        return [sessionId, _this.caps];
      } catch (e) {
        try {
          yield _this.deleteSession();
        } catch (ign) {}

        throw e;
      }
    })();
  }

  isEmulator() {
    return !!(this.opts.avd || /emulator/.test(this.opts.udid));
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  get appOnDevice() {
    return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
  }

  get isChromeSession() {
    return _androidHelpers.default.isChromeBrowser(this.opts.browserName);
  }

  onSettingsUpdate(key, value) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (key === "ignoreUnimportantViews") {
        yield _this2.setCompressedLayoutHierarchy(value);
      }
    })();
  }

  startAndroidSession() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info(`Starting Android session`);

      _this3.defaultIME = yield _androidHelpers.default.initDevice(_this3.adb, _this3.opts);
      _this3.caps.deviceName = _this3.adb.curDeviceId;
      _this3.caps.deviceUDID = _this3.opts.udid;
      _this3.caps.platformVersion = yield _this3.adb.getPlatformVersion();
      _this3.caps.deviceScreenSize = yield _this3.adb.getScreenSize();
      _this3.caps.deviceModel = yield _this3.adb.getModel();
      _this3.caps.deviceManufacturer = yield _this3.adb.getManufacturer();

      if (_this3.opts.autoLaunch) {
        yield _this3.initAUT();
      }

      if (_this3.opts.disableWindowAnimation) {
        if (yield _this3.adb.isAnimationOn()) {
          _logger.default.info('Disabling window animation as it is requested by "disableWindowAnimation" capability');

          yield _this3.adb.setAnimationState(false);
          _this3._wasWindowAnimationDisabled = true;
        } else {
          _logger.default.info('Window animation is already disabled');
        }
      }

      _this3.bootstrap = new _androidHelpers.default.bootstrap(_this3.adb, _this3.bootstrapPort, _this3.opts.websocket);
      yield _this3.bootstrap.start(_this3.opts.appPackage, _this3.opts.disableAndroidWatchers, _this3.opts.acceptSslCerts);

      _this3.bootstrap.onUnexpectedShutdown.catch(function () {
        var _ref4 = (0, _asyncToGenerator2.default)(function* (err) {
          if (!_this3.bootstrap.ignoreUnexpectedShutdown) {
            yield _this3.startUnexpectedShutdown(err);
          }
        });

        return function (_x) {
          return _ref4.apply(this, arguments);
        };
      }());

      if (!_this3.opts.skipUnlock) {
        yield _androidHelpers.default.unlock(_this3, _this3.adb, _this3.caps);
      }

      if (_this3.opts.ignoreUnimportantViews) {
        yield _this3.settings.update({
          ignoreUnimportantViews: _this3.opts.ignoreUnimportantViews
        });
      }

      if (_this3.isChromeSession) {
        yield _this3.startChromeSession();
      } else {
        if (_this3.opts.autoLaunch) {
          yield _this3.startAUT();
        }
      }

      if (_appiumSupport.util.hasValue(_this3.opts.orientation)) {
        _logger.default.debug(`Setting initial orientation to '${_this3.opts.orientation}'`);

        yield _this3.setOrientation(_this3.opts.orientation);
      }

      yield _this3.initAutoWebview();
    })();
  }

  initAutoWebview() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this4.opts.autoWebview) {
        let viewName = _this4.defaultWebviewName();

        let timeout = _this4.opts.autoWebviewTimeout || 2000;

        _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

        yield (0, _asyncbox.retryInterval)(timeout / 500, 500, (0, _asyncToGenerator2.default)(function* () {
          yield _this4.setContext(viewName);
        }));
      }
    })();
  }

  initAUT() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let launchInfo = yield _androidHelpers.default.getLaunchInfo(_this5.adb, _this5.opts);
      Object.assign(_this5.opts, launchInfo);
      Object.assign(_this5.caps, launchInfo);

      if (_this5.opts.otherApps) {
        let otherApps;

        try {
          otherApps = _androidHelpers.default.parseArray(_this5.opts.otherApps);
        } catch (e) {
          _logger.default.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
        }

        otherApps = yield _bluebird.default.all(otherApps.map(app => _this5.helpers.configureApp(app, APP_EXTENSION)));
        yield _androidHelpers.default.installOtherApks(otherApps, _this5.adb, _this5.opts);
      }

      if (!_this5.opts.app) {
        if (_this5.opts.fullReset) {
          _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
        }

        _logger.default.debug('No app capability. Assuming it is already on the device');

        if (_this5.opts.fastReset) {
          yield _androidHelpers.default.resetApp(_this5.adb, _this5.opts);
        }

        return;
      }

      if (!_this5.opts.skipUninstall) {
        yield _this5.adb.uninstallApk(_this5.opts.appPackage);
      }

      yield _androidHelpers.default.installApk(_this5.adb, _this5.opts);
      _this5.apkStrings[_this5.opts.language] = yield _androidHelpers.default.pushStrings(_this5.opts.language, _this5.adb, _this5.opts);

      if (!_lodash.default.isUndefined(_this5.opts.sharedPreferences)) {
        yield _this5.setSharedPreferences(_this5.opts);
      }
    })();
  }

  checkAppPresent() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Checking whether app is actually present");

      if (!(yield _appiumSupport.fs.exists(_this6.opts.app))) {
        _logger.default.errorAndThrow(`Could not find app apk at ${_this6.opts.app}`);
      }
    })();
  }

  checkPackagePresent() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Checking whether package is present on the device");

      if (!(yield _this7.adb.shell(['pm', 'list', 'packages', _this7.opts.appPackage]))) {
        _logger.default.errorAndThrow(`Could not find package ${_this7.opts.appPackage} on the device`);
      }
    })();
  }

  setCompressedLayoutHierarchy(compress) {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this8.bootstrap.sendAction("compressedLayoutHierarchy", {
        compressLayout: compress
      });
    })();
  }

  deleteSession() {
    var _this9 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug("Shutting down Android driver");

      yield _androidHelpers.default.removeAllSessionWebSocketHandlers(_this9.server, _this9.sessionId);
      yield _superprop_callDeleteSession();

      if (_this9.bootstrap) {
        yield _this9.stopChromedriverProxies();

        if (_this9.opts.unicodeKeyboard && _this9.opts.resetKeyboard && _this9.defaultIME) {
          _logger.default.debug(`Resetting IME to ${_this9.defaultIME}`);

          yield _this9.adb.setIME(_this9.defaultIME);
        }

        if (!_this9.isChromeSession) {
          yield _this9.adb.forceStop(_this9.opts.appPackage);
        }

        yield _this9.adb.goToHome();

        if (_this9.opts.fullReset && !_this9.opts.skipUninstall && !_this9.appOnDevice) {
          yield _this9.adb.uninstallApk(_this9.opts.appPackage);
        }

        yield _this9.bootstrap.shutdown();
        _this9.bootstrap = null;
      } else {
        _logger.default.debug("Called deleteSession but bootstrap wasn't active");
      }

      yield _this9.adb.stopLogcat();

      if (_this9.useUnlockHelperApp) {
        yield _this9.adb.forceStop('io.appium.unlock');
      }

      if (_this9._wasWindowAnimationDisabled) {
        _logger.default.info('Restoring window animation state');

        yield _this9.adb.setAnimationState(true);
      }

      if (_this9.opts.reboot) {
        let avdName = _this9.opts.avd.replace('@', '');

        _logger.default.debug(`closing emulator '${avdName}'`);

        yield _this9.adb.killEmulator(avdName);
      }

      if (_this9.opts.clearSystemFiles) {
        if (_this9.opts.appIsTemp) {
          _logger.default.debug(`Temporary copy of app was made: deleting '${_this9.opts.app}'`);

          try {
            yield _appiumSupport.fs.rimraf(_this9.opts.app);
          } catch (err) {
            _logger.default.warn(`Unable to delete temporary app: ${err.message}`);
          }
        } else {
          _logger.default.debug('App was not copied, so not deleting');
        }
      } else {
        _logger.default.debug('Not cleaning generated files. Add `clearSystemFiles` capability if wanted.');
      }
    })();
  }

  setSharedPreferences() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let sharedPrefs = _this10.opts.sharedPreferences;

      _logger.default.info("Trying to set shared preferences");

      let name = sharedPrefs.name;

      if (_lodash.default.isUndefined(name)) {
        _logger.default.warn(`Skipping setting Shared preferences, name is undefined: ${JSON.stringify(sharedPrefs)}`);

        return false;
      }

      let remotePath = `/data/data/${_this10.opts.appPackage}/shared_prefs`;
      let remoteFile = `${remotePath}/${name}.xml`;
      let localPath = `/tmp/${name}.xml`;

      let builder = _this10.getPrefsBuilder();

      builder.build(sharedPrefs.prefs);

      _logger.default.info(`Creating temporary shared preferences: ${localPath}`);

      builder.toFile(localPath);

      _logger.default.info(`Creating shared_prefs remote folder: ${remotePath}`);

      yield _this10.adb.shell(['mkdir', '-p', remotePath]);

      _logger.default.info(`Pushing shared_prefs to ${remoteFile}`);

      yield _this10.adb.push(localPath, remoteFile);

      try {
        _logger.default.info(`Trying to remove shared preferences temporary file`);

        if (yield _appiumSupport.fs.exists(localPath)) {
          yield _appiumSupport.fs.unlink(localPath);
        }
      } catch (e) {
        _logger.default.warn(`Error trying to remove temporary file ${localPath}`);
      }

      return true;
    })();
  }

  getPrefsBuilder() {
    return new _sharedPreferencesBuilder.SharedPrefsBuilder();
  }

  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }

    return _androidHelpers.default.validateDesiredCaps(caps);
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return this.jwpProxyActive;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return _lodash.default.isFunction(this.proxyReqRes);
  }

}

exports.AndroidDriver = AndroidDriver;
var _default = AndroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
