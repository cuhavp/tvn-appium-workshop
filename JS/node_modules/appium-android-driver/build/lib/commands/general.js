"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWindows = parseWindows;
exports.parseSurfaceLine = parseSurfaceLine;
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _webviewHelpers = require("../webview-helpers");

var _moment = _interopRequireDefault(require("moment"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.keys = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (keys) {
    keys = _lodash.default.isArray(keys) ? keys.join('') : keys;
    let params = {
      text: keys,
      replace: false
    };

    if (this.opts.unicodeKeyboard) {
      params.unicodeKeyboard = true;
    }

    yield this.doSendKeys(params);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

commands.doSendKeys = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (params) {
    return yield this.bootstrap.sendAction('setText', params);
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();

const DEFAULT_DEVICE_TIME = 'YYYY-MM-DDTHH:mm:ssZ';

commands.getDeviceTime = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (format = DEFAULT_DEVICE_TIME) {
    _logger.default.info('Attempting to capture android device date and time');

    if (!_lodash.default.isString(format)) {
      _logger.default.errorAndThrow(`The format specifier is expected to be a valid string specifier like '${DEFAULT_DEVICE_TIME}'. ` + `The current value is: ${format}`);
    }

    const deviceTimestamp = (yield this.adb.shell(['date', '+%Y-%m-%dT%T%z'])).trim();
    const parsedTimestamp = (0, _moment.default)(deviceTimestamp, 'YYYY-MM-DDTHH:mm:ssZ');

    if (!parsedTimestamp.isValid()) {
      _logger.default.warn(`Cannot parse the returned timestamp '${deviceTimestamp}'. Returning as is`);

      return deviceTimestamp;
    }

    return parsedTimestamp.format(format);
  });

  return function () {
    return _ref3.apply(this, arguments);
  };
}();

commands.getPageSource = (0, _asyncToGenerator2.default)(function* () {
  return yield this.bootstrap.sendAction('source');
});
commands.back = (0, _asyncToGenerator2.default)(function* () {
  return yield this.bootstrap.sendAction('pressBack');
});
commands.isKeyboardShown = (0, _asyncToGenerator2.default)(function* () {
  let keyboardInfo = yield this.adb.isSoftKeyboardPresent();
  return keyboardInfo.isKeyboardShown;
});
commands.hideKeyboard = (0, _asyncToGenerator2.default)(function* () {
  let _ref8 = yield this.adb.isSoftKeyboardPresent(),
      isKeyboardShown = _ref8.isKeyboardShown,
      canCloseKeyboard = _ref8.canCloseKeyboard;

  if (!isKeyboardShown) {
    throw new Error("Soft keyboard not present, cannot hide keyboard");
  }

  if (canCloseKeyboard) {
    return yield this.back();
  }

  _logger.default.info("Keyboard has no UI; no closing necessary");
});

commands.openSettingsActivity = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (setting) {
    let _ref10 = yield this.adb.getFocusedPackageAndActivity(),
        appPackage = _ref10.appPackage,
        appActivity = _ref10.appActivity;

    yield this.adb.shell(['am', 'start', '-a', `android.settings.${setting}`]);
    yield this.adb.waitForNotActivity(appPackage, appActivity, 5000);
  });

  return function (_x3) {
    return _ref9.apply(this, arguments);
  };
}();

commands.getWindowSize = (0, _asyncToGenerator2.default)(function* () {
  return yield this.bootstrap.sendAction('getDeviceSize');
});
commands.getWindowRect = (0, _asyncToGenerator2.default)(function* () {
  const _ref13 = yield this.getWindowSize(),
        width = _ref13.width,
        height = _ref13.height;

  return {
    width,
    height,
    x: 0,
    y: 0
  };
});
commands.getCurrentActivity = (0, _asyncToGenerator2.default)(function* () {
  return (yield this.adb.getFocusedPackageAndActivity()).appActivity;
});
commands.getCurrentPackage = (0, _asyncToGenerator2.default)(function* () {
  return (yield this.adb.getFocusedPackageAndActivity()).appPackage;
});

commands.background = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (seconds) {
    if (seconds < 0) {
      yield this.adb.goToHome();
      return true;
    }

    let _ref17 = yield this.adb.getFocusedPackageAndActivity(),
        appPackage = _ref17.appPackage,
        appActivity = _ref17.appActivity;

    yield this.adb.goToHome();
    yield _bluebird.default.delay(seconds * 1000);
    let args;

    if (this._cachedActivityArgs && this._cachedActivityArgs[`${appPackage}/${appActivity}`]) {
      args = this._cachedActivityArgs[`${appPackage}/${appActivity}`];
    } else {
      try {
        _logger.default.debug(`Activating app '${appPackage}' in order to restore it`);

        yield this.activateApp(appPackage);
        return true;
      } catch (ign) {}

      args = appPackage === this.opts.appPackage && appActivity === this.opts.appActivity || appPackage === this.opts.appWaitPackage && (this.opts.appWaitActivity || '').split(',').includes(appActivity) ? {
        pkg: this.opts.appPackage,
        activity: this.opts.appActivity,
        action: this.opts.intentAction,
        category: this.opts.intentCategory,
        flags: this.opts.intentFlags,
        waitPkg: this.opts.appWaitPackage,
        waitActivity: this.opts.appWaitActivity,
        optionalIntentArguments: this.opts.optionalIntentArguments,
        stopApp: false,
        user: this.opts.userProfile
      } : {
        pkg: appPackage,
        activity: appActivity,
        waitPkg: appPackage,
        waitActivity: appActivity,
        stopApp: false
      };
    }

    args = yield _appiumSupport.util.filterObject(args);

    _logger.default.debug(`Bringing application back to foreground with arguments: ${JSON.stringify(args)}`);

    return yield this.adb.startApp(args);
  });

  return function (_x4) {
    return _ref16.apply(this, arguments);
  };
}();

commands.getStrings = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (language) {
    if (!language) {
      language = yield this.adb.getDeviceLanguage();

      _logger.default.info(`No language specified, returning strings for: ${language}`);
    }

    if (this.apkStrings[language]) {
      return this.apkStrings[language];
    }

    this.apkStrings[language] = yield _androidHelpers.default.pushStrings(language, this.adb, this.opts);
    yield this.bootstrap.sendAction('updateStrings');
    return this.apkStrings[language];
  });

  return function (_x5) {
    return _ref18.apply(this, arguments);
  };
}();

commands.launchApp = (0, _asyncToGenerator2.default)(function* () {
  yield this.initAUT();
  yield this.startAUT();
});

commands.startActivity = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (appPackage, appActivity, appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags, optionalIntentArguments, dontStopAppOnReset) {
    _logger.default.debug(`Starting package '${appPackage}' and activity '${appActivity}'`);

    if (!_appiumSupport.util.hasValue(dontStopAppOnReset)) {
      dontStopAppOnReset = !!this.opts.dontStopAppOnReset;
    }

    let args = {
      pkg: appPackage,
      activity: appActivity,
      waitPkg: appWaitPackage || appPackage,
      waitActivity: appWaitActivity || appActivity,
      action: intentAction,
      category: intentCategory,
      flags: intentFlags,
      optionalIntentArguments,
      stopApp: !dontStopAppOnReset
    };
    this._cachedActivityArgs = this._cachedActivityArgs || {};
    this._cachedActivityArgs[`${args.waitPkg}/${args.waitActivity}`] = args;
    yield this.adb.startApp(args);
  });

  return function (_x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14) {
    return _ref20.apply(this, arguments);
  };
}();

commands.reset = (0, _asyncToGenerator2.default)(function* () {
  yield _androidHelpers.default.resetApp(this.adb, Object.assign({}, this.opts, {
    fastReset: true
  }));
  this.curContext = _webviewHelpers.NATIVE_WIN;
  return (yield this.isChromeSession) ? this.startChromeSession() : this.startAUT();
});
commands.startAUT = (0, _asyncToGenerator2.default)(function* () {
  yield this.adb.startApp({
    pkg: this.opts.appPackage,
    activity: this.opts.appActivity,
    action: this.opts.intentAction,
    category: this.opts.intentCategory,
    flags: this.opts.intentFlags,
    waitPkg: this.opts.appWaitPackage,
    waitActivity: this.opts.appWaitActivity,
    waitDuration: this.opts.appWaitDuration,
    optionalIntentArguments: this.opts.optionalIntentArguments,
    stopApp: !this.opts.dontStopAppOnReset,
    user: this.opts.userProfile
  });
});

commands.setUrl = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (uri) {
    yield this.adb.startUri(uri, this.opts.appPackage);
  });

  return function (_x15) {
    return _ref23.apply(this, arguments);
  };
}();

commands.closeApp = (0, _asyncToGenerator2.default)(function* () {
  yield this.adb.forceStop(this.opts.appPackage);
  this.curContext = _webviewHelpers.NATIVE_WIN;
  yield this.stopChromedriverProxies();
});
commands.getDisplayDensity = (0, _asyncToGenerator2.default)(function* () {
  let out = yield this.adb.shell(['getprop', 'ro.sf.lcd_density']);

  if (out) {
    let val = parseInt(out, 10);

    if (!isNaN(val)) {
      return val;
    }

    _logger.default.debug(`Parsed density value was NaN: "${out}"`);
  }

  out = yield this.adb.shell(['getprop', 'qemu.sf.lcd_density']);

  if (out) {
    let val = parseInt(out, 10);

    if (!isNaN(val)) {
      return val;
    }

    _logger.default.debug(`Parsed density value was NaN: "${out}"`);
  }

  _logger.default.errorAndThrow('Failed to get display density property.');
});

function parseSurfaceLine(line) {
  let bounds = line.split('rect=')[1].replace(/[(), x]+/g, ' ').trim().split(' ');
  return {
    visible: line.indexOf('shown=true') !== -1,
    x: parseFloat(bounds[0]),
    y: parseFloat(bounds[1]),
    width: parseFloat(bounds[2]),
    height: parseFloat(bounds[3])
  };
}

function parseWindows(lines) {
  let atStatusBar = false;
  let atNavBar = false;
  let statusBar;
  let navigationBar;
  lines.split('\n').forEach(line => {
    if (line.indexOf('  Window #') !== -1) {
      atStatusBar = line.indexOf('StatusBar') !== -1;
      atNavBar = line.indexOf('NavigationBar') !== -1;
      return;
    }

    if (line.indexOf('      Surface:') === -1) {
      return;
    }

    if (atStatusBar) {
      statusBar = parseSurfaceLine(line);
      atStatusBar = false;
    } else if (atNavBar) {
      navigationBar = parseSurfaceLine(line);
      atNavBar = false;
    }
  });

  if (!statusBar) {
    _logger.default.errorAndThrow('Failed to parse status bar information.');
  }

  if (!navigationBar) {
    _logger.default.errorAndThrow('Failed to parse navigation bar information.');
  }

  return {
    statusBar,
    navigationBar
  };
}

commands.getSystemBars = (0, _asyncToGenerator2.default)(function* () {
  let out = yield this.adb.shell(['dumpsys', 'window', 'windows']);

  if (!out) {
    _logger.default.errorAndThrow('Did not get window manager output.');
  }

  return parseWindows(out);
});

commands.mobilePerformEditorAction = function () {
  var _ref27 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const action = opts.action;

    if (!_appiumSupport.util.hasValue(action)) {
      _logger.default.errorAndThrow(`'action' argument is required`);
    }

    yield this.adb.performEditorAction(action);
  });

  return function () {
    return _ref27.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJrZXlzIiwiXyIsImlzQXJyYXkiLCJqb2luIiwicGFyYW1zIiwidGV4dCIsInJlcGxhY2UiLCJvcHRzIiwidW5pY29kZUtleWJvYXJkIiwiZG9TZW5kS2V5cyIsImJvb3RzdHJhcCIsInNlbmRBY3Rpb24iLCJERUZBVUxUX0RFVklDRV9USU1FIiwiZ2V0RGV2aWNlVGltZSIsImZvcm1hdCIsImxvZyIsImluZm8iLCJpc1N0cmluZyIsImVycm9yQW5kVGhyb3ciLCJkZXZpY2VUaW1lc3RhbXAiLCJhZGIiLCJzaGVsbCIsInRyaW0iLCJwYXJzZWRUaW1lc3RhbXAiLCJpc1ZhbGlkIiwid2FybiIsImdldFBhZ2VTb3VyY2UiLCJiYWNrIiwiaXNLZXlib2FyZFNob3duIiwia2V5Ym9hcmRJbmZvIiwiaXNTb2Z0S2V5Ym9hcmRQcmVzZW50IiwiaGlkZUtleWJvYXJkIiwiY2FuQ2xvc2VLZXlib2FyZCIsIkVycm9yIiwib3BlblNldHRpbmdzQWN0aXZpdHkiLCJzZXR0aW5nIiwiZ2V0Rm9jdXNlZFBhY2thZ2VBbmRBY3Rpdml0eSIsImFwcFBhY2thZ2UiLCJhcHBBY3Rpdml0eSIsIndhaXRGb3JOb3RBY3Rpdml0eSIsImdldFdpbmRvd1NpemUiLCJnZXRXaW5kb3dSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImdldEN1cnJlbnRBY3Rpdml0eSIsImdldEN1cnJlbnRQYWNrYWdlIiwiYmFja2dyb3VuZCIsInNlY29uZHMiLCJnb1RvSG9tZSIsIkIiLCJkZWxheSIsImFyZ3MiLCJfY2FjaGVkQWN0aXZpdHlBcmdzIiwiZGVidWciLCJhY3RpdmF0ZUFwcCIsImlnbiIsImFwcFdhaXRQYWNrYWdlIiwiYXBwV2FpdEFjdGl2aXR5Iiwic3BsaXQiLCJpbmNsdWRlcyIsInBrZyIsImFjdGl2aXR5IiwiYWN0aW9uIiwiaW50ZW50QWN0aW9uIiwiY2F0ZWdvcnkiLCJpbnRlbnRDYXRlZ29yeSIsImZsYWdzIiwiaW50ZW50RmxhZ3MiLCJ3YWl0UGtnIiwid2FpdEFjdGl2aXR5Iiwib3B0aW9uYWxJbnRlbnRBcmd1bWVudHMiLCJzdG9wQXBwIiwidXNlciIsInVzZXJQcm9maWxlIiwidXRpbCIsImZpbHRlck9iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGFydEFwcCIsImdldFN0cmluZ3MiLCJsYW5ndWFnZSIsImdldERldmljZUxhbmd1YWdlIiwiYXBrU3RyaW5ncyIsImFuZHJvaWRIZWxwZXJzIiwicHVzaFN0cmluZ3MiLCJsYXVuY2hBcHAiLCJpbml0QVVUIiwic3RhcnRBVVQiLCJzdGFydEFjdGl2aXR5IiwiZG9udFN0b3BBcHBPblJlc2V0IiwiaGFzVmFsdWUiLCJyZXNldCIsInJlc2V0QXBwIiwiT2JqZWN0IiwiYXNzaWduIiwiZmFzdFJlc2V0IiwiY3VyQ29udGV4dCIsIk5BVElWRV9XSU4iLCJpc0Nocm9tZVNlc3Npb24iLCJzdGFydENocm9tZVNlc3Npb24iLCJ3YWl0RHVyYXRpb24iLCJhcHBXYWl0RHVyYXRpb24iLCJzZXRVcmwiLCJ1cmkiLCJzdGFydFVyaSIsImNsb3NlQXBwIiwiZm9yY2VTdG9wIiwic3RvcENocm9tZWRyaXZlclByb3hpZXMiLCJnZXREaXNwbGF5RGVuc2l0eSIsIm91dCIsInZhbCIsInBhcnNlSW50IiwiaXNOYU4iLCJwYXJzZVN1cmZhY2VMaW5lIiwibGluZSIsImJvdW5kcyIsInZpc2libGUiLCJpbmRleE9mIiwicGFyc2VGbG9hdCIsInBhcnNlV2luZG93cyIsImxpbmVzIiwiYXRTdGF0dXNCYXIiLCJhdE5hdkJhciIsInN0YXR1c0JhciIsIm5hdmlnYXRpb25CYXIiLCJmb3JFYWNoIiwiZ2V0U3lzdGVtQmFycyIsIm1vYmlsZVBlcmZvcm1FZGl0b3JBY3Rpb24iLCJwZXJmb3JtRWRpdG9yQWN0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FB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Q0MsTUFBUCxDQUFjakcsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGFuZHJvaWRIZWxwZXJzIGZyb20gJy4uL2FuZHJvaWQtaGVscGVycyc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgTkFUSVZFX1dJTiB9IGZyb20gJy4uL3dlYnZpZXctaGVscGVycyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24gKGtleXMpIHtcbiAgLy8gUHJvdG9jb2wgc2VuZHMgYW4gYXJyYXk7IHJldGhpbmsgYXBwcm9hY2hcbiAga2V5cyA9IF8uaXNBcnJheShrZXlzKSA/IGtleXMuam9pbignJykgOiBrZXlzO1xuICBsZXQgcGFyYW1zID0ge1xuICAgIHRleHQ6IGtleXMsXG4gICAgcmVwbGFjZTogZmFsc2VcbiAgfTtcbiAgaWYgKHRoaXMub3B0cy51bmljb2RlS2V5Ym9hcmQpIHtcbiAgICBwYXJhbXMudW5pY29kZUtleWJvYXJkID0gdHJ1ZTtcbiAgfVxuICBhd2FpdCB0aGlzLmRvU2VuZEtleXMocGFyYW1zKTtcbn07XG5cbmNvbW1hbmRzLmRvU2VuZEtleXMgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLmJvb3RzdHJhcC5zZW5kQWN0aW9uKCdzZXRUZXh0JywgcGFyYW1zKTtcbn07XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBjdXJyZW50IGRldmljZSdzIHRpbWVzdGFtcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIHNldCBvZiBmb3JtYXQgc3BlY2lmaWVycy4gUmVhZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIHRvIGdldCB0aGUgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lIGZvcm1hdCBzcGVjaWZpZXJzLiBUaGUgZGVmYXVsdCBmb3JtYXQgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBgWVlZWS1NTS1ERFRISDptbTpzc1pgLCB3aGljaCBjb21wbGllcyB0byBJU08tODYwMVxuICogQHJldHVybnMgRm9ybWF0dGVkIGRhdGV0aW1lIHN0cmluZyBvciB0aGUgcmF3IGNvbW1hbmQgb3V0cHV0IGlmIGZvcm1hdHRpbmcgZmFpbHNcbiAqL1xuY29uc3QgREVGQVVMVF9ERVZJQ0VfVElNRSA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG5jb21tYW5kcy5nZXREZXZpY2VUaW1lID0gYXN5bmMgZnVuY3Rpb24gKGZvcm1hdCA9IERFRkFVTFRfREVWSUNFX1RJTUUpIHtcbiAgbG9nLmluZm8oJ0F0dGVtcHRpbmcgdG8gY2FwdHVyZSBhbmRyb2lkIGRldmljZSBkYXRlIGFuZCB0aW1lJyk7XG5cbiAgaWYgKCFfLmlzU3RyaW5nKGZvcm1hdCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIGZvcm1hdCBzcGVjaWZpZXIgaXMgZXhwZWN0ZWQgdG8gYmUgYSB2YWxpZCBzdHJpbmcgc3BlY2lmaWVyIGxpa2UgJyR7REVGQVVMVF9ERVZJQ0VfVElNRX0nLiBgICtcbiAgICAgICAgYFRoZSBjdXJyZW50IHZhbHVlIGlzOiAke2Zvcm1hdH1gKTtcbiAgfVxuXG4gIGNvbnN0IGRldmljZVRpbWVzdGFtcCA9IChhd2FpdCB0aGlzLmFkYi5zaGVsbChbJ2RhdGUnLCAnKyVZLSVtLSVkVCVUJXonXSkpLnRyaW0oKTtcbiAgY29uc3QgcGFyc2VkVGltZXN0YW1wID0gbW9tZW50KGRldmljZVRpbWVzdGFtcCwgJ1lZWVktTU0tRERUSEg6bW06c3NaJyk7XG4gIGlmICghcGFyc2VkVGltZXN0YW1wLmlzVmFsaWQoKSkge1xuICAgIGxvZy53YXJuKGBDYW5ub3QgcGFyc2UgdGhlIHJldHVybmVkIHRpbWVzdGFtcCAnJHtkZXZpY2VUaW1lc3RhbXB9Jy4gUmV0dXJuaW5nIGFzIGlzYCk7XG4gICAgcmV0dXJuIGRldmljZVRpbWVzdGFtcDtcbiAgfVxuICByZXR1cm4gcGFyc2VkVGltZXN0YW1wLmZvcm1hdChmb3JtYXQpO1xufTtcblxuY29tbWFuZHMuZ2V0UGFnZVNvdXJjZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ3NvdXJjZScpO1xufTtcblxuY29tbWFuZHMuYmFjayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ3ByZXNzQmFjaycpO1xufTtcblxuY29tbWFuZHMuaXNLZXlib2FyZFNob3duID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQga2V5Ym9hcmRJbmZvID0gYXdhaXQgdGhpcy5hZGIuaXNTb2Z0S2V5Ym9hcmRQcmVzZW50KCk7XG4gIHJldHVybiBrZXlib2FyZEluZm8uaXNLZXlib2FyZFNob3duO1xufTtcblxuY29tbWFuZHMuaGlkZUtleWJvYXJkID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQge2lzS2V5Ym9hcmRTaG93biwgY2FuQ2xvc2VLZXlib2FyZH0gPSBhd2FpdCB0aGlzLmFkYi5pc1NvZnRLZXlib2FyZFByZXNlbnQoKTtcbiAgaWYgKCFpc0tleWJvYXJkU2hvd24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTb2Z0IGtleWJvYXJkIG5vdCBwcmVzZW50LCBjYW5ub3QgaGlkZSBrZXlib2FyZFwiKTtcbiAgfVxuXG4gIGlmIChjYW5DbG9zZUtleWJvYXJkKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuYmFjaygpO1xuICB9XG4gIGxvZy5pbmZvKFwiS2V5Ym9hcmQgaGFzIG5vIFVJOyBubyBjbG9zaW5nIG5lY2Vzc2FyeVwiKTtcbn07XG5cbmNvbW1hbmRzLm9wZW5TZXR0aW5nc0FjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKHNldHRpbmcpIHtcbiAgbGV0IHthcHBQYWNrYWdlLCBhcHBBY3Rpdml0eX0gPSBhd2FpdCB0aGlzLmFkYi5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gIGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsnYW0nLCAnc3RhcnQnLCAnLWEnLCBgYW5kcm9pZC5zZXR0aW5ncy4ke3NldHRpbmd9YF0pO1xuICBhd2FpdCB0aGlzLmFkYi53YWl0Rm9yTm90QWN0aXZpdHkoYXBwUGFja2FnZSwgYXBwQWN0aXZpdHksIDUwMDApO1xufTtcblxuY29tbWFuZHMuZ2V0V2luZG93U2l6ZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ2dldERldmljZVNpemUnKTtcbn07XG5cbi8vIEZvciBXM0NcbmNvbW1hbmRzLmdldFdpbmRvd1JlY3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYXdhaXQgdGhpcy5nZXRXaW5kb3dTaXplKCk7XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xufTtcblxuY29tbWFuZHMuZ2V0Q3VycmVudEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKGF3YWl0IHRoaXMuYWRiLmdldEZvY3VzZWRQYWNrYWdlQW5kQWN0aXZpdHkoKSkuYXBwQWN0aXZpdHk7XG59O1xuXG5jb21tYW5kcy5nZXRDdXJyZW50UGFja2FnZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIChhd2FpdCB0aGlzLmFkYi5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCkpLmFwcFBhY2thZ2U7XG59O1xuXG5jb21tYW5kcy5iYWNrZ3JvdW5kID0gYXN5bmMgZnVuY3Rpb24gKHNlY29uZHMpIHtcbiAgaWYgKHNlY29uZHMgPCAwKSB7XG4gICAgLy8gaWYgdXNlciBwYXNzZXMgaW4gYSBuZWdhdGl2ZSBzZWNvbmRzIHZhbHVlLCBpbnRlcnByZXQgdGhhdCBhcyB0aGUgaW5zdHJ1Y3Rpb25cbiAgICAvLyB0byBub3QgYnJpbmcgdGhlIGFwcCBiYWNrIGF0IGFsbFxuICAgIGF3YWl0IHRoaXMuYWRiLmdvVG9Ib21lKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgbGV0IHthcHBQYWNrYWdlLCBhcHBBY3Rpdml0eX0gPSBhd2FpdCB0aGlzLmFkYi5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gIGF3YWl0IHRoaXMuYWRiLmdvVG9Ib21lKCk7XG4gIGF3YWl0IEIuZGVsYXkoc2Vjb25kcyAqIDEwMDApO1xuXG4gIGxldCBhcmdzO1xuICBpZiAodGhpcy5fY2FjaGVkQWN0aXZpdHlBcmdzICYmIHRoaXMuX2NhY2hlZEFjdGl2aXR5QXJnc1tgJHthcHBQYWNrYWdlfS8ke2FwcEFjdGl2aXR5fWBdKSB7XG4gICAgLy8gdGhlIGFjdGl2aXR5IHdhcyBzdGFydGVkIHdpdGggYHN0YXJ0QWN0aXZpdHlgLCBzbyB1c2UgdGhvc2UgYXJncyB0byByZXN0YXJ0XG4gICAgYXJncyA9IHRoaXMuX2NhY2hlZEFjdGl2aXR5QXJnc1tgJHthcHBQYWNrYWdlfS8ke2FwcEFjdGl2aXR5fWBdO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBsb2cuZGVidWcoYEFjdGl2YXRpbmcgYXBwICcke2FwcFBhY2thZ2V9JyBpbiBvcmRlciB0byByZXN0b3JlIGl0YCk7XG4gICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlQXBwKGFwcFBhY2thZ2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIGFyZ3MgPSAoKGFwcFBhY2thZ2UgPT09IHRoaXMub3B0cy5hcHBQYWNrYWdlICYmIGFwcEFjdGl2aXR5ID09PSB0aGlzLm9wdHMuYXBwQWN0aXZpdHkpIHx8XG4gICAgICAgICAgICAoYXBwUGFja2FnZSA9PT0gdGhpcy5vcHRzLmFwcFdhaXRQYWNrYWdlICYmICh0aGlzLm9wdHMuYXBwV2FpdEFjdGl2aXR5IHx8ICcnKS5zcGxpdCgnLCcpLmluY2x1ZGVzKGFwcEFjdGl2aXR5KSkpXG4gICAgICA/IHsvLyB0aGUgYWN0aXZpdHkgaXMgdGhlIG9yaWdpbmFsIHNlc3Npb24gYWN0aXZpdHksIHNvIHVzZSB0aGUgb3JpZ2luYWwgYXJnc1xuICAgICAgICBwa2c6IHRoaXMub3B0cy5hcHBQYWNrYWdlLFxuICAgICAgICBhY3Rpdml0eTogdGhpcy5vcHRzLmFwcEFjdGl2aXR5LFxuICAgICAgICBhY3Rpb246IHRoaXMub3B0cy5pbnRlbnRBY3Rpb24sXG4gICAgICAgIGNhdGVnb3J5OiB0aGlzLm9wdHMuaW50ZW50Q2F0ZWdvcnksXG4gICAgICAgIGZsYWdzOiB0aGlzLm9wdHMuaW50ZW50RmxhZ3MsXG4gICAgICAgIHdhaXRQa2c6IHRoaXMub3B0cy5hcHBXYWl0UGFja2FnZSxcbiAgICAgICAgd2FpdEFjdGl2aXR5OiB0aGlzLm9wdHMuYXBwV2FpdEFjdGl2aXR5LFxuICAgICAgICBvcHRpb25hbEludGVudEFyZ3VtZW50czogdGhpcy5vcHRzLm9wdGlvbmFsSW50ZW50QXJndW1lbnRzLFxuICAgICAgICBzdG9wQXBwOiBmYWxzZSxcbiAgICAgICAgdXNlcjogdGhpcy5vcHRzLnVzZXJQcm9maWxlfVxuICAgICAgOiB7Ly8gdGhlIGFjdGl2aXR5IHdhcyBzdGFydGVkIHNvbWUgb3RoZXIgd2F5LCBzbyB1c2UgZGVmYXVsdHNcbiAgICAgICAgcGtnOiBhcHBQYWNrYWdlLFxuICAgICAgICBhY3Rpdml0eTogYXBwQWN0aXZpdHksXG4gICAgICAgIHdhaXRQa2c6IGFwcFBhY2thZ2UsXG4gICAgICAgIHdhaXRBY3Rpdml0eTogYXBwQWN0aXZpdHksXG4gICAgICAgIHN0b3BBcHA6IGZhbHNlfTtcbiAgfVxuICBhcmdzID0gYXdhaXQgdXRpbC5maWx0ZXJPYmplY3QoYXJncyk7XG4gIGxvZy5kZWJ1ZyhgQnJpbmdpbmcgYXBwbGljYXRpb24gYmFjayB0byBmb3JlZ3JvdW5kIHdpdGggYXJndW1lbnRzOiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuc3RhcnRBcHAoYXJncyk7XG59O1xuXG5jb21tYW5kcy5nZXRTdHJpbmdzID0gYXN5bmMgZnVuY3Rpb24gKGxhbmd1YWdlKSB7XG4gIGlmICghbGFuZ3VhZ2UpIHtcbiAgICBsYW5ndWFnZSA9IGF3YWl0IHRoaXMuYWRiLmdldERldmljZUxhbmd1YWdlKCk7XG4gICAgbG9nLmluZm8oYE5vIGxhbmd1YWdlIHNwZWNpZmllZCwgcmV0dXJuaW5nIHN0cmluZ3MgZm9yOiAke2xhbmd1YWdlfWApO1xuICB9XG5cbiAgaWYgKHRoaXMuYXBrU3RyaW5nc1tsYW5ndWFnZV0pIHtcbiAgICAvLyBSZXR1cm4gY2FjaGVkIHN0cmluZ3NcbiAgICByZXR1cm4gdGhpcy5hcGtTdHJpbmdzW2xhbmd1YWdlXTtcbiAgfVxuXG4gIC8vIFRPRE86IFRoaXMgaXMgbXV0YXRpbmcgdGhlIGN1cnJlbnQgbGFuZ3VhZ2UsIGJ1dCBpdCdzIGhvdyBhcHBpdW0gY3VycmVudGx5IHdvcmtzXG4gIHRoaXMuYXBrU3RyaW5nc1tsYW5ndWFnZV0gPSBhd2FpdCBhbmRyb2lkSGVscGVycy5wdXNoU3RyaW5ncyhsYW5ndWFnZSwgdGhpcy5hZGIsIHRoaXMub3B0cyk7XG4gIGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ3VwZGF0ZVN0cmluZ3MnKTtcblxuICByZXR1cm4gdGhpcy5hcGtTdHJpbmdzW2xhbmd1YWdlXTtcbn07XG5cbmNvbW1hbmRzLmxhdW5jaEFwcCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgYXdhaXQgdGhpcy5pbml0QVVUKCk7XG4gIGF3YWl0IHRoaXMuc3RhcnRBVVQoKTtcbn07XG5cbmNvbW1hbmRzLnN0YXJ0QWN0aXZpdHkgPSBhc3luYyBmdW5jdGlvbiAoYXBwUGFja2FnZSwgYXBwQWN0aXZpdHksXG4gIGFwcFdhaXRQYWNrYWdlLCBhcHBXYWl0QWN0aXZpdHksIGludGVudEFjdGlvbiwgaW50ZW50Q2F0ZWdvcnksIGludGVudEZsYWdzLFxuICBvcHRpb25hbEludGVudEFyZ3VtZW50cywgZG9udFN0b3BBcHBPblJlc2V0KSB7XG4gIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgcGFja2FnZSAnJHthcHBQYWNrYWdlfScgYW5kIGFjdGl2aXR5ICcke2FwcEFjdGl2aXR5fSdgKTtcblxuICAvLyBkb250U3RvcEFwcE9uUmVzZXQgaXMgYm90aCBhbiBhcmd1bWVudCBoZXJlLCBhbmQgYSBkZXNpcmVkIGNhcGFiaWxpdHlcbiAgLy8gaWYgdGhlIGFyZ3VtZW50IGlzIHNldCwgdXNlIGl0LCBvdGhlcndpc2UgdXNlIHRoZSBjYXBcbiAgaWYgKCF1dGlsLmhhc1ZhbHVlKGRvbnRTdG9wQXBwT25SZXNldCkpIHtcbiAgICBkb250U3RvcEFwcE9uUmVzZXQgPSAhIXRoaXMub3B0cy5kb250U3RvcEFwcE9uUmVzZXQ7XG4gIH1cblxuICBsZXQgYXJncyA9IHtcbiAgICBwa2c6IGFwcFBhY2thZ2UsXG4gICAgYWN0aXZpdHk6IGFwcEFjdGl2aXR5LFxuICAgIHdhaXRQa2c6IGFwcFdhaXRQYWNrYWdlIHx8IGFwcFBhY2thZ2UsXG4gICAgd2FpdEFjdGl2aXR5OiBhcHBXYWl0QWN0aXZpdHkgfHwgYXBwQWN0aXZpdHksXG4gICAgYWN0aW9uOiBpbnRlbnRBY3Rpb24sXG4gICAgY2F0ZWdvcnk6IGludGVudENhdGVnb3J5LFxuICAgIGZsYWdzOiBpbnRlbnRGbGFncyxcbiAgICBvcHRpb25hbEludGVudEFyZ3VtZW50cyxcbiAgICBzdG9wQXBwOiAhZG9udFN0b3BBcHBPblJlc2V0XG4gIH07XG4gIHRoaXMuX2NhY2hlZEFjdGl2aXR5QXJncyA9IHRoaXMuX2NhY2hlZEFjdGl2aXR5QXJncyB8fCB7fTtcbiAgdGhpcy5fY2FjaGVkQWN0aXZpdHlBcmdzW2Ake2FyZ3Mud2FpdFBrZ30vJHthcmdzLndhaXRBY3Rpdml0eX1gXSA9IGFyZ3M7XG4gIGF3YWl0IHRoaXMuYWRiLnN0YXJ0QXBwKGFyZ3MpO1xufTtcblxuY29tbWFuZHMucmVzZXQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGF3YWl0IGFuZHJvaWRIZWxwZXJzLnJlc2V0QXBwKHRoaXMuYWRiLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtmYXN0UmVzZXQ6IHRydWV9KSk7XG4gIC8vIHJlc2V0IGNvbnRleHQgc2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IGtpbmQgb24gY29udGV4dCB3ZSB3aWxsIGVuZCB1cCBhZnRlciBhcHAgbGF1bmNoLlxuICB0aGlzLmN1ckNvbnRleHQgPSBOQVRJVkVfV0lOO1xuXG4gIHJldHVybiBhd2FpdCB0aGlzLmlzQ2hyb21lU2Vzc2lvbiA/IHRoaXMuc3RhcnRDaHJvbWVTZXNzaW9uKCkgOiB0aGlzLnN0YXJ0QVVUKCk7XG59O1xuXG5jb21tYW5kcy5zdGFydEFVVCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgYXdhaXQgdGhpcy5hZGIuc3RhcnRBcHAoe1xuICAgIHBrZzogdGhpcy5vcHRzLmFwcFBhY2thZ2UsXG4gICAgYWN0aXZpdHk6IHRoaXMub3B0cy5hcHBBY3Rpdml0eSxcbiAgICBhY3Rpb246IHRoaXMub3B0cy5pbnRlbnRBY3Rpb24sXG4gICAgY2F0ZWdvcnk6IHRoaXMub3B0cy5pbnRlbnRDYXRlZ29yeSxcbiAgICBmbGFnczogdGhpcy5vcHRzLmludGVudEZsYWdzLFxuICAgIHdhaXRQa2c6IHRoaXMub3B0cy5hcHBXYWl0UGFja2FnZSxcbiAgICB3YWl0QWN0aXZpdHk6IHRoaXMub3B0cy5hcHBXYWl0QWN0aXZpdHksXG4gICAgd2FpdER1cmF0aW9uOiB0aGlzLm9wdHMuYXBwV2FpdER1cmF0aW9uLFxuICAgIG9wdGlvbmFsSW50ZW50QXJndW1lbnRzOiB0aGlzLm9wdHMub3B0aW9uYWxJbnRlbnRBcmd1bWVudHMsXG4gICAgc3RvcEFwcDogIXRoaXMub3B0cy5kb250U3RvcEFwcE9uUmVzZXQsXG4gICAgdXNlcjogdGhpcy5vcHRzLnVzZXJQcm9maWxlLFxuICB9KTtcbn07XG5cbi8vIHdlIG92ZXJyaWRlIHNldFVybCB0byB0YWtlIGFuIGFuZHJvaWQgVVJJIHdoaWNoIGNhbiBiZSB1c2VkIGZvciBkZWVwLWxpbmtpbmdcbi8vIGluc2lkZSBhbiBhcHAsIHNpbWlsYXIgdG8gc3RhcnRpbmcgYW4gaW50ZW50XG5jb21tYW5kcy5zZXRVcmwgPSBhc3luYyBmdW5jdGlvbiAodXJpKSB7XG4gIGF3YWl0IHRoaXMuYWRiLnN0YXJ0VXJpKHVyaSwgdGhpcy5vcHRzLmFwcFBhY2thZ2UpO1xufTtcblxuLy8gY2xvc2luZyBhcHAgdXNpbmcgZm9yY2Ugc3RvcFxuY29tbWFuZHMuY2xvc2VBcHAgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGF3YWl0IHRoaXMuYWRiLmZvcmNlU3RvcCh0aGlzLm9wdHMuYXBwUGFja2FnZSk7XG4gIC8vIHJlc2V0IGNvbnRleHQgc2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IGtpbmQgb24gY29udGV4dCB3ZSB3aWxsIGVuZCB1cCBhZnRlciBhcHAgbGF1bmNoLlxuICB0aGlzLmN1ckNvbnRleHQgPSBOQVRJVkVfV0lOO1xuICBhd2FpdCB0aGlzLnN0b3BDaHJvbWVkcml2ZXJQcm94aWVzKCk7XG59O1xuXG5jb21tYW5kcy5nZXREaXNwbGF5RGVuc2l0eSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gZmlyc3QgdHJ5IHRoZSBwcm9wZXJ0eSBmb3IgZGV2aWNlc1xuICBsZXQgb3V0ID0gYXdhaXQgdGhpcy5hZGIuc2hlbGwoWydnZXRwcm9wJywgJ3JvLnNmLmxjZF9kZW5zaXR5J10pO1xuICBpZiAob3V0KSB7XG4gICAgbGV0IHZhbCA9IHBhcnNlSW50KG91dCwgMTApO1xuICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBOYU4sIHRyeSBnZXR0aW5nIHRoZSBlbXVsYXRvciBwcm9wZXJ0eVxuICAgIGlmICghaXNOYU4odmFsKSkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBQYXJzZWQgZGVuc2l0eSB2YWx1ZSB3YXMgTmFOOiBcIiR7b3V0fVwiYCk7XG4gIH1cbiAgLy8gZmFsbGJhY2sgdG8gdHJ5aW5nIHByb3BlcnR5IGZvciBlbXVsYXRvcnNcbiAgb3V0ID0gYXdhaXQgdGhpcy5hZGIuc2hlbGwoWydnZXRwcm9wJywgJ3FlbXUuc2YubGNkX2RlbnNpdHknXSk7XG4gIGlmIChvdXQpIHtcbiAgICBsZXQgdmFsID0gcGFyc2VJbnQob3V0LCAxMCk7XG4gICAgaWYgKCFpc05hTih2YWwpKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFBhcnNlZCBkZW5zaXR5IHZhbHVlIHdhcyBOYU46IFwiJHtvdXR9XCJgKTtcbiAgfVxuICAvLyBjb3VsZG4ndCBnZXQgYW55dGhpbmcsIHNvIGVycm9yIG91dFxuICBsb2cuZXJyb3JBbmRUaHJvdygnRmFpbGVkIHRvIGdldCBkaXNwbGF5IGRlbnNpdHkgcHJvcGVydHkuJyk7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gd2luZG93IG1hbmFnZXIgU3VyZmFjZSBzdHJpbmcgdG8gZ2V0IGluZm8uXG4gKiBAcGFyYW0gbGluZTogVG8gcGFyc2UuIFRoaXMgaXMgYXNzdW1lZCB0byBiZSB2YWxpZC5cbiAqIEByZXR1cm46IFZpc2liaWxpdHkgYW5kIGJvdW5kcyBvZiB0aGUgU3VyZmFjZS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTdXJmYWNlTGluZSAobGluZSkge1xuICAvLyB0aGUgc3VyZmFjZSBib3VuZHMgYXJlIGluIHRoZSBmb3JtYXQ6XG4gIC8vIFwicmVjdD0oMC4wLDExODQuMCkgNzY4LjAgeCA5Ni4wXCJcbiAgLy8gICAgICAgXiBsb2NhdGlvbiAgIF4gc2l6ZVxuICAvLyBjdXQgb3V0IHRoZSBzdHVmZiBiZWZvcmUgdGhlICdyZWN0JyBhbmQgdGhlbiBzcGxpdCB0aGUgbnVtYmVycyBhcGFydFxuICBsZXQgYm91bmRzID0gbGluZS5zcGxpdCgncmVjdD0nKVsxXVxuICAucmVwbGFjZSgvWygpLCB4XSsvZywgJyAnKVxuICAudHJpbSgpXG4gIC5zcGxpdCgnICcpO1xuXG4gIHJldHVybiB7XG4gICAgdmlzaWJsZTogKGxpbmUuaW5kZXhPZignc2hvd249dHJ1ZScpICE9PSAtMSksXG4gICAgeDogcGFyc2VGbG9hdChib3VuZHNbMF0pLFxuICAgIHk6IHBhcnNlRmxvYXQoYm91bmRzWzFdKSxcbiAgICB3aWR0aDogcGFyc2VGbG9hdChib3VuZHNbMl0pLFxuICAgIGhlaWdodDogcGFyc2VGbG9hdChib3VuZHNbM10pXG4gIH07XG59XG5cbi8qKlxuICogRXh0cmFjdHMgc3RhdHVzIGFuZCBuYXZpZ2F0aW9uIGJhciBpbmZvcm1hdGlvbiBmcm9tIHRoZSB3aW5kb3cgbWFuYWdlciBvdXRwdXQuXG4gKiBAcGFyYW0gbGluZXM6IE91dHB1dCBmcm9tIGR1bXBzeXMgY29tbWFuZFxuICogQHJldHVybjogVmlzaWJpbGl0eSBhbmQgYm91bmRzIGluZm8gb2Ygc3RhdHVzIGFuZCBuYXZpZ2F0aW9uIGJhclxuICovXG5mdW5jdGlvbiBwYXJzZVdpbmRvd3MgKGxpbmVzKSB7XG4gIGxldCBhdFN0YXR1c0JhciA9IGZhbHNlO1xuICBsZXQgYXROYXZCYXIgPSBmYWxzZTtcbiAgbGV0IHN0YXR1c0JhcjtcbiAgbGV0IG5hdmlnYXRpb25CYXI7XG4gIC8vIHRoZSB3aW5kb3cgbWFuYWdlciBvdXRwdXQgbG9va3MgbGlrZTpcbiAgLy8gV2luZG93ICMxIC4uLiBXaW5kb3dJRFxuICAvLyAgIEEgYnVuY2ggb2YgcHJvcGVydGllc1xuICAvLyBXaW5kb3cgIzIgLi4uIFdpbmRvd0lEXG4gIC8vICAgQSBidW5jaCBvZiBwcm9wZXJ0aWVzXG4gIGxpbmVzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgLy8gdGhlIHN0YXJ0IG9mIGEgbmV3IHdpbmRvdyBzZWN0aW9uXG4gICAgaWYgKGxpbmUuaW5kZXhPZignICBXaW5kb3cgIycpICE9PSAtMSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHNlY3Rpb24gd2UncmUgaW5cbiAgICAgIC8vIG9ubHkgb25lIHdpbGwgYmUgdHJ1ZVxuICAgICAgYXRTdGF0dXNCYXIgPSAobGluZS5pbmRleE9mKCdTdGF0dXNCYXInKSAhPT0gLTEpO1xuICAgICAgYXROYXZCYXIgPSAobGluZS5pbmRleE9mKCdOYXZpZ2F0aW9uQmFyJykgIT09IC0xKTtcbiAgICAgIC8vIGRvbid0IG5lZWQgYW55dGhpbmcgZWxzZS4gbW92ZSB0byBuZXh0IGxpbmVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gb25jZSB3ZSdyZSBpbiBhIHdpbmRvdyBzZWN0aW9uLCBsb29rIGZvciB0aGUgc3VyZmFjZSBkYXRhIGxpbmVcbiAgICBpZiAobGluZS5pbmRleE9mKCcgICAgICBTdXJmYWNlOicpID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYXRTdGF0dXNCYXIpIHtcbiAgICAgIHN0YXR1c0JhciA9IHBhcnNlU3VyZmFjZUxpbmUobGluZSk7XG4gICAgICBhdFN0YXR1c0JhciA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoYXROYXZCYXIpIHtcbiAgICAgIG5hdmlnYXRpb25CYXIgPSBwYXJzZVN1cmZhY2VMaW5lKGxpbmUpO1xuICAgICAgYXROYXZCYXIgPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmICghc3RhdHVzQmFyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0ZhaWxlZCB0byBwYXJzZSBzdGF0dXMgYmFyIGluZm9ybWF0aW9uLicpO1xuICB9XG4gIGlmICghbmF2aWdhdGlvbkJhcikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdGYWlsZWQgdG8gcGFyc2UgbmF2aWdhdGlvbiBiYXIgaW5mb3JtYXRpb24uJyk7XG4gIH1cblxuICByZXR1cm4ge3N0YXR1c0JhciwgbmF2aWdhdGlvbkJhcn07XG59XG5cbmNvbW1hbmRzLmdldFN5c3RlbUJhcnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBvdXQgPSBhd2FpdCB0aGlzLmFkYi5zaGVsbChbJ2R1bXBzeXMnLCAnd2luZG93JywgJ3dpbmRvd3MnXSk7XG4gIGlmICghb3V0KSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0RpZCBub3QgZ2V0IHdpbmRvdyBtYW5hZ2VyIG91dHB1dC4nKTtcbiAgfVxuICByZXR1cm4gcGFyc2VXaW5kb3dzKG91dCk7XG59O1xuXG5jb21tYW5kcy5tb2JpbGVQZXJmb3JtRWRpdG9yQWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7YWN0aW9ufSA9IG9wdHM7XG4gIGlmICghdXRpbC5oYXNWYWx1ZShhY3Rpb24pKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYCdhY3Rpb24nIGFyZ3VtZW50IGlzIHJlcXVpcmVkYCk7XG4gIH1cblxuICBhd2FpdCB0aGlzLmFkYi5wZXJmb3JtRWRpdG9yQWN0aW9uKGFjdGlvbik7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuLy8gZm9yIHVuaXQgdGVzdHNcbmV4cG9ydCB7IHBhcnNlV2luZG93cywgcGFyc2VTdXJmYWNlTGluZSB9O1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
