"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.FINGERPRINT_UNLOCK = exports.PATTERN_UNLOCK = exports.PASSWORD_UNLOCK = exports.PIN_UNLOCK = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const PIN_UNLOCK = "pin";
exports.PIN_UNLOCK = PIN_UNLOCK;
const PASSWORD_UNLOCK = "password";
exports.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
const PATTERN_UNLOCK = "pattern";
exports.PATTERN_UNLOCK = PATTERN_UNLOCK;
const FINGERPRINT_UNLOCK = "fingerprint";
exports.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
const UNLOCK_TYPES = [PIN_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
const KEYCODE_NUMPAD_ENTER = "66";
const UNLOCK_WAIT_TIME = 100;
const HIDE_KEYBOARD_WAIT_TIME = 100;
const INPUT_KEYS_WAIT_TIME = 100;
let helpers = {};
exports.helpers = helpers;

helpers.isValidUnlockType = function (type) {
  return UNLOCK_TYPES.indexOf(type) !== -1;
};

helpers.isValidKey = function (type, key) {
  if (_lodash.default.isUndefined(key)) {
    return false;
  }

  if (type === PIN_UNLOCK || type === FINGERPRINT_UNLOCK) {
    return /^[0-9]+$/.test(key.trim());
  }

  if (type === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(key.trim())) {
      return false;
    }

    return !/([1-9]).*?\1/.test(key.trim());
  }

  if (type === PASSWORD_UNLOCK) {
    return /.{4,}/g.test(key);
  }

  throw new Error(`Invalid unlock type ${type}`);
};

helpers.dismissKeyguard = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (driver, adb) {
    let isKeyboardShown = yield driver.isKeyboardShown();

    if (isKeyboardShown) {
      yield driver.hideKeyboard();
      yield (0, _asyncbox.sleep)(HIDE_KEYBOARD_WAIT_TIME);
    }

    _logger.default.info("Dismiss notifications from unlock view");

    yield adb.shell(["service", "call", "notification", "1"]);
    yield adb.back();

    if ((yield adb.getApiLevel()) > 21) {
      _logger.default.info("Trying to dismiss keyguard");

      yield adb.shell(["wm", "dismiss-keyguard"]);
      return;
    }

    _logger.default.info("Swiping up to dismiss keyguard");

    yield helpers.swipeUp(driver);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

helpers.swipeUp = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (driver) {
    let windowSize = yield driver.getWindowSize();
    let x0 = parseInt(windowSize.x / 2, 10);
    let y0 = windowSize.y - 10;
    let yP = 100;
    let actions = [{
      action: 'press',
      options: {
        element: null,
        x: x0,
        y: y0
      }
    }, {
      action: 'moveTo',
      options: {
        element: null,
        x: x0,
        y: yP
      }
    }, {
      action: 'release'
    }];
    yield driver.performTouch(actions);
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

helpers.encodePassword = function (key) {
  return key.replace(/\s/ig, "%s");
};

helpers.stringKeyToArr = function (key) {
  return key.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    if ((yield adb.getApiLevel()) < 23) {
      throw new Error("Fingerprint unlock only works for Android 6+ emulators");
    }

    yield adb.fingerprint(capabilities.unlockKey);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x4, _x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

helpers.pinUnlock = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using pin ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let keys = helpers.stringKeyToArr(capabilities.unlockKey);

    if ((yield adb.getApiLevel()) >= 21) {
      let els = yield driver.findElOrEls("id", "com.android.systemui:id/digit_text", true);

      if (_lodash.default.isEmpty(els)) {
        throw new Error("Error finding unlock pin buttons!");
      }

      let pins = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = els[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let e = _step.value;
          let text = yield driver.getAttribute("text", e.ELEMENT);
          pins[text] = e;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let pin = _step2.value;
          let el = pins[pin];
          yield driver.click(el.ELEMENT);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      let el = yield driver.findElOrEls("id", "com.android.systemui:id/key_enter", false);
      yield driver.click(el.ELEMENT);
    } else {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let pin = _step3.value;
          let el = yield driver.findElOrEls("id", `com.android.keyguard:id/key${pin}`, false);

          if (el === null) {
            throw new Error(`Error finding unlock pin '${pin}' button!`);
          }

          yield driver.click(el.ELEMENT);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      let el = yield driver.findElOrEls("id", "com.android.keyguard:id/key_enter", false);
      yield driver.click(el.ELEMENT);
    }

    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();

helpers.passwordUnlock = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using password ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let key = capabilities.unlockKey;
    key = helpers.encodePassword(key);
    yield adb.shell(["input", "text", key]);
    yield (0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME);
    yield adb.shell(["input", "keyevent", KEYCODE_NUMPAD_ENTER]);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x10, _x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();

helpers.getPatternKeyPosition = function (key, initPos, piece) {
  const cols = 3;
  const pins = 9;

  let xPos = (key, x, piece) => {
    return Math.round(x + (key % cols || cols) * piece - piece / 2);
  };

  let yPos = (key, y, piece) => {
    return Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));
  };

  return {
    x: xPos(key, initPos.x, piece),
    y: yPos(key, initPos.y, piece)
  };
};

helpers.getPatternActions = function (keys, initPos, piece) {
  let actions = [];
  let lastPos;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = keys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      let key = _step4.value;
      let keyPos = helpers.getPatternKeyPosition(key, initPos, piece);

      if (key === keys[0]) {
        actions.push({
          action: 'press',
          options: {
            element: null,
            x: keyPos.x,
            y: keyPos.y
          }
        });
        lastPos = keyPos;
        continue;
      }

      let moveTo = {
        x: 0,
        y: 0
      };
      let diffX = keyPos.x - lastPos.x;

      if (diffX > 0) {
        moveTo.x = piece;

        if (Math.abs(diffX) > piece) {
          moveTo.x += piece;
        }
      } else if (diffX < 0) {
        moveTo.x = -1 * piece;

        if (Math.abs(diffX) > piece) {
          moveTo.x -= piece;
        }
      }

      let diffY = keyPos.y - lastPos.y;

      if (diffY > 0) {
        moveTo.y = piece;

        if (Math.abs(diffY) > piece) {
          moveTo.y += piece;
        }
      } else if (diffY < 0) {
        moveTo.y = -1 * piece;

        if (Math.abs(diffY) > piece) {
          moveTo.y -= piece;
        }
      }

      actions.push({
        action: 'moveTo',
        options: {
          element: null,
          x: moveTo.x,
          y: moveTo.y
        }
      });
      lastPos = keyPos;
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  actions.push({
    action: 'release'
  });
  return actions;
};

helpers.patternUnlock = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (adb, driver, capabilities) {
    _logger.default.info(`Trying to unlock device using pattern ${capabilities.unlockKey}`);

    yield helpers.dismissKeyguard(driver, adb);
    let keys = helpers.stringKeyToArr(capabilities.unlockKey);
    let apiLevel = yield adb.getApiLevel();
    let el = yield driver.findElOrEls("id", `com.android.${apiLevel >= 21 ? 'systemui' : 'keyguard'}:id/lockPatternView`, false);
    let initPos = yield driver.getLocation(el.ELEMENT);
    let size = yield driver.getSize(el.ELEMENT);
    let actions = helpers.getPatternActions(keys, initPos, size.width / 3);
    yield driver.performTouch(actions);
    yield (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  });

  return function (_x13, _x14, _x15) {
    return _ref6.apply(this, arguments);
  };
}();

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91bmxvY2staGVscGVycy5qcyJdLCJuYW1lcyI6WyJQSU5fVU5MT0NLIiwiUEFTU1dPUkRfVU5MT0NLIiwiUEFUVEVSTl9VTkxPQ0siLCJGSU5HRVJQUklOVF9VTkxPQ0siLCJVTkxPQ0tfVFlQRVMiLCJLRVlDT0RFX05VTVBBRF9FTlRFUiIsIlVOTE9DS19XQUlUX1RJTUUiLCJISURFX0tFWUJPQVJEX1dBSVRfVElNRSIsIklOUFVUX0tFWVNfV0FJVF9USU1FIiwiaGVscGVycyIsImlzVmFsaWRVbmxvY2tUeXBlIiwidHlwZSIsImluZGV4T2YiLCJpc1ZhbGlkS2V5Iiwia2V5IiwiXyIsImlzVW5kZWZpbmVkIiwidGVzdCIsInRyaW0iLCJFcnJvciIsImRpc21pc3NLZXlndWFyZCIsImRyaXZlciIsImFkYiIsImlzS2V5Ym9hcmRTaG93biIsImhpZGVLZXlib2FyZCIsImxvZ2dlciIsImluZm8iLCJzaGVsbCIsImJhY2siLCJnZXRBcGlMZXZlbCIsInN3aXBlVXAiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsIngwIiwicGFyc2VJbnQiLCJ4IiwieTAiLCJ5IiwieVAiLCJhY3Rpb25zIiwiYWN0aW9uIiwib3B0aW9ucyIsImVsZW1lbnQiLCJwZXJmb3JtVG91Y2giLCJlbmNvZGVQYXNzd29yZCIsInJlcGxhY2UiLCJzdHJpbmdLZXlUb0FyciIsInNwbGl0IiwiZmluZ2VycHJpbnRVbmxvY2siLCJjYXBhYmlsaXRpZXMiLCJmaW5nZXJwcmludCIsInVubG9ja0tleSIsInBpblVubG9jayIsImtleXMiLCJlbHMiLCJmaW5kRWxPckVscyIsImlzRW1wdHkiLCJwaW5zIiwiZSIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJFTEVNRU5UIiwicGluIiwiZWwiLCJjbGljayIsInBhc3N3b3JkVW5sb2NrIiwiZ2V0UGF0dGVybktleVBvc2l0aW9uIiwiaW5pdFBvcyIsInBpZWNlIiwiY29scyIsInhQb3MiLCJNYXRoIiwicm91bmQiLCJ5UG9zIiwiY2VpbCIsImdldFBhdHRlcm5BY3Rpb25zIiwibGFzdFBvcyIsImtleVBvcyIsInB1c2giLCJtb3ZlVG8iLCJkaWZmWCIsImFicyIsImRpZmZZIiwicGF0dGVyblVubG9jayIsImFwaUxldmVsIiwiZ2V0TG9jYXRpb24iLCJzaXplIiwiZ2V0U2l6ZSIsIndpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBRyxLQUFuQjs7QUFDQSxNQUFNQyxlQUFlLEdBQUcsVUFBeEI7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLFNBQXZCOztBQUNBLE1BQU1DLGtCQUFrQixHQUFHLGFBQTNCOztBQUNBLE1BQU1DLFlBQVksR0FBRyxDQUFDSixVQUFELEVBQWFDLGVBQWIsRUFBOEJDLGNBQTlCLEVBQThDQyxrQkFBOUMsQ0FBckI7QUFDQSxNQUFNRSxvQkFBb0IsR0FBRyxJQUE3QjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLEdBQXpCO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsR0FBaEM7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxHQUE3QjtBQUVBLElBQUlDLE9BQU8sR0FBRyxFQUFkOzs7QUFDQUEsT0FBTyxDQUFDQyxpQkFBUixHQUE0QixVQUFVQyxJQUFWLEVBQWdCO0FBQzFDLFNBQU9QLFlBQVksQ0FBQ1EsT0FBYixDQUFxQkQsSUFBckIsTUFBK0IsQ0FBQyxDQUF2QztBQUNELENBRkQ7O0FBSUFGLE9BQU8sQ0FBQ0ksVUFBUixHQUFxQixVQUFVRixJQUFWLEVBQWdCRyxHQUFoQixFQUFxQjtBQUN4QyxNQUFJQyxnQkFBRUMsV0FBRixDQUFjRixHQUFkLENBQUosRUFBd0I7QUFDdEIsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsTUFBSUgsSUFBSSxLQUFLWCxVQUFULElBQXVCVyxJQUFJLEtBQUtSLGtCQUFwQyxFQUF3RDtBQUN0RCxXQUFPLFdBQVdjLElBQVgsQ0FBZ0JILEdBQUcsQ0FBQ0ksSUFBSixFQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsTUFBSVAsSUFBSSxL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QUFxQkEsVUFBckI7QUFDQVMsT0FBTyxDQUFDUixlQUFSLEdBQTBCQSxlQUExQjtBQUNBUSxPQUFPLENBQUNQLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FPLE9BQU8sQ0FBQ04sa0JBQVIsR0FBNkJBLGtCQUE3QjtlQUdlTSxPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IFBJTl9VTkxPQ0sgPSBcInBpblwiO1xuY29uc3QgUEFTU1dPUkRfVU5MT0NLID0gXCJwYXNzd29yZFwiO1xuY29uc3QgUEFUVEVSTl9VTkxPQ0sgPSBcInBhdHRlcm5cIjtcbmNvbnN0IEZJTkdFUlBSSU5UX1VOTE9DSyA9IFwiZmluZ2VycHJpbnRcIjtcbmNvbnN0IFVOTE9DS19UWVBFUyA9IFtQSU5fVU5MT0NLLCBQQVNTV09SRF9VTkxPQ0ssIFBBVFRFUk5fVU5MT0NLLCBGSU5HRVJQUklOVF9VTkxPQ0tdO1xuY29uc3QgS0VZQ09ERV9OVU1QQURfRU5URVIgPSBcIjY2XCI7XG5jb25zdCBVTkxPQ0tfV0FJVF9USU1FID0gMTAwO1xuY29uc3QgSElERV9LRVlCT0FSRF9XQUlUX1RJTUUgPSAxMDA7XG5jb25zdCBJTlBVVF9LRVlTX1dBSVRfVElNRSA9IDEwMDtcblxubGV0IGhlbHBlcnMgPSB7fTtcbmhlbHBlcnMuaXNWYWxpZFVubG9ja1R5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gVU5MT0NLX1RZUEVTLmluZGV4T2YodHlwZSkgIT09IC0xO1xufTtcblxuaGVscGVycy5pc1ZhbGlkS2V5ID0gZnVuY3Rpb24gKHR5cGUsIGtleSkge1xuICBpZiAoXy5pc1VuZGVmaW5lZChrZXkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlID09PSBQSU5fVU5MT0NLIHx8IHR5cGUgPT09IEZJTkdFUlBSSU5UX1VOTE9DSykge1xuICAgIHJldHVybiAvXlswLTldKyQvLnRlc3Qoa2V5LnRyaW0oKSk7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFBBVFRFUk5fVU5MT0NLKSB7XG4gICAgaWYgKCEvXlsxLTldezIsOX0kLy50ZXN0KGtleS50cmltKCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhKC8oWzEtOV0pLio/XFwxLy50ZXN0KGtleS50cmltKCkpKTtcbiAgfVxuICAvLyBEb250IHRyaW0gcGFzc3dvcmQga2V5LCB5b3UgY2FuIHVzZSBibGFuayBzcGFjZXMgaW4geW91ciBhbmRyb2lkIHBhc3N3b3JkXG4gIC8vIMKvXFxfKOODhClfL8KvXG4gIGlmICh0eXBlID09PSBQQVNTV09SRF9VTkxPQ0spIHtcbiAgICByZXR1cm4gLy57NCx9L2cudGVzdChrZXkpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmxvY2sgdHlwZSAke3R5cGV9YCk7XG59O1xuXG5oZWxwZXJzLmRpc21pc3NLZXlndWFyZCA9IGFzeW5jIGZ1bmN0aW9uIChkcml2ZXIsIGFkYikge1xuICBsZXQgaXNLZXlib2FyZFNob3duID0gYXdhaXQgZHJpdmVyLmlzS2V5Ym9hcmRTaG93bigpO1xuICBpZiAoaXNLZXlib2FyZFNob3duKSB7XG4gICAgYXdhaXQgZHJpdmVyLmhpZGVLZXlib2FyZCgpO1xuICAgIC8vIFdhaXRzIGEgYml0IGZvciB0aGUga2V5Ym9hcmQgdG8gaGlkZVxuICAgIGF3YWl0IHNsZWVwKEhJREVfS0VZQk9BUkRfV0FJVF9USU1FKTtcbiAgfVxuICAvLyBkaXNtaXNzIG5vdGlmaWNhdGlvbnNcbiAgbG9nZ2VyLmluZm8oXCJEaXNtaXNzIG5vdGlmaWNhdGlvbnMgZnJvbSB1bmxvY2sgdmlld1wiKTtcbiAgYXdhaXQgYWRiLnNoZWxsKFtcInNlcnZpY2VcIiwgXCJjYWxsXCIsIFwibm90aWZpY2F0aW9uXCIsIFwiMVwiXSk7XG4gIGF3YWl0IGFkYi5iYWNrKCk7XG4gIGlmIChhd2FpdCBhZGIuZ2V0QXBpTGV2ZWwoKSA+IDIxKSB7XG4gICAgbG9nZ2VyLmluZm8oXCJUcnlpbmcgdG8gZGlzbWlzcyBrZXlndWFyZFwiKTtcbiAgICBhd2FpdCBhZGIuc2hlbGwoW1wid21cIiwgXCJkaXNtaXNzLWtleWd1YXJkXCJdKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nZ2VyLmluZm8oXCJTd2lwaW5nIHVwIHRvIGRpc21pc3Mga2V5Z3VhcmRcIik7XG4gIGF3YWl0IGhlbHBlcnMuc3dpcGVVcChkcml2ZXIpO1xufTtcblxuaGVscGVycy5zd2lwZVVwID0gYXN5bmMgZnVuY3Rpb24gKGRyaXZlcikge1xuICBsZXQgd2luZG93U2l6ZSA9IGF3YWl0IGRyaXZlci5nZXRXaW5kb3dTaXplKCk7XG4gIGxldCB4MCA9IHBhcnNlSW50KHdpbmRvd1NpemUueCAvIDIsIDEwKTtcbiAgbGV0IHkwID0gd2luZG93U2l6ZS55IC0gMTA7XG4gIGxldCB5UCA9IDEwMDtcbiAgbGV0IGFjdGlvbnMgPSBbXG4gICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IG51bGwsIHg6IHgwLCB5OiB5MH19LFxuICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogbnVsbCwgeDogeDAsIHk6IHlQfX0sXG4gICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICBdO1xuICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGFjdGlvbnMpO1xufTtcblxuaGVscGVycy5lbmNvZGVQYXNzd29yZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC9cXHMvaWcsIFwiJXNcIik7XG59O1xuXG5oZWxwZXJzLnN0cmluZ0tleVRvQXJyID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5LnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcnKS5zcGxpdCgvXFxzKi8pO1xufTtcblxuaGVscGVycy5maW5nZXJwcmludFVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGRyaXZlciwgY2FwYWJpbGl0aWVzKSB7XG4gIGlmIChhd2FpdCBhZGIuZ2V0QXBpTGV2ZWwoKSA8IDIzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmluZ2VycHJpbnQgdW5sb2NrIG9ubHkgd29ya3MgZm9yIEFuZHJvaWQgNisgZW11bGF0b3JzXCIpO1xuICB9XG4gIGF3YWl0IGFkYi5maW5nZXJwcmludChjYXBhYmlsaXRpZXMudW5sb2NrS2V5KTtcbiAgYXdhaXQgc2xlZXAoVU5MT0NLX1dBSVRfVElNRSk7XG59O1xuXG5oZWxwZXJzLnBpblVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGRyaXZlciwgY2FwYWJpbGl0aWVzKSB7XG4gIGxvZ2dlci5pbmZvKGBUcnlpbmcgdG8gdW5sb2NrIGRldmljZSB1c2luZyBwaW4gJHtjYXBhYmlsaXRpZXMudW5sb2NrS2V5fWApO1xuICBhd2FpdCBoZWxwZXJzLmRpc21pc3NLZXlndWFyZChkcml2ZXIsIGFkYik7XG4gIGxldCBrZXlzID0gaGVscGVycy5zdHJpbmdLZXlUb0FycihjYXBhYmlsaXRpZXMudW5sb2NrS2V5KTtcbiAgaWYgKGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpID49IDIxKSB7XG4gICAgbGV0IGVscyA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscyhcImlkXCIsIFwiY29tLmFuZHJvaWQuc3lzdGVtdWk6aWQvZGlnaXRfdGV4dFwiLCB0cnVlKTtcbiAgICBpZiAoXy5pc0VtcHR5KGVscykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIGZpbmRpbmcgdW5sb2NrIHBpbiBidXR0b25zIVwiKTtcbiAgICB9XG4gICAgbGV0IHBpbnMgPSB7fTtcbiAgICBmb3IgKGxldCBlIG9mIGVscykge1xuICAgICAgbGV0IHRleHQgPSBhd2FpdCBkcml2ZXIuZ2V0QXR0cmlidXRlKFwidGV4dFwiLCBlLkVMRU1FTlQpO1xuICAgICAgcGluc1t0ZXh0XSA9IGU7XG4gICAgfVxuICAgIGZvciAobGV0IHBpbiBvZiBrZXlzKSB7XG4gICAgICBsZXQgZWwgPSBwaW5zW3Bpbl07XG4gICAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwuRUxFTUVOVCk7XG4gICAgfVxuICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscyhcImlkXCIsIFwiY29tLmFuZHJvaWQuc3lzdGVtdWk6aWQva2V5X2VudGVyXCIsIGZhbHNlKTtcbiAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwuRUxFTUVOVCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgcGluIG9mIGtleXMpIHtcbiAgICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxPckVscyhcImlkXCIsIGBjb20uYW5kcm9pZC5rZXlndWFyZDppZC9rZXkke3Bpbn1gLCBmYWxzZSk7XG4gICAgICBpZiAoZWwgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBmaW5kaW5nIHVubG9jayBwaW4gJyR7cGlufScgYnV0dG9uIWApO1xuICAgICAgfVxuICAgICAgYXdhaXQgZHJpdmVyLmNsaWNrKGVsLkVMRU1FTlQpO1xuICAgIH1cbiAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsT3JFbHMoXCJpZFwiLCBcImNvbS5hbmRyb2lkLmtleWd1YXJkOmlkL2tleV9lbnRlclwiLCBmYWxzZSk7XG4gICAgYXdhaXQgZHJpdmVyLmNsaWNrKGVsLkVMRU1FTlQpO1xuICB9XG4gIC8vIFdhaXRzIGEgYml0IGZvciB0aGUgZGV2aWNlIHRvIGJlIHVubG9ja2VkXG4gIGF3YWl0IHNsZWVwKFVOTE9DS19XQUlUX1RJTUUpO1xufTtcblxuaGVscGVycy5wYXNzd29yZFVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGRyaXZlciwgY2FwYWJpbGl0aWVzKSB7XG4gIGxvZ2dlci5pbmZvKGBUcnlpbmcgdG8gdW5sb2NrIGRldmljZSB1c2luZyBwYXNzd29yZCAke2NhcGFiaWxpdGllcy51bmxvY2tLZXl9YCk7XG4gIGF3YWl0IGhlbHBlcnMuZGlzbWlzc0tleWd1YXJkKGRyaXZlciwgYWRiKTtcbiAgbGV0IGtleSA9IGNhcGFiaWxpdGllcy51bmxvY2tLZXk7XG4gIC8vIFJlcGxhY2UgYmxhbmsgc3BhY2VzIHdpdGggJXNcbiAga2V5ID0gaGVscGVycy5lbmNvZGVQYXNzd29yZChrZXkpO1xuICAvLyBXaHkgYWRiID8gSXQgd2FzIGxlc3MgZmxha3lcbiAgYXdhaXQgYWRiLnNoZWxsKFtcImlucHV0XCIsIFwidGV4dFwiLCBrZXldKTtcbiAgLy8gV2h5IHNsZWVwcyA/IEF2b2lkIHNvbWUgZmxha3luZXNzIHdhaXRpbmcgZm9yIHRoZSBpbnB1dCB0byByZWNlaXZlIHRoZSBrZXlzXG4gIGF3YWl0IHNsZWVwKElOUFVUX0tFWVNfV0FJVF9USU1FKTtcbiAgYXdhaXQgYWRiLnNoZWxsKFtcImlucHV0XCIsIFwia2V5ZXZlbnRcIiwgS0VZQ09ERV9OVU1QQURfRU5URVJdKTtcbiAgLy8gV2FpdHMgYSBiaXQgZm9yIHRoZSBkZXZpY2UgdG8gYmUgdW5sb2NrZWRcbiAgYXdhaXQgc2xlZXAoVU5MT0NLX1dBSVRfVElNRSk7XG59O1xuXG5oZWxwZXJzLmdldFBhdHRlcm5LZXlQb3NpdGlvbiA9IGZ1bmN0aW9uIChrZXksIGluaXRQb3MsIHBpZWNlKSB7XG4gIC8qXG4gIEhvdyB0aGUgbWF0aCB3b3JrczpcbiAgV2UgaGF2ZSA5IGJ1dHRvbnMgZGl2aWRlZCBpbiAzIGNvbHVtbnMgYW5kIDMgcm93cyBpbnNpZGUgdGhlIGxvY2tQYXR0ZXJuVmlldyxcbiAgZXZlcnkgYnV0dG9uIGhhcyBhIHBvc2l0aW9uIG9uIHRoZSBzY3JlZW4gY29ycmVzcG9uZGluZyB0byB0aGUgbG9ja1BhdHRlcm5WaWV3IHNpbmNlXG4gIGl0IGlzIHRoZSBwYXJlbnQgdmlldyByaWdodCBhdCB0aGUgbWlkZGxlIG9mIGVhY2ggY29sdW1uIG9yIHJvdy5cbiAgKi9cbiAgY29uc3QgY29scyA9IDM7XG4gIGNvbnN0IHBpbnMgPSA5O1xuICBsZXQgeFBvcyA9IChrZXksIHgsIHBpZWNlKSA9PiB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoeCArICgoa2V5ICUgY29scykgfHwgY29scykgKiBwaWVjZSAtIHBpZWNlIC8gMik7XG4gIH07XG4gIGxldCB5UG9zID0gKGtleSwgeSwgcGllY2UpID0+IHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh5ICsgKE1hdGguY2VpbCgoKGtleSAlIHBpbnMpIHx8IHBpbnMpIC8gY29scykgKiBwaWVjZSAtIHBpZWNlIC8gMikpO1xuICB9O1xuICByZXR1cm4ge3g6IHhQb3Moa2V5LCBpbml0UG9zLngsIHBpZWNlKSwgeTogeVBvcyhrZXksIGluaXRQb3MueSwgcGllY2UpfTtcbn07XG5cbmhlbHBlcnMuZ2V0UGF0dGVybkFjdGlvbnMgPSBmdW5jdGlvbiAoa2V5cywgaW5pdFBvcywgcGllY2UpIHtcbiAgbGV0IGFjdGlvbnMgPSBbXTtcbiAgbGV0IGxhc3RQb3M7XG4gIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgbGV0IGtleVBvcyA9IGhlbHBlcnMuZ2V0UGF0dGVybktleVBvc2l0aW9uKGtleSwgaW5pdFBvcywgcGllY2UpO1xuICAgIGlmIChrZXkgPT09IGtleXNbMF0pIHtcbiAgICAgIGFjdGlvbnMucHVzaCh7YWN0aW9uOiAncHJlc3MnLCBvcHRpb25zOiB7ZWxlbWVudDogbnVsbCwgeDoga2V5UG9zLngsIHk6IGtleVBvcy55fX0pO1xuICAgICAgbGFzdFBvcyA9IGtleVBvcztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgbW92ZVRvID0ge3g6IDAsIHk6IDB9O1xuICAgIGxldCBkaWZmWCA9IGtleVBvcy54IC0gbGFzdFBvcy54O1xuICAgIGlmIChkaWZmWCA+IDApIHtcbiAgICAgIG1vdmVUby54ID0gcGllY2U7XG4gICAgICBpZiAoTWF0aC5hYnMoZGlmZlgpID4gcGllY2UpIHtcbiAgICAgICAgbW92ZVRvLnggKz0gcGllY2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkaWZmWCA8IDApIHtcbiAgICAgIG1vdmVUby54ID0gLTEgKiBwaWVjZTtcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmWCkgPiBwaWVjZSkge1xuICAgICAgICBtb3ZlVG8ueCAtPSBwaWVjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGRpZmZZID0ga2V5UG9zLnkgLSBsYXN0UG9zLnk7XG4gICAgaWYgKGRpZmZZID4gMCkge1xuICAgICAgbW92ZVRvLnkgPSBwaWVjZTtcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmWSkgPiBwaWVjZSkge1xuICAgICAgICBtb3ZlVG8ueSArPSBwaWVjZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpZmZZIDwgMCkge1xuICAgICAgbW92ZVRvLnkgPSAtMSAqIHBpZWNlO1xuICAgICAgaWYgKE1hdGguYWJzKGRpZmZZKSA+IHBpZWNlKSB7XG4gICAgICAgIG1vdmVUby55IC09IHBpZWNlO1xuICAgICAgfVxuICAgIH1cbiAgICBhY3Rpb25zLnB1c2goe2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiBudWxsLCB4OiBtb3ZlVG8ueCwgeTogbW92ZVRvLnl9fSk7XG4gICAgbGFzdFBvcyA9IGtleVBvcztcbiAgfVxuICBhY3Rpb25zLnB1c2goe2FjdGlvbjogJ3JlbGVhc2UnfSk7XG4gIHJldHVybiBhY3Rpb25zO1xufTtcblxuaGVscGVycy5wYXR0ZXJuVW5sb2NrID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgZHJpdmVyLCBjYXBhYmlsaXRpZXMpIHtcbiAgbG9nZ2VyLmluZm8oYFRyeWluZyB0byB1bmxvY2sgZGV2aWNlIHVzaW5nIHBhdHRlcm4gJHtjYXBhYmlsaXRpZXMudW5sb2NrS2V5fWApO1xuICBhd2FpdCBoZWxwZXJzLmRpc21pc3NLZXlndWFyZChkcml2ZXIsIGFkYik7XG4gIGxldCBrZXlzID0gaGVscGVycy5zdHJpbmdLZXlUb0FycihjYXBhYmlsaXRpZXMudW5sb2NrS2V5KTtcbiAgLyogV2Ugc2V0IHRoZSBkZXZpY2UgcGF0dGVybiBidXR0b25zIGFzIG51bWJlciBvZiBhIHJlZ3VsYXIgcGhvbmVcbiAgICogIHwg4oCiIOKAoiDigKIgfCAgICAgfCAxIDIgMyB8XG4gICAqICB8IOKAoiDigKIg4oCiIHwgLS0+IHwgNCA1IDYgfFxuICAgKiAgfCDigKIg4oCiIOKAoiB8ICAgICB8IDcgOCA5IHxcblxuICBUaGUgcGF0dGVybiB2aWV3IGJ1dHRvbnMgYXJlIG5vdCBzZWVpbmcgYnkgdGhlIHVpYXV0b21hdG9yIHNpbmNlIHRoZXkgYXJlXG4gIGluY2x1ZGVkIGluc2lkZSBhIEZyYW1lTGF5b3V0LCBzbyB3ZSBhcmUgZ29pbmcgdG8gdHJ5IGNsaWNraW5nIG9uIHRoZSBidXR0b25zXG4gIHVzaW5nIHRoZSBwYXJlbnQgdmlldyBib3VuZHMgYW5kIG1hdGguXG4gICovXG4gIGxldCBhcGlMZXZlbCA9IGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpO1xuICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsT3JFbHMoXCJpZFwiLFxuICAgIGBjb20uYW5kcm9pZC4ke2FwaUxldmVsID49IDIxID8gJ3N5c3RlbXVpJyA6ICdrZXlndWFyZCd9OmlkL2xvY2tQYXR0ZXJuVmlld2AsXG4gICAgZmFsc2VcbiAgKTtcbiAgbGV0IGluaXRQb3MgPSBhd2FpdCBkcml2ZXIuZ2V0TG9jYXRpb24oZWwuRUxFTUVOVCk7XG4gIGxldCBzaXplID0gYXdhaXQgZHJpdmVyLmdldFNpemUoZWwuRUxFTUVOVCk7XG4gIC8vIEdldCBhY3Rpb25zIHRvIHBlcmZvcm1cbiAgbGV0IGFjdGlvbnMgPSBoZWxwZXJzLmdldFBhdHRlcm5BY3Rpb25zKGtleXMsIGluaXRQb3MsIHNpemUud2lkdGggLyAzKTtcbiAgLy8gUGVyZm9ybSBnZXN0dXJlXG4gIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goYWN0aW9ucyk7XG4gIC8vIFdhaXRzIGEgYml0IGZvciB0aGUgZGV2aWNlIHRvIGJlIHVubG9ja2VkXG4gIGF3YWl0IHNsZWVwKFVOTE9DS19XQUlUX1RJTUUpO1xufTtcblxuaGVscGVycy5QSU5fVU5MT0NLID0gUElOX1VOTE9DSztcbmhlbHBlcnMuUEFTU1dPUkRfVU5MT0NLID0gUEFTU1dPUkRfVU5MT0NLO1xuaGVscGVycy5QQVRURVJOX1VOTE9DSyA9IFBBVFRFUk5fVU5MT0NLO1xuaGVscGVycy5GSU5HRVJQUklOVF9VTkxPQ0sgPSBGSU5HRVJQUklOVF9VTkxPQ0s7XG5cbmV4cG9ydCB7IFBJTl9VTkxPQ0ssIFBBU1NXT1JEX1VOTE9DSywgUEFUVEVSTl9VTkxPQ0ssIEZJTkdFUlBSSU5UX1VOTE9DSywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgaGVscGVycztcbiJdLCJmaWxlIjoibGliL3VubG9jay1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
