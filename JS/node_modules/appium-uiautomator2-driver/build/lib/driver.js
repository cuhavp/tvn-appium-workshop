"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidUiautomator2Driver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _uiautomator = _interopRequireDefault(require("./uiautomator2"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("./logger"));

var _index = _interopRequireDefault(require("./commands/index"));

var _appiumAdb = require("appium-adb");

var _helpers = _interopRequireDefault(require("./helpers"));

var _appiumAndroidDriver = require("appium-android-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _portscanner = require("portscanner");

const helpers = Object.assign({}, _helpers.default, _appiumAndroidDriver.androidHelpers);
const SYSTEM_PORT_RANGE = [8200, 8299];
const DEVICE_PORT = 6790;
const NO_PROXY = [['GET', new RegExp('^/session/(?!.*/)')], ['GET', new RegExp('^/session/[^/]+/alert_[^/]+')], ['GET', new RegExp('^/session/[^/]+/alert/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_activity')], ['GET', new RegExp('^/session/[^/]+/appium/[^/]+/current_package')], ['GET', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/device/[^/]+')], ['GET', new RegExp('^/session/[^/]+/appium/settings')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/attribute')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/displayed')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/enabled')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/location_in_view')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/name')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/selected')], ['GET', new RegExp('^/session/[^/]+/ime/[^/]+')], ['GET', new RegExp('^/session/[^/]+/location')], ['GET', new RegExp('^/session/[^/]+/log/types')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['GET', new RegExp('^/session/[^/]+/screenshot')], ['GET', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/[^/]+_alert$')], ['POST', new RegExp('^/session/[^/]+/actions')], ['POST', new RegExp('^/session/[^/]+/alert/[^/]+')], ['POST', new RegExp('^/session/[^/]+/app/[^/]')], ['POST', new RegExp('^/session/[^/]+/appium/[^/]+/start_activity')], ['POST', new RegExp('^/session/[^/]+/appium/app/[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/compare_images')], ['POST', new RegExp('^/session/[^/]+/appium/device/(?!set_clipboard|get_clipboard)[^/]+')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/replace_value')], ['POST', new RegExp('^/session/[^/]+/appium/element/[^/]+/value')], ['POST', new RegExp('^/session/[^/]+/appium/getPerformanceData')], ['POST', new RegExp('^/session/[^/]+/appium/performanceData/types')], ['POST', new RegExp('^/session/[^/]+/appium/settings')], ['POST', new RegExp('^/session/[^/]+/appium/start_recording_screen')], ['POST', new RegExp('^/session/[^/]+/appium/stop_recording_screen')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/element')], ['POST', new RegExp('^/session/[^/]+/ime/[^/]+')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/timeouts')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/url')], ['POST', new RegExp('^/session/[^/]+/execute')], ['POST', new RegExp('^/session/[^/]+/execute_async')], ['GET', new RegExp('^/session/[^/]+/window/rect')], ['POST', new RegExp('^/session/[^/]+/execute/async')], ['POST', new RegExp('^/session/[^/]+/execute/sync')]];
const CHROME_NO_PROXY = [['GET', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/touch/perform')]];
const APP_EXTENSION = '.apk';
const MEMOIZED_FUNCTIONS = ['getWindowSize', 'getStatusBarHeight', 'getDevicePixelRatio'];

class AndroidUiautomator2Driver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.uiautomator2 = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false,
      allowInvisibleElements: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.sessionChromedrivers = {};

    for (var _i = 0; _i < MEMOIZED_FUNCTIONS.length; _i++) {
      const fn = MEMOIZED_FUNCTIONS[_i];
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }

  validateDesiredCaps(caps) {
    return super.validateDesiredCaps(caps) && _appiumAndroidDriver.androidHelpers.validateDesiredCaps(caps);
  }

  createSession(...args) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        let _ref = yield _superprop_callCreateSession(...args),
            _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            sessionId = _ref2[0],
            caps = _ref2[1];

        let serverDetails = {
          platform: 'LINUX',
          webStorageEnabled: false,
          takesScreenshot: true,
          javascriptEnabled: true,
          databaseEnabled: false,
          networkConnectionEnabled: true,
          locationContextEnabled: false,
          warnings: {},
          desired: _this.caps
        };
        _this.caps = Object.assign(serverDetails, _this.caps);
        _this.curContext = _this.defaultContextName();
        let defaultOpts = {
          fullReset: false,
          autoLaunch: true,
          adbPort: _appiumAdb.DEFAULT_ADB_PORT,
          androidInstallTimeout: 90000
        };

        _lodash.default.defaults(_this.opts, defaultOpts);

        if (_this.isChromeSession) {
          _logger.default.info("We're going to run a Chrome-based session");

          let _helpers$getChromePkg = helpers.getChromePkg(_this.opts.browserName),
              pkg = _helpers$getChromePkg.pkg,
              activity = _helpers$getChromePkg.activity;

          _this.opts.appPackage = _this.caps.appPackage = pkg;
          _this.opts.appActivity = _this.caps.appActivity = activity;

          _logger.default.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
        }

        if (_this.opts.reboot) {
          _this.setAvdFromCapabilities(caps);
        }

        if (_this.opts.app) {
          _this.opts.app = yield _this.helpers.configureApp(_this.opts.app, APP_EXTENSION);
          yield _this.checkAppPresent();
        } else if (_this.appOnDevice) {
          _logger.default.info(`App file was not listed, instead we're going to run ` + `${_this.opts.appPackage} directly on the device`);

          yield _this.checkPackagePresent();
        }

        _this.opts.systemPort = _this.opts.systemPort || (yield (0, _portscanner.findAPortNotInUse)(SYSTEM_PORT_RANGE[0], SYSTEM_PORT_RANGE[1]));
        _this.opts.adbPort = _this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
        yield _this.startUiAutomator2Session();
        yield _this.fillDeviceDetails();

        if (_this.opts.mjpegScreenshotUrl) {
          _logger.default.info(`Starting MJPEG stream reading URL: '${_this.opts.mjpegScreenshotUrl}'`);

          _this.mjpegStream = new _appiumSupport.mjpeg.MJpegStream(_this.opts.mjpegScreenshotUrl);
          yield _this.mjpegStream.start();
        }

        return [sessionId, _this.caps];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  fillDeviceDetails() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this2.caps.pixelRatio = yield _this2.getDevicePixelRatio();
      _this2.caps.statBarHeight = yield _this2.getStatusBarHeight();
      _this2.caps.viewportRect = yield _this2.getViewPortRect();
    })();
  }

  get driverData() {
    return {};
  }

  getSession() {
    var _this3 = this,
        _superprop_callGetSession = (..._args2) => super.getSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      let sessionData = yield _superprop_callGetSession();

      _logger.default.debug("Getting session details from server to mix in");

      let uia2Data = yield _this3.uiautomator2.jwproxy.command('/', 'GET', {});
      return Object.assign({}, sessionData, uia2Data);
    })();
  }

  isEmulator() {
    return !!(this.opts.avd || /emulator/.test(this.opts.udid));
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, "-");
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  startUiAutomator2Session() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_this4.opts.javaVersion) {
        _this4.opts.javaVersion = yield helpers.getJavaVersion();
      }

      let _ref3 = yield helpers.getDeviceInfoFromCaps(_this4.opts),
          udid = _ref3.udid,
          emPort = _ref3.emPort;

      _this4.opts.udid = udid;
      _this4.opts.emPort = emPort;
      _this4.adb = yield _appiumAndroidDriver.androidHelpers.createADB(_this4.opts);

      if ((yield _this4.adb.getApiLevel()) < 21) {
        _logger.default.errorAndThrow('UIAutomation2 is only supported since Android 5.0 (Lollipop). ' + 'You could still use other supported backends in order to automate older Android versions.');
      }

      let appInfo = yield helpers.getLaunchInfo(_this4.adb, _this4.opts);
      Object.assign(_this4.opts, appInfo);
      _this4.caps.deviceName = _this4.adb.curDeviceId;
      _this4.caps.deviceUDID = _this4.opts.udid;
      yield _this4.initUiAutomator2Server();
      _this4.defaultIME = yield helpers.initDevice(_this4.adb, _this4.opts);

      _logger.default.debug(`Forwarding UiAutomator2 Server port ${DEVICE_PORT} to ${_this4.opts.systemPort}`);

      yield _this4.adb.forwardPort(_this4.opts.systemPort, DEVICE_PORT);

      if (_this4.opts.autoLaunch) {
        yield _this4.initAUT();
      }

      if (!_this4.caps.appPackage && appInfo) {
        _this4.caps.appPackage = appInfo.appPackage;
      }

      yield _this4.uiautomator2.startSession(_this4.caps);
      yield _this4.addDeviceInfoToCaps();

      if (!_this4.opts.skipUnlock) {
        yield helpers.unlock(_this4, _this4.adb, _this4.caps);
      } else {
        _logger.default.debug(`'skipUnlock' capability set, so skipping device unlock`);
      }

      if (_this4.opts.autoLaunch) {
        yield _this4.ensureAppStarts();
      }

      if (_appiumSupport.util.hasValue(_this4.opts.orientation)) {
        _logger.default.debug(`Setting initial orientation to '${_this4.opts.orientation}'`);

        yield _this4.setOrientation(_this4.opts.orientation);
      }

      if (_this4.opts.autoWebview) {
        const viewName = _this4.defaultWebviewName();

        const timeout = _this4.opts.autoWebviewTimeout || 2000;

        _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

        yield (0, _asyncbox.retryInterval)(timeout / 500, 500, _this4.setContext.bind(_this4), viewName);
      }

      if (_this4.isChromeSession) {
        yield _this4.startChromeSession(_this4);
      }

      _this4.jwpProxyActive = true;
    })();
  }

  addDeviceInfoToCaps() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const _ref4 = yield _this5.mobileGetDeviceInfo(),
            apiVersion = _ref4.apiVersion,
            platformVersion = _ref4.platformVersion,
            manufacturer = _ref4.manufacturer,
            model = _ref4.model,
            realDisplaySize = _ref4.realDisplaySize,
            displayDensity = _ref4.displayDensity;

      _this5.caps.deviceApiLevel = parseInt(apiVersion, 10);
      _this5.caps.platformVersion = platformVersion;
      _this5.caps.deviceScreenSize = realDisplaySize;
      _this5.caps.deviceScreenDensity = displayDensity;
      _this5.caps.deviceModel = model;
      _this5.caps.deviceManufacturer = manufacturer;
    })();
  }

  initUiAutomator2Server() {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this6.uiautomator2 = new _uiautomator.default({
        host: _this6.opts.remoteAdbHost || _this6.opts.host || 'localhost',
        systemPort: _this6.opts.systemPort,
        devicePort: DEVICE_PORT,
        adb: _this6.adb,
        apk: _this6.opts.app,
        tmpDir: _this6.opts.tmpDir,
        appPackage: _this6.opts.appPackage,
        appActivity: _this6.opts.appActivity,
        disableWindowAnimation: !!_this6.opts.disableWindowAnimation
      });
      _this6.proxyReqRes = _this6.uiautomator2.proxyReqRes.bind(_this6.uiautomator2);
      yield _this6.uiautomator2.killUiAutomatorOnDevice();
      yield _this6.uiautomator2.installServerApk(_this6.opts.uiautomator2ServerInstallTimeout);
    })();
  }

  initAUT() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (_this7.opts.otherApps) {
        let otherApps;

        try {
          otherApps = helpers.parseArray(_this7.opts.otherApps);
        } catch (e) {
          _logger.default.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
        }

        otherApps = yield _bluebird.default.all(otherApps.map(app => _this7.helpers.configureApp(app, APP_EXTENSION)));
        yield helpers.installOtherApks(otherApps, _this7.adb, _this7.opts);
      }

      if (!_this7.opts.app) {
        if (_this7.opts.fullReset) {
          _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
        }

        _logger.default.debug('No app capability. Assuming it is already on the device');

        if (_this7.opts.fastReset) {
          yield helpers.resetApp(_this7.adb, _this7.opts);
        }
      }

      if (!_this7.opts.skipUninstall) {
        yield _this7.adb.uninstallApk(_this7.opts.appPackage);
      }

      if (!_this7.opts.noSign) {
        let signed = yield _this7.adb.checkApkCert(_this7.opts.app, _this7.opts.appPackage);

        if (!signed && _this7.opts.app) {
          yield _this7.adb.sign(_this7.opts.app, _this7.opts.appPackage);
        }
      }

      if (_this7.opts.app) {
        yield helpers.installApk(_this7.adb, _this7.opts);
      }
    })();
  }

  ensureAppStarts() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let appWaitPackage = _this8.opts.appWaitPackage || _this8.opts.appPackage;
      let appWaitActivity = _this8.opts.appWaitActivity || _this8.opts.appActivity;

      _logger.default.info(`UiAutomator2 did not start the activity we were waiting for, ` + `'${appWaitPackage}/${appWaitActivity}'. Starting it ourselves`);

      if (_this8.caps.androidCoverage) {
        _logger.default.info(`androidCoverage is configured. ` + ` Starting instrumentation of '${_this8.caps.androidCoverage}'...`);

        yield _this8.adb.androidCoverage(_this8.caps.androidCoverage, appWaitPackage, appWaitActivity);
      } else {
        yield _this8.adb.startApp({
          pkg: _this8.opts.appPackage,
          activity: _this8.opts.appActivity,
          action: _this8.opts.intentAction,
          category: _this8.opts.intentCategory,
          flags: _this8.opts.intentFlags,
          waitPkg: _this8.opts.appWaitPackage,
          waitActivity: _this8.opts.appWaitActivity,
          optionalIntentArguments: _this8.opts.optionalIntentArguments,
          stopApp: !_this8.opts.dontStopAppOnReset,
          retry: true
        });
      }
    })();
  }

  deleteSession() {
    var _this9 = this,
        _superprop_callDeleteSession = (..._args3) => super.deleteSession(..._args3);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting UiAutomator2 session');

      yield _appiumAndroidDriver.androidHelpers.removeAllSessionWebSocketHandlers(_this9.server, _this9.sessionId);

      if (_this9.uiautomator2) {
        try {
          yield _this9.stopChromedriverProxies();
        } catch (err) {
          _logger.default.warn(`Unable to stop ChromeDriver proxies: ${err.message}`);
        }

        if (_this9.jwpProxyActive) {
          try {
            yield _this9.uiautomator2.deleteSession();
          } catch (err) {
            _logger.default.warn(`Unable to proxy deleteSession to UiAutomator2: ${err.message}`);
          }
        }

        _this9.uiautomator2 = null;
      }

      _this9.jwpProxyActive = false;

      if (_this9.adb) {
        if (_this9.opts.unicodeKeyboard && _this9.opts.resetKeyboard && _this9.defaultIME) {
          _logger.default.debug(`Resetting IME to '${_this9.defaultIME}'`);

          try {
            yield _this9.adb.setIME(_this9.defaultIME);
          } catch (err) {
            _logger.default.warn(`Unable to reset IME: ${err.message}`);
          }
        }

        if (_this9.caps.androidCoverage) {
          _logger.default.info('Shutting down the adb process of instrumentation...');

          yield _this9.adb.endAndroidCoverage();

          if (_this9.caps.androidCoverageEndIntent) {
            _logger.default.info(`Sending intent broadcast '${_this9.caps.androidCoverageEndIntent}' at the end of instrumenting.`);

            yield _this9.adb.broadcast(_this9.caps.androidCoverageEndIntent);
          } else {
            _logger.default.warn('No androidCoverageEndIntent is configured in caps. Possibly you cannot get coverage file.');
          }
        }

        if (_this9.opts.appPackage) {
          try {
            yield _this9.adb.forceStop(_this9.opts.appPackage);
          } catch (err) {
            _logger.default.warn(`Unable to force stop app: ${err.message}`);
          }
        }

        if (_this9.opts.fullReset && !_this9.opts.skipUninstall && !_this9.appOnDevice) {
          _logger.default.debug(`Capability 'fullReset' set to 'true', Uninstalling '${_this9.opts.appPackage}'`);

          try {
            yield _this9.adb.uninstallApk(_this9.opts.appPackage);
          } catch (err) {
            _logger.default.warn(`Unable to uninstall app: ${err.message}`);
          }
        }

        yield _this9.adb.stopLogcat();

        if (_appiumSupport.util.hasValue(_this9.opts.systemPort)) {
          try {
            yield _this9.adb.removePortForward(_this9.opts.systemPort);
          } catch (error) {
            _logger.default.warn(`Unable to remove port forward '${error.message}'`);
          }
        }

        if (_this9.opts.reboot) {
          let avdName = _this9.opts.avd.replace('@', '');

          _logger.default.debug(`Closing emulator '${avdName}'`);

          try {
            yield _this9.adb.killEmulator(avdName);
          } catch (err) {
            _logger.default.warn(`Unable to close emulator: ${err.message}`);
          }
        }
      }

      if (_this9.mjpegStream) {
        _logger.default.info('Closing MJPEG stream');

        _this9.mjpegStream.stop();
      }

      yield _superprop_callDeleteSession();
    })();
  }

  checkAppPresent() {
    var _this10 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Checking whether app is actually present');

      if (!(yield _appiumSupport.fs.exists(_this10.opts.app))) {
        _logger.default.errorAndThrow(`Could not find app apk at '${_this10.opts.app}'`);
      }
    })();
  }

  onSettingsUpdate() {
    return (0, _asyncToGenerator2.default)(function* () {})();
  }

  wrapBootstrapDisconnect(wrapped) {
    var _this11 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield wrapped();
      yield _this11.adb.restart();
      yield _this11.adb.forwardPort(_this11.opts.systemPort, DEVICE_PORT);
    })();
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);

    if (_appiumSupport.util.hasValue(this.chromedriver)) {
      this.jwpProxyAvoid = CHROME_NO_PROXY;
    } else {
      this.jwpProxyAvoid = NO_PROXY;
    }

    if (this.opts.nativeWebScreenshot) {
      this.jwpProxyAvoid = [...this.jwpProxyAvoid, ['GET', new RegExp('^/session/[^/]+/screenshot')]];
    }

    return this.jwpProxyAvoid;
  }

  get isChromeSession() {
    return helpers.isChromeBrowser(this.opts.browserName);
  }

}

exports.AndroidUiautomator2Driver = AndroidUiautomator2Driver;
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
        cmd = _step$value[0],
        fn = _step$value[1];

    AndroidUiautomator2Driver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator.return != null) {
      _iterator.return();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _lodash.default.toPairs(_index.default)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
        cmd = _step2$value[0],
        fn = _step2$value[1];

    AndroidUiautomator2Driver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

var _default = AndroidUiautomator2Driver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
