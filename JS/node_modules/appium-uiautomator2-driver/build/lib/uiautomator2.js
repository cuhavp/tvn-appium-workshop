"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumUiautomator2Server = require("appium-uiautomator2-server");

var _adbkit = _interopRequireDefault(require("adbkit"));

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

const REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'disableWindowAnimation'];
const SERVER_LAUNCH_RETRIES = 20;
const SERVER_INSTALL_RETRIES = 20;
const INSTRUMENTATION_TARGET = 'io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner';
const SERVER_PACKAGE_ID = 'io.appium.uiautomator2.server';
const SERVER_TEST_PACKAGE_ID = `${SERVER_PACKAGE_ID}.test`;

class UiAutomator2Server {
  constructor(opts = {}) {
    for (var _i = 0; _i < REQD_PARAMS.length; _i++) {
      let req = REQD_PARAMS[_i];

      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.client = _adbkit.default.createClient({
      port: this.adb.adbPort,
      host: this.host
    });
  }

  installServerApk(installTimeout = SERVER_INSTALL_RETRIES * 1000) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const packagesInfo = [{
        appPath: _appiumUiautomator2Server.SERVER_APK_PATH,
        appId: SERVER_PACKAGE_ID
      }, {
        appPath: _appiumUiautomator2Server.TEST_APK_PATH,
        appId: SERVER_TEST_PACKAGE_ID
      }];
      let shouldUninstallServerPackages = false;

      for (var _i2 = 0; _i2 < packagesInfo.length; _i2++) {
        const _packagesInfo$_i = packagesInfo[_i2],
              appId = _packagesInfo$_i.appId,
              appPath = _packagesInfo$_i.appPath;

        if (!(yield _this.adb.checkApkCert(appPath, appId))) {
          yield _this.adb.sign(appPath);
          shouldUninstallServerPackages = true;
        }
      }

      if (shouldUninstallServerPackages) {
        for (var _i3 = 0; _i3 < packagesInfo.length; _i3++) {
          const appId = packagesInfo[_i3].appId;

          try {
            yield _this.adb.uninstallApk(appId);
          } catch (err) {
            _logger.default.warn(`Error uninstalling '${appId}': ${err.message}`);

            _logger.default.debug('Continuing');
          }
        }
      }

      for (var _i4 = 0; _i4 < packagesInfo.length; _i4++) {
        const _packagesInfo$_i2 = packagesInfo[_i4],
              appPath = _packagesInfo$_i2.appPath,
              appId = _packagesInfo$_i2.appId;
        yield _this.adb.installOrUpgrade(appPath, appId, {
          timeout: installTimeout
        });
      }

      let retries = (0, _utils.getRetries)('Server install', installTimeout, SERVER_INSTALL_RETRIES);

      _logger.default.debug(`Waiting up to ${retries * 1000}ms for instrumentation '${INSTRUMENTATION_TARGET}' to be available`);

      let output;

      try {
        yield (0, _asyncbox.retryInterval)(retries, 1000, (0, _asyncToGenerator2.default)(function* () {
          output = yield _this.adb.shell(['pm', 'list', 'instrumentation']);

          if (output.indexOf('Could not access the Package Manager') !== -1) {
            let err = new Error(`Problem running package manager: ${output}`);
            output = null;
            throw err;
          } else if (output.indexOf(INSTRUMENTATION_TARGET) === -1) {
            throw new Error('No instrumentation process found. Retrying...');
          }

          _logger.default.debug(`Instrumentation '${INSTRUMENTATION_TARGET}' available`);
        }));
      } catch (err) {
        _logger.default.error(`Unable to find instrumentation target '${INSTRUMENTATION_TARGET}': ${err.message}`);

        if (output) {
          _logger.default.debug('Available targets:');

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = output.split('\n')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              let line = _step.value;

              _logger.default.debug(`    ${line.replace('instrumentation:', '')}`);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    })();
  }

  startSession(caps) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      yield _this2.killUiAutomatorOnDevice();

      _logger.default.info(`Starting uiautomator2 server ${_appiumUiautomator2Server.version}`);

      _logger.default.info(`Using UIAutomator2 server from '${_appiumUiautomator2Server.SERVER_APK_PATH}' and test from '${_appiumUiautomator2Server.TEST_APK_PATH}'`);

      yield _this2.startSessionUsingAdbKit(caps.deviceUDID);
      let retries = (0, _utils.getRetries)('Server launch', caps.uiautomator2ServerLaunchTimeout, SERVER_LAUNCH_RETRIES);

      _logger.default.info(`Waiting up to ${retries * 1000}ms for UiAutomator2 to be online...`);

      yield (0, _asyncbox.retryInterval)(retries, 1000, _this2.jwproxy.command.bind(_this2.jwproxy), '/status', 'GET');
      yield _this2.jwproxy.command('/session', 'POST', {
        desiredCapabilities: caps
      });
    })();
  }

  startSessionUsingAdbKit(deviceUDID) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let cmd = 'am instrument -w';

      if (_this3.disableWindowAnimation) {
        cmd = `${cmd} --no-window-animation`;
      }

      cmd = `${cmd} ${INSTRUMENTATION_TARGET}`;

      _logger.default.info(`Running command: 'adb -s ${deviceUDID} shell ${cmd}'`);

      _this3.client.shell(deviceUDID, cmd).then(_adbkit.default.util.readAll).then(function (output) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = output.toString().split('\n')[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            let line = _step2.value;

            if (line.length) {
              _logger.default.debug(`[UIAutomator2] ${line}`);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }).catch(function (err) {
        _logger.default.error(`[UIAutomator2 Error] ${err.message}`);

        _logger.default.debug(`Full error: ${err.stack}`);
      });
    })();
  }

  deleteSession() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting UiAutomator2 server session');

      try {
        yield _this4.jwproxy.command('/', 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation UiAutomator2 deleteSession worked; ` + `Error was: ${err}`);
      }
    })();
  }

  killUiAutomatorOnDevice() {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        const pids = (yield _this5.adb.getPIDsByName('uiautomator')).map(p => `${p}`);

        if (!_lodash.default.isEmpty(pids)) {
          const isRoot = yield _this5.adb.root();

          try {
            yield _this5.adb.shell(['kill', '-9', ...pids]);
          } finally {
            if (isRoot) {
              yield _this5.adb.unroot();
            }
          }
        }
      } catch (err) {
        _logger.default.warn(`Unable to stop uiautomator process: ${err.message}`);
      }

      try {
        yield _this5.adb.forceStop('io.appium.uiautomator2.server');
      } catch (ignore) {
        _logger.default.info("Unable to kill the io.appium.uiautomator2.server process, assuming it is already killed");
      }
    })();
  }

}

var _default = UiAutomator2Server;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG9tYXRvcjIuanMiXSwibmFtZXMiOlsiUkVRRF9QQVJBTVMiLCJTRVJWRVJfTEFVTkNIX1JFVFJJRVMiLCJTRVJWRVJfSU5TVEFMTF9SRVRSSUVTIiwiSU5TVFJVTUVOVEFUSU9OX1RBUkdFVCIsIlNFUlZFUl9QQUNLQUdFX0lEIiwiU0VSVkVSX1RFU1RfUEFDS0FHRV9JRCIsIlVpQXV0b21hdG9yMlNlcnZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInJlcSIsInV0aWwiLCJoYXNWYWx1ZSIsIkVycm9yIiwiandwcm94eSIsIkpXUHJveHkiLCJzZXJ2ZXIiLCJob3N0IiwicG9ydCIsInN5c3RlbVBvcnQiLCJwcm94eVJlcVJlcyIsImJpbmQiLCJjbGllbnQiLCJhZGJraXQiLCJjcmVhdGVDbGllbnQiLCJhZGIiLCJhZGJQb3J0IiwiaW5zdGFsbFNlcnZlckFwayIsImluc3RhbGxUaW1lb3V0IiwicGFja2FnZXNJbmZvIiwiYXBwUGF0aCIsImFwa1BhdGgiLCJhcHBJZCIsInRlc3RBcGtQYXRoIiwic2hvdWxkVW5pbnN0YWxsU2VydmVyUGFja2FnZXMiLCJjaGVja0Fwa0NlcnQiLCJzaWduIiwidW5pbnN0YWxsQXBrIiwiZXJyIiwibG9nZ2VyIiwid2FybiIsIm1lc3NhZ2UiLCJkZWJ1ZyIsImluc3RhbGxPclVwZ3JhZGUiLCJ0aW1lb3V0IiwicmV0cmllcyIsIm91dHB1dCIsInNoZWxsIiwiaW5kZXhPZiIsImVycm9yIiwic3BsaXQiLCJsaW5lIiwicmVwbGFjZSIsInN0YXJ0U2Vzc2lvbiIsImNhcHMiLCJraWxsVWlBdXRvbWF0b3JPbkRldmljZSIsImluZm8iLCJzZXJ2ZXJWZXJzaW9uIiwic3RhcnRTZXNzaW9uVXNpbmdBZGJLaXQiLCJkZXZpY2VVRElEIiwidWlhdXRvbWF0b3IyU2VydmVyTGF1bmNoVGltZW91dCIsImNvbW1hbmQiLCJkZXNpcmVkQ2FwYWJpbGl0aWVzIiwiY21kIiwiZGlzYWJsZVdpbmRvd0FuaW1hdGlvbiIsInRoZW4iLCJyZWFkQWxsIiwidG9TdHJpbmciLCJsZW5ndGgiLCJjYXRjaCIsInN0YWNrIiwiZGVsZXRlU2Vzc2lvbiIsInBpZHMiLCJnZXRQSURzQnlOYW1lIiwibWFwIiwicCIsIl8iLCJpc0VtcHR5IiwiaXNSb290Iiwicm9vdCIsInVucm9vdCIsImZvcmNlU3RvcCIsImlnbm9yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxXQUFXLEdBQUcsQ0FBQyxLQUFELEVBQVEsUUFBUixFQUFrQixNQUFsQixFQUEwQixZQUExQixFQUF3QyxZQUF4QyxFQUFzRCx3QkFBdEQsQ0FBcEI7QUFDQSxNQUFNQyxxQkFBcUIsR0FBRyxFQUE5QjtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLEVBQS9CO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsbUZBQS9CO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsK0JBQTFCO0FBQ0EsTUFBTUMsc0JBQXNCLEdBQUksR0FBRUQsaUJBQWtCLE9BQXBEOztBQUdBLE1BQU1FLGtCQUFOLENBQXlCO0FBQ3ZCQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsMEJBQWdCUixXQUFoQixlQUE2QjtBQUF4QixVQUFJUyxHQUFHLEdBQUlULFdBQUosSUFBUDs7QUFDSCxVQUFJLENBQUNRLElBQUQsSUFBUyxDQUFDRSxvQkFBS0MsUUFBTCxDQUFjSCxJQUFJLENBQUNDLEdBQUQsQ0FBbEIsQ0FBZCxFQUF3QztBQUN0QyxjQUFNLElBQUlHLEtBQUosQ0FBVyxXQUFVSCxHQUFJLGdCQUF6QixDQUFOO0FBQ0Q7O0FBQ0QsV0FBS0EsR0FBTCxJQUFZRCxJQUFJLENBQUNDLEdBQUQsQ0FBaEI7QUFDRDs7QUFDRCxTQUFLSSxPQUFMLEdBQWUsSUFBSUMseUJBQUosQ0FBWTtBQUFDQyxNQUFBQSxNQUFNLEVBQUUsS0FBS0MsSUFBZDtBQUFvQkMsTUFBQUEsSUFBSSxFQUFFLEtB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QUFDLE1BQUQsRUFBUyxJQUFULEVBQWUsR0FBR3lCLElBQWxCLENBQWYsQ0FBTjtBQUNELFdBRkQsU0FFVTtBQUNSLGdCQUFJTSxNQUFKLEVBQVk7QUFDVixvQkFBTSxNQUFJLENBQUNyRCxHQUFMLENBQVN1RCxNQUFULEVBQU47QUFDRDtBQUNGO0FBQ0Y7QUFDRixPQVpELENBWUUsT0FBTzFDLEdBQVAsRUFBWTtBQUNaQyx3QkFBT0MsSUFBUCxDQUFhLHVDQUFzQ0YsR0FBRyxDQUFDRyxPQUFRLEVBQS9EO0FBQ0Q7O0FBRUQsVUFBSTtBQUNGLGNBQU0sTUFBSSxDQUFDaEIsR0FBTCxDQUFTd0QsU0FBVCxDQUFtQiwrQkFBbkIsQ0FBTjtBQUNELE9BRkQsQ0FFRSxPQUFPQyxNQUFQLEVBQWU7QUFDZjNDLHdCQUFPaUIsSUFBUCxDQUFZLHlGQUFaO0FBQ0Q7QUFyQjhCO0FBc0JoQzs7QUFsS3NCOztlQXFLVmpELGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEpXUHJveHkgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgU0VSVkVSX0FQS19QQVRIIGFzIGFwa1BhdGgsIFRFU1RfQVBLX1BBVEggYXMgdGVzdEFwa1BhdGgsIHZlcnNpb24gYXMgc2VydmVyVmVyc2lvbiB9IGZyb20gJ2FwcGl1bS11aWF1dG9tYXRvcjItc2VydmVyJztcbmltcG9ydCBhZGJraXQgZnJvbSAnYWRia2l0JztcbmltcG9ydCB7IGdldFJldHJpZXMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuY29uc3QgUkVRRF9QQVJBTVMgPSBbJ2FkYicsICd0bXBEaXInLCAnaG9zdCcsICdzeXN0ZW1Qb3J0JywgJ2RldmljZVBvcnQnLCAnZGlzYWJsZVdpbmRvd0FuaW1hdGlvbiddO1xuY29uc3QgU0VSVkVSX0xBVU5DSF9SRVRSSUVTID0gMjA7XG5jb25zdCBTRVJWRVJfSU5TVEFMTF9SRVRSSUVTID0gMjA7XG5jb25zdCBJTlNUUlVNRU5UQVRJT05fVEFSR0VUID0gJ2lvLmFwcGl1bS51aWF1dG9tYXRvcjIuc2VydmVyLnRlc3QvYW5kcm9pZC5zdXBwb3J0LnRlc3QucnVubmVyLkFuZHJvaWRKVW5pdFJ1bm5lcic7XG5jb25zdCBTRVJWRVJfUEFDS0FHRV9JRCA9ICdpby5hcHBpdW0udWlhdXRvbWF0b3IyLnNlcnZlcic7XG5jb25zdCBTRVJWRVJfVEVTVF9QQUNLQUdFX0lEID0gYCR7U0VSVkVSX1BBQ0tBR0VfSUR9LnRlc3RgO1xuXG5cbmNsYXNzIFVpQXV0b21hdG9yMlNlcnZlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBmb3IgKGxldCByZXEgb2YgUkVRRF9QQVJBTVMpIHtcbiAgICAgIGlmICghb3B0cyB8fCAhdXRpbC5oYXNWYWx1ZShvcHRzW3JlcV0pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgT3B0aW9uICcke3JlcX0nIGlzIHJlcXVpcmVkIWApO1xuICAgICAgfVxuICAgICAgdGhpc1tyZXFdID0gb3B0c1tyZXFdO1xuICAgIH1cbiAgICB0aGlzLmp3cHJveHkgPSBuZXcgSldQcm94eSh7c2VydmVyOiB0aGlzLmhvc3QsIHBvcnQ6IHRoaXMuc3lzdGVtUG9ydH0pO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLmp3cHJveHkucHJveHlSZXFSZXMuYmluZCh0aGlzLmp3cHJveHkpO1xuXG4gICAgdGhpcy5jbGllbnQgPSBhZGJraXQuY3JlYXRlQ2xpZW50KHtcbiAgICAgIHBvcnQ6IHRoaXMuYWRiLmFkYlBvcnQsXG4gICAgICBob3N0OiB0aGlzLmhvc3RcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0YWxscyB0aGUgYXBrcyBvbiB0byB0aGUgZGV2aWNlIG9yIGVtdWxhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFsbFRpbWVvdXQgLSBJbnN0YWxsYXRpb24gdGltZW91dFxuICAgKi9cbiAgYXN5bmMgaW5zdGFsbFNlcnZlckFwayAoaW5zdGFsbFRpbWVvdXQgPSBTRVJWRVJfSU5TVEFMTF9SRVRSSUVTICogMTAwMCkge1xuICAgIGNvbnN0IHBhY2thZ2VzSW5mbyA9IFtcbiAgICAgIHtcbiAgICAgICAgYXBwUGF0aDogYXBrUGF0aCxcbiAgICAgICAgYXBwSWQ6IFNFUlZFUl9QQUNLQUdFX0lELFxuICAgICAgfSwge1xuICAgICAgICBhcHBQYXRoOiB0ZXN0QXBrUGF0aCxcbiAgICAgICAgYXBwSWQ6IFNFUlZFUl9URVNUX1BBQ0tBR0VfSUQsXG4gICAgICB9LFxuICAgIF07XG4gICAgbGV0IHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCB7YXBwSWQsIGFwcFBhdGh9IG9mIHBhY2thZ2VzSW5mbykge1xuICAgICAgaWYgKCFhd2FpdCB0aGlzLmFkYi5jaGVja0Fwa0NlcnQoYXBwUGF0aCwgYXBwSWQpKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLnNpZ24oYXBwUGF0aCk7XG4gICAgICAgIHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzKSB7XG4gICAgICBmb3IgKGNvbnN0IHthcHBJZH0gb2YgcGFja2FnZXNJbmZvKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGIudW5pbnN0YWxsQXBrKGFwcElkKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLndhcm4oYEVycm9yIHVuaW5zdGFsbGluZyAnJHthcHBJZH0nOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQ29udGludWluZycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qge2FwcFBhdGgsIGFwcElkfSBvZiBwYWNrYWdlc0luZm8pIHtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLmluc3RhbGxPclVwZ3JhZGUoYXBwUGF0aCwgYXBwSWQsIHtcbiAgICAgICAgdGltZW91dDogaW5zdGFsbFRpbWVvdXQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmV0cmllcyA9IGdldFJldHJpZXMoJ1NlcnZlciBpbnN0YWxsJywgaW5zdGFsbFRpbWVvdXQsIFNFUlZFUl9JTlNUQUxMX1JFVFJJRVMpO1xuXG4gICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nIHVwIHRvICR7cmV0cmllcyAqIDEwMDB9bXMgZm9yIGluc3RydW1lbnRhdGlvbiAnJHtJTlNUUlVNRU5UQVRJT05fVEFSR0VUfScgdG8gYmUgYXZhaWxhYmxlYCk7XG4gICAgbGV0IG91dHB1dDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbChyZXRyaWVzLCAxMDAwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG91dHB1dCA9IGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsncG0nLCAnbGlzdCcsICdpbnN0cnVtZW50YXRpb24nXSk7XG4gICAgICAgIGlmIChvdXRwdXQuaW5kZXhPZignQ291bGQgbm90IGFjY2VzcyB0aGUgUGFja2FnZSBNYW5hZ2VyJykgIT09IC0xKSB7XG4gICAgICAgICAgbGV0IGVyciA9IG5ldyBFcnJvcihgUHJvYmxlbSBydW5uaW5nIHBhY2thZ2UgbWFuYWdlcjogJHtvdXRwdXR9YCk7XG4gICAgICAgICAgb3V0cHV0ID0gbnVsbDsgLy8gcmVtb3ZlIG91dHB1dCwgc28gaXQgaXMgbm90IHByaW50ZWQgYmVsb3dcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0gZWxzZSBpZiAob3V0cHV0LmluZGV4T2YoSU5TVFJVTUVOVEFUSU9OX1RBUkdFVCkgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbnN0cnVtZW50YXRpb24gcHJvY2VzcyBmb3VuZC4gUmV0cnlpbmcuLi4nKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoYEluc3RydW1lbnRhdGlvbiAnJHtJTlNUUlVNRU5UQVRJT05fVEFSR0VUfScgYXZhaWxhYmxlYCk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihgVW5hYmxlIHRvIGZpbmQgaW5zdHJ1bWVudGF0aW9uIHRhcmdldCAnJHtJTlNUUlVNRU5UQVRJT05fVEFSR0VUfSc6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQXZhaWxhYmxlIHRhcmdldHM6Jyk7XG4gICAgICAgIGZvciAobGV0IGxpbmUgb2Ygb3V0cHV0LnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgICAgICR7bGluZS5yZXBsYWNlKCdpbnN0cnVtZW50YXRpb246JywgJycpfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXNzaW9uIChjYXBzKSB7XG4gICAgLy8ga2lsbCBhbnkgdWlhdXRvbWF0b3IgZXhpc3RpbmcgcHJvY2Vzc2VzXG4gICAgYXdhaXQgdGhpcy5raWxsVWlBdXRvbWF0b3JPbkRldmljZSgpO1xuXG4gICAgbG9nZ2VyLmluZm8oYFN0YXJ0aW5nIHVpYXV0b21hdG9yMiBzZXJ2ZXIgJHtzZXJ2ZXJWZXJzaW9ufWApO1xuXG4gICAgbG9nZ2VyLmluZm8oYFVzaW5nIFVJQXV0b21hdG9yMiBzZXJ2ZXIgZnJvbSAnJHthcGtQYXRofScgYW5kIHRlc3QgZnJvbSAnJHt0ZXN0QXBrUGF0aH0nYCk7XG5cbiAgICAvLyBsZXQgY21kID0gWydhbScsICdpbnN0cnVtZW50JywgJy13JyxcbiAgICAvLyAgICdpby5hcHBpdW0udWlhdXRvbWF0b3IyLnNlcnZlci50ZXN0L2FuZHJvaWQuc3VwcG9ydC50ZXN0LnJ1bm5lci5BbmRyb2lkSlVuaXRSdW5uZXInXTtcbiAgICAvLyB0aGlzLmFkYi5zaGVsbChjbWQpO1xuICAgIC8vIHVzaW5nIDNyZCBwYXJ0eSBtb2R1bGUgY2FsbGVkICdhZGJLaXQnIGZvciB0aW1lIGJlaW5nIGFzIHVzaW5nICdhcHBpdW0tYWRiJ1xuICAgIC8vIGZhY2luZyBJbGxlZ2FsU3RhdGVFeGNlcHRpb246IFVpQXV0b21hdGlvbiBub3QgY29ubmVjdGVkIGV4Y2VwdGlvblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLXVpYXV0b21hdG9yMi1kcml2ZXIvaXNzdWVzLzE5XG5cbiAgICBhd2FpdCB0aGlzLnN0YXJ0U2Vzc2lvblVzaW5nQWRiS2l0KGNhcHMuZGV2aWNlVURJRCk7XG5cbiAgICBsZXQgcmV0cmllcyA9IGdldFJldHJpZXMoJ1NlcnZlciBsYXVuY2gnLCBjYXBzLnVpYXV0b21hdG9yMlNlcnZlckxhdW5jaFRpbWVvdXQsIFNFUlZFUl9MQVVOQ0hfUkVUUklFUyk7XG5cbiAgICBsb2dnZXIuaW5mbyhgV2FpdGluZyB1cCB0byAke3JldHJpZXMgKiAxMDAwfW1zIGZvciBVaUF1dG9tYXRvcjIgdG8gYmUgb25saW5lLi4uYCk7XG4gICAgLy8gd2FpdCBmb3IgVWlBdXRvbWF0b3IyIHRvIGJlIG9ubGluZVxuICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwocmV0cmllcywgMTAwMCwgdGhpcy5qd3Byb3h5LmNvbW1hbmQuYmluZCh0aGlzLmp3cHJveHkpLCAnL3N0YXR1cycsICdHRVQnKTtcbiAgICBhd2FpdCB0aGlzLmp3cHJveHkuY29tbWFuZCgnL3Nlc3Npb24nLCAnUE9TVCcsIHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzfSk7XG4gIH1cblxuICBhc3luYyBzdGFydFNlc3Npb25Vc2luZ0FkYktpdCAoZGV2aWNlVURJRCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICBsZXQgY21kID0gJ2FtIGluc3RydW1lbnQgLXcnO1xuICAgIGlmICh0aGlzLmRpc2FibGVXaW5kb3dBbmltYXRpb24pIHtcbiAgICAgIGNtZCA9IGAke2NtZH0gLS1uby13aW5kb3ctYW5pbWF0aW9uYDtcbiAgICB9XG4gICAgY21kID0gYCR7Y21kfSAke0lOU1RSVU1FTlRBVElPTl9UQVJHRVR9YDtcbiAgICBsb2dnZXIuaW5mbyhgUnVubmluZyBjb21tYW5kOiAnYWRiIC1zICR7ZGV2aWNlVURJRH0gc2hlbGwgJHtjbWR9J2ApO1xuICAgIHRoaXMuY2xpZW50LnNoZWxsKGRldmljZVVESUQsIGNtZClcbiAgICAgIC50aGVuKGFkYmtpdC51dGlsLnJlYWRBbGwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuICAgICAgLnRoZW4oZnVuY3Rpb24gKG91dHB1dCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBvdXRwdXQudG9TdHJpbmcoKS5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgICBpZiAobGluZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgW1VJQXV0b21hdG9yMl0gJHtsaW5lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrc1xuICAgICAgICBsb2dnZXIuZXJyb3IoYFtVSUF1dG9tYXRvcjIgRXJyb3JdICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgRnVsbCBlcnJvcjogJHtlcnIuc3RhY2t9YCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnRGVsZXRpbmcgVWlBdXRvbWF0b3IyIHNlcnZlciBzZXNzaW9uJyk7XG4gICAgLy8gcmVseSBvbiBqd3Byb3h5J3MgaW50ZWxsaWdlbmNlIHRvIGtub3cgd2hhdCB3ZSdyZSB0YWxraW5nIGFib3V0IGFuZFxuICAgIC8vIGRlbGV0ZSB0aGUgY3VycmVudCBzZXNzaW9uXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuandwcm94eS5jb21tYW5kKCcvJywgJ0RFTEVURScpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oYERpZCBub3QgZ2V0IGNvbmZpcm1hdGlvbiBVaUF1dG9tYXRvcjIgZGVsZXRlU2Vzc2lvbiB3b3JrZWQ7IGAgK1xuICAgICAgICAgIGBFcnJvciB3YXM6ICR7ZXJyfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGtpbGxVaUF1dG9tYXRvck9uRGV2aWNlICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGlkcyA9IChhd2FpdCB0aGlzLmFkYi5nZXRQSURzQnlOYW1lKCd1aWF1dG9tYXRvcicpKS5tYXAoKHApID0+IGAke3B9YCk7XG4gICAgICBpZiAoIV8uaXNFbXB0eShwaWRzKSkge1xuICAgICAgICBjb25zdCBpc1Jvb3QgPSBhd2FpdCB0aGlzLmFkYi5yb290KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGIuc2hlbGwoWydraWxsJywgJy05JywgLi4ucGlkc10pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRiLnVucm9vdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLndhcm4oYFVuYWJsZSB0byBzdG9wIHVpYXV0b21hdG9yIHByb2Nlc3M6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWRiLmZvcmNlU3RvcCgnaW8uYXBwaXVtLnVpYXV0b21hdG9yMi5zZXJ2ZXInKTtcbiAgICB9IGNhdGNoIChpZ25vcmUpIHtcbiAgICAgIGxvZ2dlci5pbmZvKFwiVW5hYmxlIHRvIGtpbGwgdGhlIGlvLmFwcGl1bS51aWF1dG9tYXRvcjIuc2VydmVyIHByb2Nlc3MsIGFzc3VtaW5nIGl0IGlzIGFscmVhZHkga2lsbGVkXCIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVaUF1dG9tYXRvcjJTZXJ2ZXI7XG4iXSwiZmlsZSI6ImxpYi91aWF1dG9tYXRvcjIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
