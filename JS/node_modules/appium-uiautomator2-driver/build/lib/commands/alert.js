"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
commands.getAlertText = (0, _asyncToGenerator2.default)(function* () {
  return yield this.uiautomator2.jwproxy.command('/alert/text', 'GET', {});
});

commands.mobileAcceptAlert = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.uiautomator2.jwproxy.command('/alert/accept', 'POST', opts);
  });

  return function () {
    return _ref2.apply(this, arguments);
  };
}();

commands.postAcceptAlert = (0, _asyncToGenerator2.default)(function* () {
  return yield this.mobileAcceptAlert();
});

commands.mobileDismissAlert = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    return yield this.uiautomator2.jwproxy.command('/alert/dismiss', 'POST', opts);
  });

  return function () {
    return _ref4.apply(this, arguments);
  };
}();

commands.postDismissAlert = (0, _asyncToGenerator2.default)(function* () {
  return yield this.mobileDismissAlert();
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZ2V0QWxlcnRUZXh0IiwidWlhdXRvbWF0b3IyIiwiandwcm94eSIsImNvbW1hbmQiLCJtb2JpbGVBY2NlcHRBbGVydCIsIm9wdHMiLCJwb3N0QWNjZXB0QWxlcnQiLCJtb2JpbGVEaXNtaXNzQWxlcnQiLCJwb3N0RGlzbWlzc0FsZXJ0IiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBRixRQUFRLENBQUNHLFlBQVQsbUNBQXdCLGFBQWtCO0FBQ3hDLGVBQWEsS0FBS0MsWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLGFBQWxDLEVBQWlELEtBQWpELEVBQXdELEVBQXhELENBQWI7QUFDRCxDQUZEOztBQWtCQU4sUUFBUSxDQUFDTyxpQkFBVDtBQUFBLDhDQUE2QixXQUFnQkMsSUFBSSxHQUFHLEVBQXZCLEVBQTJCO0FBQ3RELGlCQUFhLEtBQUtKLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCQyxPQUExQixDQUFrQyxlQUFsQyxFQUFtRCxNQUFuRCxFQUEyREUsSUFBM0QsQ0FBYjtBQUNELEdBRkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSUFSLFFBQVEsQ0FBQ1MsZUFBVCxtQ0FBMkIsYUFBa0I7QUFDM0MsZUFBYSxLQUFLRixpQkFBTCxFQUFiO0FBQ0QsQ0FGRDs7QUFrQkFQLFFBQVEsQ0FBQ1Usa0JBQVQ7QUFBQSw4Q0FBOEIsV0FBZ0JGLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUN2RCxpQkFBYSxLQUFLSixZQUFMLENBQWtCQyxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBa0MsZ0JBQWxDLEVBQW9ELE1BQXBELEVBQTRERSxJQUE1RCxDQUFiO0FBQ0QsR0FGRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFJQVIsUUFBUSxDQUFDVyxnQkFBVCxtQ0FBNEIsYUFBa0I7QUFDNUMsZUFBYSxLQUFLRCxrQkFBTCxFQUFiO0FBQ0QsQ0FGRDtBQUlBRSxNQUFNLENBQUNDLE1BQVAsQ0FBY1gsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldEFsZXJ0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL2FsZXJ0L3RleHQnLCAnR0VUJywge30pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBBY2NlcHRBbGVydE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gYnV0dG9uTGFiZWwgLSBUaGUgbmFtZSBvZiB0aGUgYnV0dG9uIHRvIGNsaWNrIGluIG9yZGVyIHRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0IHRoZSBhbGVydC4gSWYgdGhlIG5hbWUgaXMgbm90IHByb3ZpZGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiB0aGUgc2NyaXB0IHdpbGwgdHJ5IHRvIGRldGVjdCB0aGUgYnV0dG9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseS5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7QWNjZXB0QWxlcnRPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtJbnZhbGlkRWxlbWVudFN0YXRlRXJyb3J9IElmIG5vIG1hdGNoaW5nIGJ1dHRvbiwgdGhhdCBjYW4gYWNjZXB0IHRoZSBhbGVydCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuIGJlIGZvdW5kXG4gKiBAdGhyb3dzIHtOb0FsZXJ0T3BlbkVycm9yfSBJZiBubyBhbGVydCBpcyBwcmVzZW50XG4gKi9cbmNvbW1hbmRzLm1vYmlsZUFjY2VwdEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYWxlcnQvYWNjZXB0JywgJ1BPU1QnLCBvcHRzKTtcbn07XG5cbmNvbW1hbmRzLnBvc3RBY2NlcHRBbGVydCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMubW9iaWxlQWNjZXB0QWxlcnQoKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRGlzbWlzc0FsZXJ0T3B0aW9uc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBidXR0b25MYWJlbCAtIFRoZSBuYW1lIG9mIHRoZSBidXR0b24gdG8gY2xpY2sgaW4gb3JkZXIgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNtaXNzIHRoZSBhbGVydC4gSWYgdGhlIG5hbWUgaXMgbm90IHByb3ZpZGVkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbiB0aGUgc2NyaXB0IHdpbGwgdHJ5IHRvIGRldGVjdCB0aGUgYnV0dG9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseS5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7RGlzbWlzc0FsZXJ0T3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7SW52YWxpZEVsZW1lbnRTdGF0ZUVycm9yfSBJZiBubyBtYXRjaGluZyBidXR0b24sIHRoYXQgY2FuIGRpc21pc3MgdGhlIGFsZXJ0LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW4gYmUgZm91bmRcbiAqIEB0aHJvd3Mge05vQWxlcnRPcGVuRXJyb3J9IElmIG5vIGFsZXJ0IGlzIHByZXNlbnRcbiAqL1xuY29tbWFuZHMubW9iaWxlRGlzbWlzc0FsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYWxlcnQvZGlzbWlzcycsICdQT1NUJywgb3B0cyk7XG59O1xuXG5jb21tYW5kcy5wb3N0RGlzbWlzc0FsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5tb2JpbGVEaXNtaXNzQWxlcnQoKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9hbGVydC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
