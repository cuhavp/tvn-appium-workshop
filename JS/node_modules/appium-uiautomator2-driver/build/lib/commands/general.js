"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

let extensions = {},
    commands = {},
    helpers = {};
commands.getPageSource = (0, _asyncToGenerator2.default)(function* () {
  return yield this.uiautomator2.jwproxy.command('/source', 'GET', {});
});

commands.doSendKeys = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (params) {
    yield this.uiautomator2.jwproxy.command('/keys', 'POST', params);
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

commands.keyevent = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (keycode, metastate) {
    _logger.default.debug(`Ignoring metastate ${metastate}`);

    yield this.adb.keyevent(keycode);
  });

  return function (_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}();

commands.back = (0, _asyncToGenerator2.default)(function* () {
  yield this.adb.keyevent(4);
});

commands.getStrings = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (language) {
    if (!language) {
      language = yield this.adb.getDeviceLanguage();

      _logger.default.info(`No language specified, returning strings for: ${language}`);
    }

    const preprocessStringsMap = function preprocessStringsMap(mapping) {
      const result = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _lodash.default.toPairs(mapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const _step$value = (0, _slicedToArray2.default)(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];

          result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    };

    if (this.apkStrings[language]) {
      return preprocessStringsMap(this.apkStrings[language]);
    }

    if (!this.opts.app && !this.opts.appPackage) {
      _logger.default.errorAndThrow("One of 'app' or 'appPackage' capabilities should must be specified");
    }

    let app = this.opts.app;
    const tmpRoot = yield _appiumSupport.tempDir.openDir();

    try {
      if (!app) {
        try {
          app = yield this.adb.pullApk(this.opts.appPackage, tmpRoot);
        } catch (err) {
          _logger.default.errorAndThrow(`Failed to pull an apk from '${this.opts.appPackage}'. Original error: ${err.message}`);
        }
      }

      if (!(yield _appiumSupport.fs.exists(app))) {
        _logger.default.errorAndThrow(`The app at '${app}' does not exist`);
      }

      try {
        const _ref6 = yield this.adb.extractStringsFromApk(app, language, tmpRoot),
              apkStrings = _ref6.apkStrings;

        this.apkStrings[language] = apkStrings;
        return preprocessStringsMap(apkStrings);
      } catch (err) {
        _logger.default.errorAndThrow(`Cannot extract strings from '${app}'. Original error: ${err.message}`);
      }
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }
  });

  return function (_x4) {
    return _ref5.apply(this, arguments);
  };
}();

commands.getWindowSize = (0, _asyncToGenerator2.default)(function* () {
  return yield this.uiautomator2.jwproxy.command('/window/current/size', 'GET', {});
});
commands.getWindowRect = (0, _asyncToGenerator2.default)(function* () {
  const _ref9 = yield this.getWindowSize(),
        width = _ref9.width,
        height = _ref9.height;

  return {
    width,
    height,
    x: 0,
    y: 0
  };
});

extensions.executeMobile = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (mobileCommand, opts = {}) {
    const mobileCommandsMapping = {
      shell: 'mobileShell',
      scrollBackTo: 'mobileScrollBackTo',
      viewportScreenshot: 'mobileViewportScreenshot',
      deepLink: 'mobileDeepLink',
      startLogsBroadcast: 'mobileStartLogsBroadcast',
      stopLogsBroadcast: 'mobileStopLogsBroadcast',
      acceptAlert: 'mobileAcceptAlert',
      dismissAlert: 'mobileDismissAlert',
      batteryInfo: 'mobileGetBatteryInfo',
      deviceInfo: 'mobileGetDeviceInfo',
      performEditorAction: 'mobilePerformEditorAction'
    };

    if (!_lodash.default.has(mobileCommandsMapping, mobileCommand)) {
      throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command "${mobileCommand}". ` + `Only ${_lodash.default.keys(mobileCommandsMapping)} commands are supported.`);
    }

    return yield this[mobileCommandsMapping[mobileCommand]](opts);
  });

  return function (_x5) {
    return _ref10.apply(this, arguments);
  };
}();

commands.mobileScrollBackTo = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (opts) {
    const elementId = opts.elementId,
          elementToId = opts.elementToId;
    return yield this.uiautomator2.jwproxy.command(`/appium/element/${elementId}/scroll_to/${elementToId}`, 'POST', {});
  });

  return function (_x6) {
    return _ref11.apply(this, arguments);
  };
}();

commands.mobileViewportScreenshot = (0, _asyncToGenerator2.default)(function* () {
  return yield this.getViewportScreenshot();
});

commands.setUrl = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (url) {
    yield this.adb.startUri(url, this.opts.appPackage);
  });

  return function (_x7) {
    return _ref13.apply(this, arguments);
  };
}();

commands.mobileDeepLink = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (opts = {}) {
    const url = opts.url,
          pkg = opts.package;
    return yield this.adb.startUri(url, pkg);
  });

  return function () {
    return _ref14.apply(this, arguments);
  };
}();

commands.openNotifications = (0, _asyncToGenerator2.default)(function* () {
  return yield this.uiautomator2.jwproxy.command('/appium/device/open_notifications', 'POST', {});
});

commands.updateSettings = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (settings) {
    let driverOnlySettings = {};
    let serverSettings = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _lodash.default.toPairs(settings)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
            setting = _step2$value[0],
            value = _step2$value[1];

        if (_appiumBaseDriver.BASEDRIVER_HANDLED_SETTINGS.includes(setting)) {
          driverOnlySettings[setting] = value;
        } else {
          serverSettings[setting] = value;
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (!_lodash.default.isEmpty(driverOnlySettings)) {
      _logger.default.info(`Found some settings designed to be handled by BaseDriver: ` + `${JSON.stringify(_lodash.default.keys(driverOnlySettings))}. Not ` + `sending these on to the UiAutomator2 server and instead ` + `setting directly on the driver`);

      yield this.settings.update(driverOnlySettings);
    }

    if (!_lodash.default.isEmpty(serverSettings)) {
      _logger.default.info('Forwarding the following settings to the UiAutomator2 server: ' + JSON.stringify(_lodash.default.keys(serverSettings)));

      yield this.uiautomator2.jwproxy.command('/appium/settings', 'POST', {
        settings: serverSettings
      });
    }
  });

  return function (_x8) {
    return _ref16.apply(this, arguments);
  };
}();

commands.getSettings = (0, _asyncToGenerator2.default)(function* () {
  const driverOnlySettings = this.settings.getSettings();
  const serverSettings = yield this.uiautomator2.jwproxy.command('/appium/settings', 'GET');
  return (0, _objectSpread2.default)({}, driverOnlySettings, serverSettings);
});

helpers.wrapBootstrapDisconnect = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (wrapped) {
    yield wrapped();
  });

  return function (_x9) {
    return _ref18.apply(this, arguments);
  };
}();

helpers.suspendChromedriverProxy = function () {
  this.chromedriver = null;
  this.proxyReqRes = this.uiautomator2.proxyReqRes.bind(this.uiautomator2);
  this.jwpProxyActive = true;
};

commands.mobileGetDeviceInfo = (0, _asyncToGenerator2.default)(function* () {
  return yield this.uiautomator2.jwproxy.command('/appium/device/info', 'GET');
});
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
