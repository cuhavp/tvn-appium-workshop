"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    extensions = {};

commands.doPerformMultiAction = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (elementId, states) {
    let opts;

    if (elementId) {
      opts = {
        elementId,
        actions: states
      };
      return yield this.uiautomator2.jwproxy.command('/touch/multi/perform', 'POST', opts);
    } else {
      opts = {
        actions: states
      };
      return yield this.uiautomator2.jwproxy.command('/touch/multi/perform', 'POST', opts);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.performActions = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (actions) {
    _logger.default.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);

    const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
      parameters: {
        pointerType: 'touch'
      }
    } : {}));

    _logger.default.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);

    return yield this.uiautomator2.jwproxy.command('/actions', 'POST', {
      actions
    });
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90b3VjaC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImV4dGVuc2lvbnMiLCJkb1BlcmZvcm1NdWx0aUFjdGlvbiIsImVsZW1lbnRJZCIsInN0YXRlcyIsIm9wdHMiLCJhY3Rpb25zIiwidWlhdXRvbWF0b3IyIiwiandwcm94eSIsImNvbW1hbmQiLCJwZXJmb3JtQWN0aW9ucyIsImxvZyIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsInByZXByb2Nlc3NlZEFjdGlvbnMiLCJtYXAiLCJhY3Rpb24iLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlIiwicGFyYW1ldGVycyIsInBvaW50ZXJUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLFVBQVUsR0FBRyxFQUFoQzs7QUFFQUQsUUFBUSxDQUFDRSxvQkFBVDtBQUFBLDZDQUFnQyxXQUFnQkMsU0FBaEIsRUFBMkJDLE1BQTNCLEVBQW1DO0FBQ2pFLFFBQUlDLElBQUo7O0FBQ0EsUUFBSUYsU0FBSixFQUFlO0FBQ2JFLE1BQUFBLElBQUksR0FBRztBQUNMRixRQUFBQSxTQURLO0FBRUxHLFFBQUFBLE9BQU8sRUFBRUY7QUFGSixPQUFQO0FBS0EsbUJBQWEsS0FBS0csWUFBTCxDQUFrQkMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQWtDLHNCQUFsQyxFQUEwRCxNQUExRCxFQUFrRUosSUFBbEUsQ0FBYjtBQUNELEtBUEQsTUFPTztBQUNMQSxNQUFBQSxJQUFJLEdBQUc7QUFDTEMsUUFBQUEsT0FBTyxFQUFFRjtBQURKLE9BQVA7QUFHQSxtQkFBYSxLQUFLRyxZQUFMLENBQWtCQyxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBa0Msc0JBQWxDLEVBQTBELE1BQTFELEVBQWtFSixJQUFsRSxDQUFiO0FBQ0Q7QUFDRixHQWZEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWlCQUwsUUFBUSxDQUFDVSxjQUFUO0FBQUEsOENBQTBCLFdBQWdCSixPQUFoQixFQUF5QjtBQUNqREssb0JBQUlDLEtBQUosQ0FBVyx1Q0FBc0NDLElBQUksQ0FBQ0MsU0FBTCxDQUFlUixPQUFmLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLENBQW9DLEVBQXJGOztBQUVBLFVBQU1TLG1CQUFtQixHQUFHVCxPQUFPLENBQ2hDVSxHQUR5QixDQUNwQkMsTUFBRCxJQUFZQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCRixNQUFsQixFQUEwQkEsTUFBTSxDQUFDRyxJQUFQLEtBQWdCLFNBQWhCLEdBQTRCO0FBQ3JFQyxNQUFBQSxVQUFVLEVBQUU7QUFDVkMsUUFBQUEsV0FBVyxFQUFFO0FBREg7QUFEeUQsS0FBNUIsR0FJdkMsRUFKYSxDQURTLENBQTVCOztBQU1BWCxvQkFBSUMsS0FBSixDQUFXLHlCQUF3QkMsSUFBSSxDQUFDQyxTQUFMLENBQWVDLG1CQUFmLEVBQW9DLElBQXBDLEVBQTBDLElBQTFDLENBQWdELEVBQW5GOztBQUNBLGlCQUFhLEtBQUtSLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCQyxPQUExQixDQUFrQyxVQUFsQyxFQUE4QyxNQUE5QyxFQUFzRDtBQUFDSCxNQUFBQTtBQUFELEtBQXRELENBQWI7QUFDRCxHQVhEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWFBWSxNQUFNLENBQUNDLE1BQVAsQ0FBY2xCLFVBQWQsRUFBMEJELFFBQTFCO2VBQ2VDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmRvUGVyZm9ybU11bHRpQWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGVsZW1lbnRJZCwgc3RhdGVzKSB7XG4gIGxldCBvcHRzO1xuICBpZiAoZWxlbWVudElkKSB7XG4gICAgb3B0cyA9IHtcbiAgICAgIGVsZW1lbnRJZCxcbiAgICAgIGFjdGlvbnM6IHN0YXRlc1xuICAgIH07XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvdG91Y2gvbXVsdGkvcGVyZm9ybScsICdQT1NUJywgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgb3B0cyA9IHtcbiAgICAgIGFjdGlvbnM6IHN0YXRlc1xuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlhdXRvbWF0b3IyLmp3cHJveHkuY29tbWFuZCgnL3RvdWNoL211bHRpL3BlcmZvcm0nLCAnUE9TVCcsIG9wdHMpO1xuICB9XG59O1xuXG5jb21tYW5kcy5wZXJmb3JtQWN0aW9ucyA9IGFzeW5jIGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgdGhlIGZvbGxvd2luZyBXM0MgYWN0aW9uczogJHtKU09OLnN0cmluZ2lmeShhY3Rpb25zLCBudWxsLCAnICAnKX1gKTtcbiAgLy8gVGhpcyBpcyBtYW5kYXRvcnksIHNpbmNlIFNlbGVuaXVtIEFQSSB1c2VzIE1PVVNFIGFzIHRoZSBkZWZhdWx0IHBvaW50ZXIgdHlwZVxuICBjb25zdCBwcmVwcm9jZXNzZWRBY3Rpb25zID0gYWN0aW9uc1xuICAgIC5tYXAoKGFjdGlvbikgPT4gT2JqZWN0LmFzc2lnbih7fSwgYWN0aW9uLCBhY3Rpb24udHlwZSA9PT0gJ3BvaW50ZXInID8ge1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBwb2ludGVyVHlwZTogJ3RvdWNoJ1xuICAgICAgfVxuICAgIH0gOiB7fSkpO1xuICBsb2cuZGVidWcoYFByZXByb2Nlc3NlZCBhY3Rpb25zOiAke0pTT04uc3RyaW5naWZ5KHByZXByb2Nlc3NlZEFjdGlvbnMsIG51bGwsICcgICcpfWApO1xuICByZXR1cm4gYXdhaXQgdGhpcy51aWF1dG9tYXRvcjIuandwcm94eS5jb21tYW5kKCcvYWN0aW9ucycsICdQT1NUJywge2FjdGlvbnN9KTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMpO1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3RvdWNoLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
