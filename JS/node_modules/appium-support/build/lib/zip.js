"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractAllTo = extractAllTo;
exports.readEntries = readEntries;
exports.toInMemoryZip = toInMemoryZip;
exports._extractEntryTo = _extractEntryTo;
exports.assertValidZip = assertValidZip;
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _extractZip = _interopRequireDefault(require("extract-zip"));

var _yauzl = _interopRequireDefault(require("yauzl"));

var _archiver = _interopRequireDefault(require("archiver"));

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _mkdirp = require("../lib/mkdirp");

var _stream = _interopRequireDefault(require("stream"));

var _fs2 = _interopRequireDefault(require("./fs"));

const extract = _bluebird.default.promisify(_extractZip.default);

const open = _bluebird.default.promisify(_yauzl.default.open);

const ZIP_MAGIC = 'PK';

function extractAllTo(_x, _x2) {
  return _extractAllTo.apply(this, arguments);
}

function _extractAllTo() {
  _extractAllTo = (0, _asyncToGenerator2.default)(function* (zipFilepath, destDir) {
    return yield extract(zipFilepath, {
      dir: destDir
    });
  });
  return _extractAllTo.apply(this, arguments);
}

function _extractEntryTo(_x3, _x4, _x5) {
  return _extractEntryTo2.apply(this, arguments);
}

function _extractEntryTo2() {
  _extractEntryTo2 = (0, _asyncToGenerator2.default)(function* (zipfile, entry, destDir) {
    yield (0, _mkdirp.mkdirp)(_path.default.resolve(destDir, _path.default.dirname(entry.fileName)));
    const writeStream = (0, _fs.createWriteStream)(_path.default.resolve(destDir, entry.fileName), {
      flags: 'w'
    });
    const writeStreamPromise = new _bluebird.default((resolve, reject) => {
      writeStream.once('finish', resolve);
      writeStream.once('error', reject);
    });
    const zipReadStream = yield new _bluebird.default((resolve, reject) => {
      zipfile.openReadStream(entry, (err, readStream) => err ? reject(err) : resolve(readStream));
    });
    const zipReadStreamPromise = new _bluebird.default((resolve, reject) => {
      zipReadStream.once('end', resolve);
      zipReadStream.once('error', reject);
    });
    zipReadStream.pipe(writeStream);
    return yield _bluebird.default.all([zipReadStreamPromise, writeStreamPromise]);
  });
  return _extractEntryTo2.apply(this, arguments);
}

function readEntries(_x6, _x7) {
  return _readEntries.apply(this, arguments);
}

function _readEntries() {
  _readEntries = (0, _asyncToGenerator2.default)(function* (zipFilepath, onEntry) {
    const zipfile = yield open(zipFilepath, {
      lazyEntries: true
    });
    const zipReadStreamPromise = new _bluebird.default((resolve, reject) => {
      zipfile.once('end', resolve);
      zipfile.once('error', reject);
      zipfile.on('entry', function () {
        var _ref = (0, _asyncToGenerator2.default)(function* (entry) {
          const res = yield onEntry({
            entry,
            extractEntryTo: destDir => _extractEntryTo(zipfile, entry, destDir)
          });

          if (res === false) {
            return zipfile.emit('end');
          }

          zipfile.readEntry();
        });

        return function (_x10) {
          return _ref.apply(this, arguments);
        };
      }());
    });
    zipfile.readEntry();
    return yield zipReadStreamPromise;
  });
  return _readEntries.apply(this, arguments);
}

function toInMemoryZip(_x8) {
  return _toInMemoryZip.apply(this, arguments);
}

function _toInMemoryZip() {
  _toInMemoryZip = (0, _asyncToGenerator2.default)(function* (srcDir) {
    const zipBufferArr = [];
    const zipWriteStream = new _stream.default.Writable({
      write: (buffer, encoding, next) => {
        zipBufferArr.push(buffer);
        next();
      }
    });
    const zipWriteStreamPromise = new _bluebird.default(resolve => {
      zipWriteStream.once('finish', resolve);
    });
    const archive = (0, _archiver.default)('zip', {
      zlib: {
        level: 9
      }
    });
    const archiveStreamPromise = new _bluebird.default((resolve, reject) => {
      archive.once('finish', resolve);
      archive.once('error', errStr => reject(new Error(`Failed to zip directory ${srcDir}: ${errStr}`)));
    });
    archive.directory(srcDir, false);
    archive.pipe(zipWriteStream);
    archive.finalize();
    yield _bluebird.default.all([archiveStreamPromise, zipWriteStreamPromise]);
    return Buffer.concat(zipBufferArr);
  });
  return _toInMemoryZip.apply(this, arguments);
}

function assertValidZip(_x9) {
  return _assertValidZip.apply(this, arguments);
}

function _assertValidZip() {
  _assertValidZip = (0, _asyncToGenerator2.default)(function* (filePath) {
    if (!(yield _fs2.default.exists(filePath))) {
      throw new Error(`The file at '${filePath}' does not exist`);
    }

    const _ref2 = yield _fs2.default.stat(filePath),
          size = _ref2.size;

    if (size < 4) {
      throw new Error(`The file at '${filePath}' is too small to be a ZIP archive`);
    }

    const fd = yield _fs2.default.open(filePath, 'r');

    try {
      const buffer = Buffer.alloc(ZIP_MAGIC.length);
      yield _fs2.default.read(fd, buffer, 0, ZIP_MAGIC.length, 0);
      const signature = buffer.toString('ascii');

      if (signature !== ZIP_MAGIC) {
        throw new Error(`The file signature '${signature}' of '${filePath}' ` + `is not equal to the expected ZIP archive signature '${ZIP_MAGIC}'`);
      }

      return true;
    } finally {
      yield _fs2.default.close(fd);
    }
  });
  return _assertValidZip.apply(this, arguments);
}

var _default = {
  extractAllTo,
  readEntries,
  toInMemoryZip,
  assertValidZip
};
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
