"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  hasAccess(path) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this.access(path, fs.F_OK | fs.R_OK);
      } catch (err) {
        return false;
      }

      return true;
    })();
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  mkdir(dirName) {
    return (0, _asyncToGenerator2.default)(function* () {
      let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

      try {
        yield _mkdir(dirName);
      } catch (err) {
        if (err && err.code !== "EEXIST") {
          throw err;
        }
      }
    })();
  },

  copyFile: _bluebird.default.promisify(_ncp.default),

  md5(filePath) {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield md5(filePath);
    })();
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  hash(filePath, algorithm = 'sha1') {
    return (0, _asyncToGenerator2.default)(function* () {
      return yield new _bluebird.default((resolve, reject) => {
        const fileHash = _crypto.default.createHash(algorithm);

        const readStream = _fs2.default.createReadStream(filePath);

        readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
        readStream.on('data', chunk => fileHash.update(chunk));
        readStream.on('end', () => resolve(fileHash.digest('hex')));
      });
    })();
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (var _i = 0; _i < simples.length; _i++) {
  let s = simples[_i];
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIkZfT0siLCJSX09LIiwiZXJyIiwiZXhpc3RzIiwicmltcmFmIiwibWtkaXIiLCJkaXJOYW1lIiwiX21rZGlyIiwiX2ZzIiwiY29kZSIsImNvcHlGaWxlIiwibmNwIiwiZmlsZVBhdGgiLCJtdiIsIndoaWNoIiwiZ2xvYiIsImhhc2giLCJhbGdvcml0aG0iLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZUhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJvbiIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJjaHVuayIsInVwZGF0ZSIsImRpZ2VzdCIsInNpbXBsZXMiLCJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLEdBQUcsR0FBR0Msa0JBQUVDLFNBQUYsQ0FBWUMsZ0JBQVosQ0FBWjs7QUFFQSxJQUFJQyxFQUFFLEdBQUc7QUFDREMsRUFBQUEsU0FBTixDQUFpQkMsSUFBakIsRUFBdUI7QUFBQTs7QUFBQTtBQUNyQixVQUFJO0FBQ0YsY0FBTSxLQUFJLENBQUNDLE1BQUwsQ0FBWUQsSUFBWixFQUFrQkYsRUFBRSxDQUFDSSxJQUFILEdBQVVKLEVBQUUsQ0FBQ0ssSUFBL0IsQ0FBTjtBQUNELE9BRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixlQUFPLEtBQVA7QUFDRDs7QUFDRCxhQUFPLElBQVA7QUFOcUI7QUFPdEIsR0FSTTs7QUFTUEMsRUFBQUEsTUFBTSxDQUFFTCxJQUFGLEVBQVE7QUFBRSxXQUFPLEtBQUtELFNBQUwsQ0FBZUMsSUFBZixDQUFQO0FBQThCLEdBVHZDOztBQVVQTSxFQUFBQSxNQUFNLEVBQUVYLGtCQUFFQyxTQUFGLENBQVlVLGVBQVosQ0FWRDs7QUFXREMsRUFBQUEsS0FBTixDQUFhQyxPQUFiLEVBQXNCO0FBQUE7QUFDcEIsVUFBSUMsTUFBTSxHQUFHZCxrQkFBRUMsU0FBRixDQUFZYyxhQUFJSCxLQUFoQixDQUFiOztBQUNBLFVBQUk7QUFDRixjQUFNRSxNQUFNLENBQUNELE9BQUQsQ0FBWjtBQUNELE9BRkQsQ0FFRSxPQUFPSixHQUFQLEVBQVk7QUFDWixZQUFJQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ08sSUFBSixLQUFhLFFBQXhCLEVBQWtDO0FBQ2hDLGdCQUFNUCxHQUFOO0FBQ0Q7QUFDRjtBQVJtQjtBQVNyQixHQXBCTTs7QUFxQlBRLEVBQUFBLFFBQVEsRUFBRWpCLGtCQUFFQyxTQUFGLENBQVlpQixZQUFaLENBckJIOztBQXNCRG5CLEVBQUFBLEdBQU4sQ0FBV29CLFFBQVgsRUFBcUI7QUFBQTtBQUNuQixtQkFBYXBCLEdBQUcsQ0FBQ29CLFFBQUQsQ0FBaEI7QUFEbUI7QUFFcEIsR0F4Qk07O0FBeUJQQyxFQUFBQSxFQUFFLEVBQUVwQixrQkFBRUMsU0FBRixDQUFZbUIsV0FBWixDQXpCRztBQTBCUEMsRUFBQUEsS0FBSyxFQUFFckIsa0JBQUVDLFNBQUYsQ0FBWW9CLGNBQVosQ0ExQkE7QUEyQlBDLEVBQUFBLElBQUksRUFBRXRCLGtCQUFFQyxTQUFGLENBQVlxQixhQUFaLENBM0JDOztBQTRCREMsRUFBQUEsSUFBTixDQUFZSixRQUFaLEVBQXNCSyxTQUFTLEdBQUcsTUFBbEMsRUFBMEM7QUFBQTtBQUN4QyxtQkFBYSxJQUFJeEIsaUJBQUosQ0FBTSxDQUFDeUIsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLGNBQU1DLFFBQVEsR0FBR0MsZ0JBQU9DLFVBQVAsQ0FBa0JMLFNBQWxCLENBQWpCOztBQUNBLGNBQU1NLFVBQVUsR0FBR2YsYUFBSWdCLGdCQUFKLENBQXFCWixRQUFyQixDQUFuQjs7QUFDQVcsUUFBQUEsVUFBVSxDQUFDRSxFQUFYLENBQWMsT0FBZCxFQUF3QkMsQ0FBRCxJQUFPUCxNQUFNLENBQ2xDLElBQUlRLEtBQUosQ0FBVyxvQkFBbUJWLFNBQVUsY0FBYUwsUUFBUyxzQkFBcUJjLENBQUMsQ0FBQ0UsT0FBUSxFQUE3RixDQURrQyxDQUFwQztBQUVBTCxRQUFBQSxVQUFVLENBQUNFLEVBQVgsQ0FBYyxNQUFkLEVBQXVCSSxLQUFELElBQVdULFFBQVEsQ0FBQ1UsTUFBVCxDQUFnQkQsS0FBaEIsQ0FBakM7QUFDQU4sUUFBQUEsVUFBVSxDQUFDRSxFQUFYLENBQWMsS0FBZCxFQUFxQixNQUFNUCxPQUFPLENBQUNFLFFBQVEsQ0FBQ1csTUFBVCxDQUFnQixLQUFoQixDQUFELENBQWxDO0FBQ0QsT0FQWSxDQUFiO0FBRHdDO0FBU3pDOztBQXJDTSxDQUFUOztBQXdDQSxNQUFNQyxPQUFPLEdBQUcsQ0FDZCxNQURjLEVBQ04sT0FETSxFQUNHLFFBREgsRUFDYSxVQURiLEVBQ3lCLFdBRHpCLEVBQ3NDLE9BRHRDLEVBQytDLE1BRC9DLEVBRWQsVUFGYyxFQUVGLE9BRkUsRUFFTyxRQUZQLEVBRWlCLFNBRmpCLEVBRTRCLE1BRjVCLEVBRW9DLFFBRnBDLEVBRThDLE9BRjlDLENBQWhCOztBQUtBLHNCQUFjQSxPQUFkLGVBQXVCO0FBQWxCLE1BQUlDLENBQUMsR0FBSUQsT0FBSixJQUFMO0FBQ0hwQyxFQUFBQSxFQUFFLENBQUNxQyxDQUFELENBQUYsR0FBUXhDLGtCQUFFQyxTQUFGLENBQVljLGFBQUl5QixDQUFKLENBQVosQ0FBUjtBQUNEOztlQUdjckMsRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGpzaGludCBpZ25vcmU6IHN0YXJ0XG5pbXBvcnQgX2ZzIGZyb20gJ2ZzJztcbmltcG9ydCByaW1yYWYgZnJvbSAncmltcmFmJztcbmltcG9ydCBtZDVmaWxlIGZyb20gJ21kNS1maWxlJztcbmltcG9ydCBuY3AgZnJvbSAnbmNwJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBtdiBmcm9tICdtdic7XG5pbXBvcnQgd2hpY2ggZnJvbSAnd2hpY2gnO1xuaW1wb3J0IGdsb2IgZnJvbSAnZ2xvYic7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cblxuY29uc3QgbWQ1ID0gQi5wcm9taXNpZnkobWQ1ZmlsZSk7XG5cbmxldCBmcyA9IHtcbiAgYXN5bmMgaGFzQWNjZXNzIChwYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYWNjZXNzKHBhdGgsIGZzLkZfT0sgfCBmcy5SX09LKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGV4aXN0cyAocGF0aCkgeyByZXR1cm4gdGhpcy5oYXNBY2Nlc3MocGF0aCk7IH0sXG4gIHJpbXJhZjogQi5wcm9taXNpZnkocmltcmFmKSxcbiAgYXN5bmMgbWtkaXIgKGRpck5hbWUpIHtcbiAgICBsZXQgX21rZGlyID0gQi5wcm9taXNpZnkoX2ZzLm1rZGlyKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgX21rZGlyKGRpck5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gXCJFRVhJU1RcIikge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb3B5RmlsZTogQi5wcm9taXNpZnkobmNwKSxcbiAgYXN5bmMgbWQ1IChmaWxlUGF0aCkge1xuICAgIHJldHVybiBhd2FpdCBtZDUoZmlsZVBhdGgpO1xuICB9LFxuICBtdjogQi5wcm9taXNpZnkobXYpLFxuICB3aGljaDogQi5wcm9taXNpZnkod2hpY2gpLFxuICBnbG9iOiBCLnByb21pc2lmeShnbG9iKSxcbiAgYXN5bmMgaGFzaCAoZmlsZVBhdGgsIGFsZ29yaXRobSA9ICdzaGExJykge1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBmaWxlSGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKGFsZ29yaXRobSk7XG4gICAgICBjb25zdCByZWFkU3RyZWFtID0gX2ZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZXJyb3InLCAoZSkgPT4gcmVqZWN0KFxuICAgICAgICBuZXcgRXJyb3IoYENhbm5vdCBjYWxjdWxhdGUgJHthbGdvcml0aG19IGhhc2ggZm9yICcke2ZpbGVQYXRofScuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKSkpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4gZmlsZUhhc2gudXBkYXRlKGNodW5rKSk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKGZpbGVIYXNoLmRpZ2VzdCgnaGV4JykpKTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbmNvbnN0IHNpbXBsZXMgPSBbXG4gICdvcGVuJywgJ2Nsb3NlJywgJ2FjY2VzcycsICdyZWFkRmlsZScsICd3cml0ZUZpbGUnLCAnd3JpdGUnLCAncmVhZCcsXG4gICdyZWFkbGluaycsICdjaG1vZCcsICd1bmxpbmsnLCAncmVhZGRpcicsICdzdGF0JywgJ3JlbmFtZScsICdsc3RhdCcsXG5dO1xuXG5mb3IgKGxldCBzIG9mIHNpbXBsZXMpIHtcbiAgZnNbc10gPSBCLnByb21pc2lmeShfZnNbc10pO1xufVxuXG5leHBvcnQgeyBmcyB9O1xuZXhwb3J0IGRlZmF1bHQgZnM7XG4iXSwiZmlsZSI6ImxpYi9mcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
