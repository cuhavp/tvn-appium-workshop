"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _helpers = require("../../lib/basedriver/helpers");

var _chai = _interopRequireDefault(require("chai"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _path = _interopRequireDefault(require("path"));

var _sinon = _interopRequireDefault(require("sinon"));

var _appiumSupport = require("appium-support");

var _mockFs = _interopRequireDefault(require("mock-fs"));

_chai.default.use(_chaiAsPromised.default);

const should = _chai.default.should();

describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _helpers.isPackageOrBundle)('io.appium.testapp').should.be.true;
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _helpers.isPackageOrBundle)('foo').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.app').should.be.false;
      (0, _helpers.isPackageOrBundle)('/path/to/an.apk').should.be.false;
    });
  });
  describe('#unzipFile', function () {
    let mockDir = 'path/to/mock/dir';
    before((0, _asyncToGenerator2.default)(function* () {
      (0, _mockFs.default)({
        [mockDir]: {}
      });
      const fakeIOSAppZip = 'UEsDBBQACAAIABF8/EYAAAAAAAAAAAAAAAAOABAARmFrZUlPU0FwcC5hcHBVWAwALwO4VQIDuFX1ARQAK8nILFYAorz8EoWi1MScnEqFxDyFxIICLgBQSwcIR93jPhoAAAAaAAAAUEsBAhUDFAAIAAgAEXz8Rkfd4z4aAAAAGgAAAA4ADAAAAAAAAAAAQKSBAAAAAEZha2VJT1NBcHAuYXBwVVgIAC8DuFUCA7hVUEsFBgAAAAABAAEASAAAAGYAAAAAAA==';
      yield _appiumSupport.fs.writeFile(_path.default.resolve(mockDir, 'FakeIOSApp.app.zip'), fakeIOSAppZip, 'base64');
    }));
    after(function () {
      _mockFs.default.restore();
    });
    it('should unzip a .zip file (force isWindows to be true so we can test the internal zip library)', (0, _asyncToGenerator2.default)(function* () {
      const forceWindows = _sinon.default.stub(_appiumSupport.system, 'isWindows').returns(true);

      yield (0, _helpers.unzipFile)(_path.default.resolve(mockDir, 'FakeIOSApp.app.zip'));
      yield _appiumSupport.fs.readFile(_path.default.resolve(mockDir, 'FakeIOSApp.app'), 'utf8').should.eventually.deep.equal('this is not really an app\n');
      forceWindows.restore();
    }));
  });
  describe('#renameKey', function () {
    it('should translate key in an object', function () {
      (0, _helpers.renameKey)({
        'foo': 'hello world'
      }, 'foo', 'bar').should.eql({
        'bar': 'hello world'
      });
    });
    it('should translate key in an object within an object', function () {
      (0, _helpers.renameKey)({
        'key': {
          'foo': 'hello world'
        }
      }, 'foo', 'bar').should.eql({
        'key': {
          'bar': 'hello world'
        }
      });
    });
    it('should translate key in an object with an array', function () {
      (0, _helpers.renameKey)([{
        'key': {
          'foo': 'hello world'
        }
      }, {
        'foo': 'HELLO WORLD'
      }], 'foo', 'bar').should.eql([{
        'key': {
          'bar': 'hello world'
        }
      }, {
        'bar': 'HELLO WORLD'
      }]);
    });
    it('should not do anything to primitives', function () {
      [0, 1, -1, true, false, null, undefined, "", "Hello World"].forEach(item => {
        should.equal((0, _helpers.renameKey)(item), item);
      });
    });
    it('should rename keys on big complex objects', function () {
      const input = [{
        'foo': 'bar'
      }, {
        hello: {
          world: {
            'foo': 'BAR'
          }
        },
        foo: 'bahr'
      }, 'foo', null, 0];
      const expectedOutput = [{
        'FOO': 'bar'
      }, {
        hello: {
          world: {
            'FOO': 'BAR'
          }
        },
        FOO: 'bahr'
      }, 'foo', null, 0];
      (0, _helpers.renameKey)(input, 'foo', 'FOO').should.deep.equal(expectedOutput);
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9oZWxwZXJzLXNwZWNzLmpzIl0sIm5hbWVzIjpbImNoYWkiLCJ1c2UiLCJjaGFpQXNQcm9taXNlZCIsInNob3VsZCIsImRlc2NyaWJlIiwiaXQiLCJiZSIsInRydWUiLCJmYWxzZSIsIm1vY2tEaXIiLCJiZWZvcmUiLCJmYWtlSU9TQXBwWmlwIiwiZnMiLCJ3cml0ZUZpbGUiLCJwYXRoIiwicmVzb2x2ZSIsImFmdGVyIiwibW9ja0ZTIiwicmVzdG9yZSIsImZvcmNlV2luZG93cyIsInNpbm9uIiwic3R1YiIsInN5c3RlbSIsInJldHVybnMiLCJyZWFkRmlsZSIsImV2ZW50dWFsbHkiLCJkZWVwIiwiZXF1YWwiLCJlcWwiLCJ1bmRlZmluZWQiLCJmb3JFYWNoIiwiaXRlbSIsImlucHV0IiwiaGVsbG8iLCJ3b3JsZCIsImZvbyIsImV4cGVjdGVkT3V0cHV0IiwiRk9PIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsY0FBS0MsR0FBTCxDQUFTQyx1QkFBVDs7QUFDQSxNQUFNQyxNQUFNLEdBQUdILGNBQUtHLE1BQUwsRUFBZjs7QUFFQUMsUUFBUSxDQUFDLFNBQUQsRUFBWSxZQUFZO0FBQzlCQSxFQUFBQSxRQUFRLENBQUMsb0JBQUQsRUFBdUIsWUFBWTtBQUN6Q0MsSUFBQUEsRUFBRSxDQUFDLG9DQUFELEVBQXVDLFlBQVk7QUFDbkQsc0NBQWtCLG1CQUFsQixFQUF1Q0YsTUFBdkMsQ0FBOENHLEVBQTlDLENBQWlEQyxJQUFqRDtBQUNELEtBRkMsQ0FBRjtBQUdBRixJQUFBQSxFQUFFLENBQUMsK0NBQUQsRUFBa0QsWUFBWTtBQUM5RCxzQ0FBa0IsS0FBbEIsRUFBeUJGLE1BQXpCLENBQWdDRyxFQUFoQyxDQUFtQ0UsS0FBbkM7QUFDQSxzQ0FBa0IsaUJBQWxCLEVBQXFDTCxNQUFyQyxDQUE0Q0csRUFBNUMsQ0FBK0NFLEtBQS9DO0FBQ0Esc0NBQWtCLGlCQUFsQixFQUFxQ0wsTUFBckMsQ0FBNENHLEVBQTVDLENBQStDRSxLQUEvQztBQUNELEtBSkMsQ0FBRjtBQUtELEdBVE8sQ0FBUjtBQVdBSixFQUFBQSxRQUFRLENBQUMsWUFBRCxFQUFlLFlBQVk7QUFDakMsUUFBSUssT0FBTyxHQUFHLGtCQUFkO0FBQ0FDLElBQUFBLE1BQU0saUNBQUMsYUFBa0I7QUFFdkIsMkJBQU87QUFDTCxTQUFDRCxPQUFELEdBQVc7QUFETixPQUFQO0FBTUEsWUFBTUUsYUFBYSxHQUFHLDBRQUF0QjtBQUNBLFlBQU1DLGtCQUFHQyxTQUFILENBQWFDLGNBQUtDLE9BQUwsQ0FBYU4sT0FBYixFQUFzQixvQkFBdEIsQ0FBYixFQUEwREUsYUFBMUQsRUFBeUUsUUFBekUsQ0FBTjtBQUNELEtBVkssRUFBTjtBQVlBSyxJQUFBQSxLQUFLLENBQUMsWUFBWTtBQUNoQkMsc0JBQU9DLE9BQVA7QUFDRCxLQUZJLENBQUw7QUFJQWIsSUFBQUEsRUFBRSxDQUFDLCtGQUFELGtDQUFrRyxhQUFrQjtBQUNwSCxZQUFNYyxZQUFZLEdBQUdDLGVBQU1DLElBQU4sQ0FBV0MscUJBQVgsRUFBbUIsV0FBbkIsRUFBZ0NDLE9BQWhDLENBQXdDLElBQXhDLENBQXJCOztBQUNBLFlBQU0sd0JBQVVULGNBQUtDLE9BQUwsQ0FBYU4sT0FBYixFQUFzQixvQkFBdEIsQ0FBVixDQUFOO0FBQ0EsWUFBTUcsa0JBQUdZLFFBQUgsQ0FBWVYsY0FBS0MsT0FBTCxDQUFhTixPQUFiLEVBQXNCLGdCQUF0QixDQUFaLEVBQXFELE1BQXJELEVBQTZETixNQUE3RCxDQUFvRXNCLFVBQXBFLENBQStFQyxJQUEvRSxDQUFvRkMsS0FBcEYsQ0FBMEYsNkJBQTFGLENBQU47QUFDQVIsTUFBQUEsWUFBWSxDQUFDRCxPQUFiO0FBQ0QsS0FMQyxFQUFGO0FBTUQsR0F4Qk8sQ0FBUjtBQTBCQWQsRUFBQUEsUUFBUSxDQUFDLFlBQUQsRUFBZSxZQUFZO0FBQ2pDQyxJQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0MsWUFBWTtBQUNsRCw4QkFBVTtBQUFDLGVBQU87QUFBUixPQUFWLEVBQWtDLEtBQWxDLEVBQXlDLEtBQXpDLEVBQWdERixNQUFoRCxDQUF1RHlCLEdBQXZELENBQTJEO0FBQUMsZUFBTztBQUFSLE9BQTNEO0FBQ0QsS0FGQyxDQUFGO0FBR0F2QixJQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsWUFBWTtBQUNuRSw4QkFBVTtBQUFDLGVBQU87QUFBQyxpQkFBTztBQUFSO0FBQVIsT0FBVixFQUEyQyxLQUEzQyxFQUFrRCxLQUFsRCxFQUF5REYsTUFBekQsQ0FBZ0V5QixHQUFoRSxDQUFvRTtBQUFDLGVBQU87QUFBQyxpQkFBTztBQUFSO0FBQVIsT0FBcEU7QUFDRCxLQUZDLENBQUY7QUFHQXZCLElBQUFBLEVBQUUsQ0FBQyxpREFBRCxFQUFvRCxZQUFZO0FBQ2hFLDhCQUFVLENBQ1I7QUFBQyxlQUFPO0FBQUMsaUJBQU87QUFBUjtBQUFSLE9BRFEsRUFFUjtBQUFDLGVBQU87QUFBUixPQUZRLENBQVYsRUFHRyxLQUhILEVBR1UsS0FIVixFQUdpQkYsTUFIakIsQ0FHd0J5QixHQUh4QixDQUc0QixDQUMxQjtBQUFDLGVBQU87QUFBQyxpQkFBTztBQUFSO0FBQVIsT0FEMEIsRUFFMUI7QUFBQyxlQUFPO0FBQVIsT0FGMEIsQ0FINUI7QUFPRCxLQVJDLENBQUY7QUFTQXZCLElBQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxZQUFZO0FBQ3JELE9BQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFDLENBQVIsRUFBVyxJQUFYLEVBQWlCLEtBQWpCLEVBQXdCLElBQXhCLEVBQThCd0IsU0FBOUIsRUFBeUMsRUFBekMsRUFBNkMsYUFBN0MsRUFBNERDLE9BQTVELENBQXFFQyxJQUFELElBQVU7QUFDNUU1QixRQUFBQSxNQUFNLENBQUN3QixLQUFQLENBQWEsd0JBQVVJLElBQVYsQ0FBYixFQUE4QkEsSUFBOUI7QUFDRCxPQUZEO0FBR0QsS0FKQyxDQUFGO0FBS0ExQixJQUFBQSxFQUFFLENBQUMsMkNBQUQsRUFBOEMsWUFBWTtBQUMxRCxZQUFNMkIsS0FBSyxHQUFHLENBQ1o7QUFBQyxlQUFPO0FBQVIsT0FEWSxFQUVaO0FBQ0VDLFFBQUFBLEtBQUssRUFBRTtBQUNMQyxVQUFBQSxLQUFLLEVBQUU7QUFDTCxtQkFBTztBQURGO0FBREYsU0FEVDtBQU1FQyxRQUFBQSxHQUFHLEVBQUU7QUFOUCxPQUZZLEVBVVosS0FWWSxFQVdaLElBWFksRUFZWixDQVpZLENBQWQ7QUFjQSxZQUFNQyxjQUFjLEdBQUcsQ0FDckI7QUFBQyxlQUFPO0FBQVIsT0FEcUIsRUFFckI7QUFDRUgsUUFBQUEsS0FBSyxFQUFFO0FBQ0xDLFVBQUFBLEtBQUssRUFBRTtBQUNMLG1CQUFPO0FBREY7QUFERixTQURUO0FBTUVHLFFBQUFBLEdBQUcsRUFBRTtBQU5QLE9BRnFCLEVBVXJCLEtBVnFCLEVBV3JCLElBWHFCLEVBWXJCLENBWnFCLENBQXZCO0FBY0EsOEJBQVVMLEtBQVYsRUFBaUIsS0FBakIsRUFBd0IsS0FBeEIsRUFBK0I3QixNQUEvQixDQUFzQ3VCLElBQXRDLENBQTJDQyxLQUEzQyxDQUFpRFMsY0FBakQ7QUFDRCxLQTlCQyxDQUFGO0FBK0JELEdBcERPLENBQVI7QUFxREQsQ0EzRk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGFja2FnZU9yQnVuZGxlLCB1bnppcEZpbGUsIHJlbmFtZUtleSB9IGZyb20gJy4uLy4uL2xpYi9iYXNlZHJpdmVyL2hlbHBlcnMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyBzeXN0ZW0sIGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IG1vY2tGUyBmcm9tICdtb2NrLWZzJztcblxuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcblxuZGVzY3JpYmUoJ2hlbHBlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCcjaXNQYWNrYWdlT3JCdW5kbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBhY2NlcHQgcGFja2FnZXMgYW5kIGJ1bmRsZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnaW8uYXBwaXVtLnRlc3RhcHAnKS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBhY2NlcHQgbm9uLXBhY2thZ2VzIG9yIG5vbi1idW5kbGVzJywgZnVuY3Rpb24gKCkge1xuICAgICAgaXNQYWNrYWdlT3JCdW5kbGUoJ2ZvbycpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIGlzUGFja2FnZU9yQnVuZGxlKCcvcGF0aC90by9hbi5hcHAnKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnL3BhdGgvdG8vYW4uYXBrJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnI3VuemlwRmlsZScsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbW9ja0RpciA9ICdwYXRoL3RvL21vY2svZGlyJztcbiAgICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gU3RhcnQgbW9jayBmaWxlc3lzdGVtXG4gICAgICBtb2NrRlMoe1xuICAgICAgICBbbW9ja0Rpcl06IHt9LFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFdyaXRlIHRoZSBiYXNlNjQgY29udGVudHMgb2YgRmFrZUlPU0FwcC5hcHAuemlwIHRvIHRoZSBtb2NrIGZpbGVzeXN0ZW1cblxuICAgICAgY29uc3QgZmFrZUlPU0FwcFppcCA9ICdVRXNEQkJRQUNBQUlBQkY4L0VZQUFBQUFBQUFBQUFBQUFBQU9BQkFBUm1GclpVbFBVMEZ3Y0M1aGNIQlZXQXdBTHdPNFZRSUR1RlgxQVJRQUs4bklMRllBb3J6OEVvV2kxTVNjbkVxRnhEeUZ4SUlDTGdCUVN3Y0lSOTNqUGhvQUFBQWFBQUFBVUVzQkFoVURGQUFJQUFnQUVYejhSa2ZkNHo0YUFBQUFHZ0FBQUE0QURBQUFBQUFBQUFBQVFLU0JBQUFBQUVaaGEyVkpUMU5CY0hBdVlYQndWVmdJQUM4RHVGVUNBN2hWVUVzRkJnQUFBQUFCQUFFQVNBQUFBR1lBQUFBQUFBPT0nO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGgucmVzb2x2ZShtb2NrRGlyLCAnRmFrZUlPU0FwcC5hcHAuemlwJyksIGZha2VJT1NBcHBaaXAsICdiYXNlNjQnKTtcbiAgICB9KTtcblxuICAgIGFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vY2tGUy5yZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVuemlwIGEgLnppcCBmaWxlIChmb3JjZSBpc1dpbmRvd3MgdG8gYmUgdHJ1ZSBzbyB3ZSBjYW4gdGVzdCB0aGUgaW50ZXJuYWwgemlwIGxpYnJhcnkpJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZm9yY2VXaW5kb3dzID0gc2lub24uc3R1YihzeXN0ZW0sICdpc1dpbmRvd3MnKS5yZXR1cm5zKHRydWUpO1xuICAgICAgYXdhaXQgdW56aXBGaWxlKHBhdGgucmVzb2x2ZShtb2NrRGlyLCAnRmFrZUlPU0FwcC5hcHAuemlwJykpO1xuICAgICAgYXdhaXQgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKG1vY2tEaXIsICdGYWtlSU9TQXBwLmFwcCcpLCAndXRmOCcpLnNob3VsZC5ldmVudHVhbGx5LmRlZXAuZXF1YWwoJ3RoaXMgaXMgbm90IHJlYWxseSBhbiBhcHBcXG4nKTtcbiAgICAgIGZvcmNlV2luZG93cy5yZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCcjcmVuYW1lS2V5JywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgdHJhbnNsYXRlIGtleSBpbiBhbiBvYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZW5hbWVLZXkoeydmb28nOiAnaGVsbG8gd29ybGQnfSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKHsnYmFyJzogJ2hlbGxvIHdvcmxkJ30pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdHJhbnNsYXRlIGtleSBpbiBhbiBvYmplY3Qgd2l0aGluIGFuIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbmFtZUtleSh7J2tleSc6IHsnZm9vJzogJ2hlbGxvIHdvcmxkJ319LCAnZm9vJywgJ2JhcicpLnNob3VsZC5lcWwoeydrZXknOiB7J2Jhcic6ICdoZWxsbyB3b3JsZCd9fSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0cmFuc2xhdGUga2V5IGluIGFuIG9iamVjdCB3aXRoIGFuIGFycmF5JywgZnVuY3Rpb24gKCkge1xuICAgICAgcmVuYW1lS2V5KFtcbiAgICAgICAgeydrZXknOiB7J2Zvbyc6ICdoZWxsbyB3b3JsZCd9fSxcbiAgICAgICAgeydmb28nOiAnSEVMTE8gV09STEQnfVxuICAgICAgXSwgJ2ZvbycsICdiYXInKS5zaG91bGQuZXFsKFtcbiAgICAgICAgeydrZXknOiB7J2Jhcic6ICdoZWxsbyB3b3JsZCd9fSxcbiAgICAgICAgeydiYXInOiAnSEVMTE8gV09STEQnfVxuICAgICAgXSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgZG8gYW55dGhpbmcgdG8gcHJpbWl0aXZlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIFswLCAxLCAtMSwgdHJ1ZSwgZmFsc2UsIG51bGwsIHVuZGVmaW5lZCwgXCJcIiwgXCJIZWxsbyBXb3JsZFwiXS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHNob3VsZC5lcXVhbChyZW5hbWVLZXkoaXRlbSksIGl0ZW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5hbWUga2V5cyBvbiBiaWcgY29tcGxleCBvYmplY3RzJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgaW5wdXQgPSBbXG4gICAgICAgIHsnZm9vJzogJ2Jhcid9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVsbG86IHtcbiAgICAgICAgICAgIHdvcmxkOiB7XG4gICAgICAgICAgICAgICdmb28nOiAnQkFSJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZvbzogJ2JhaHInXG4gICAgICAgIH0sXG4gICAgICAgICdmb28nLFxuICAgICAgICBudWxsLFxuICAgICAgICAwXG4gICAgICBdO1xuICAgICAgY29uc3QgZXhwZWN0ZWRPdXRwdXQgPSBbXG4gICAgICAgIHsnRk9PJzogJ2Jhcid9LFxuICAgICAgICB7XG4gICAgICAgICAgaGVsbG86IHtcbiAgICAgICAgICAgIHdvcmxkOiB7XG4gICAgICAgICAgICAgICdGT08nOiAnQkFSJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIEZPTzogJ2JhaHInXG4gICAgICAgIH0sXG4gICAgICAgICdmb28nLFxuICAgICAgICBudWxsLFxuICAgICAgICAwXG4gICAgICBdO1xuICAgICAgcmVuYW1lS2V5KGlucHV0LCAnZm9vJywgJ0ZPTycpLnNob3VsZC5kZWVwLmVxdWFsKGV4cGVjdGVkT3V0cHV0KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2hlbHBlcnMtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
