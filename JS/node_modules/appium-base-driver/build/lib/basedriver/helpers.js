"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureApp = configureApp;
exports.downloadApp = downloadApp;
exports.downloadFile = downloadFile;
exports.copyLocalZip = copyLocalZip;
exports.unzipApp = unzipApp;
exports.unzipFile = unzipFile;
exports.testZipArchive = testZipArchive;
exports.isPackageOrBundle = isPackageOrBundle;
exports.getCoordDefault = getCoordDefault;
exports.getSwipeTouchDuration = getSwipeTouchDuration;
exports.copyFromWindowsNetworkShare = copyFromWindowsNetworkShare;
exports.renameKey = renameKey;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _request = _interopRequireDefault(require("request"));

const ZIP_EXTS = ['.zip', '.ipa'];
const ZIP_MIME_TYPE = 'application/zip';
const DOWNLOADS_CACHE = {};

function getModificationDate(_x) {
  return _getModificationDate.apply(this, arguments);
}

function _getModificationDate() {
  _getModificationDate = (0, _asyncToGenerator2.default)(function* (url) {
    let response;

    try {
      response = yield _request.default.head(url);
    } catch (e) {
      _logger.default.debug(`Cannot send HEAD request to '${url}'. Original error: ${e.message}`);

      return null;
    }

    const value = response.headers['last-modified'];

    _logger.default.debug(`Got '${value}' as 'Last-Modified' HEAD response header value of '${url}'`);

    return value ? new Date(value) : null;
  });
  return _getModificationDate.apply(this, arguments);
}

function getCachedApplicationPath(_x2) {
  return _getCachedApplicationPath.apply(this, arguments);
}

function _getCachedApplicationPath() {
  _getCachedApplicationPath = (0, _asyncToGenerator2.default)(function* (url) {
    const appInfo = DOWNLOADS_CACHE[url];

    if (!appInfo) {
      return null;
    }

    const lastModified = appInfo.lastModified,
          fullPath = appInfo.fullPath;
    const currentModified = yield getModificationDate(url);

    if (!currentModified) {
      return null;
    }

    if (currentModified <= lastModified) {
      _logger.default.debug(`'Last-Modified' response header value of '${url}' is less or equal in comparison to the ` + `cached value '${lastModified}'`);

      return fullPath;
    }

    _logger.default.debug(`'Last-Modified' response header value of '${url}' is greater in comparison to the ` + `cached value '${lastModified}'`);

    return null;
  });
  return _getCachedApplicationPath.apply(this, arguments);
}

function configureApp(_x3, _x4) {
  return _configureApp.apply(this, arguments);
}

function _configureApp() {
  _configureApp = (0, _asyncToGenerator2.default)(function* (app, appExt, mountRoot = "Volumes", windowsShareUserName = "", windowsSharePassword = "") {
    if (!_lodash.default.isString(app)) {
      return;
    }

    let newApp = app;
    let shouldUnzipApp = false;

    const _url$parse = _url.default.parse(newApp),
          protocol = _url$parse.protocol;

    const isUrl = ['http:', 'https:'].includes(protocol);

    if (newApp.startsWith('\\\\')) {
      _logger.default.info(`Downloading the application '${newApp}' from SMB share...`);

      newApp = yield copyFromWindowsNetworkShare(newApp, appExt, mountRoot, windowsShareUserName, windowsSharePassword);

      if (!(yield _appiumSupport.fs.exists(newApp))) {
        throw new Error(`The application at '${app}' does not exist or is not accessible for download`);
      }

      _logger.default.info(`Downloaded the app to '${newApp}'`);
    } else if (isUrl) {
      const cachedPath = yield getCachedApplicationPath(newApp);

      if (cachedPath) {
        if (yield _appiumSupport.fs.exists(cachedPath)) {
          _logger.default.info(`Reusing the previously downloaded application at '${cachedPath}'`);

          return cachedPath;
        }

        _logger.default.info(`The application at '${cachedPath}' does not exist anymore. Deleting it from the cache`);

        delete DOWNLOADS_CACHE[newApp];
      }

      _logger.default.info(`Using downloadable app '${newApp}'`);

      const _ref = yield downloadApp(newApp, appExt),
            targetPath = _ref.targetPath,
            contentType = _ref.contentType;

      newApp = targetPath;
      shouldUnzipApp = _lodash.default.includes(ZIP_EXTS, _path.default.extname(newApp)) || contentType === ZIP_MIME_TYPE;

      _logger.default.info(`Downloaded the app to '${newApp}'`);
    } else if (yield _appiumSupport.fs.exists(newApp)) {
      _logger.default.info(`Using local app '${newApp}'`);

      shouldUnzipApp = _lodash.default.includes(ZIP_EXTS, _path.default.extname(newApp));
      newApp = shouldUnzipApp ? yield copyLocalZip(newApp) : newApp;
    } else {
      let errorMessage = `The application at '${newApp}' does not exist or is not accessible`;

      if (_lodash.default.isString(protocol) && protocol.length > 2) {
        errorMessage = `The protocol '${protocol}' used in '${newApp}' is not supported. ` + `Only http: and https: protocols are supported`;
      }

      throw new Error(errorMessage);
    }

    if (shouldUnzipApp) {
      _logger.default.info(`Unzipping local app '${newApp}'...`);

      const archivePath = newApp;

      try {
        newApp = yield unzipApp(archivePath, appExt);
      } finally {
        yield _appiumSupport.fs.rimraf(archivePath);
      }

      _logger.default.info(`Unzipped local app to '${newApp}'`);
    }

    if (_path.default.extname(newApp) !== appExt) {
      if (newApp !== app) {
        yield _appiumSupport.fs.rimraf(newApp);
      }

      throw new Error(`New app path '${newApp}' did not have extension '${appExt}'`);
    }

    if (isUrl) {
      const lastModified = yield getModificationDate(app);

      if (lastModified) {
        DOWNLOADS_CACHE[_url.default] = {
          lastModified,
          fullPath: newApp
        };
      } else {
        _logger.default.info(`Skipping '${app}' caching, because the HEAD response didn't return` + ` any valid Last-Modified headers`);
      }
    }

    return newApp;
  });
  return _configureApp.apply(this, arguments);
}

function downloadApp(_x5, _x6) {
  return _downloadApp.apply(this, arguments);
}

function _downloadApp() {
  _downloadApp = (0, _asyncToGenerator2.default)(function* (app, appExt) {
    let appUrl;

    try {
      appUrl = _url.default.parse(app);
    } catch (err) {
      throw new Error(`Invalid App URL (${app})`);
    }

    let isZipFile = _lodash.default.includes(ZIP_EXTS, _path.default.extname(appUrl.pathname));

    appExt = isZipFile ? '.zip' : appExt;
    let downloadedApp;

    try {
      downloadedApp = yield downloadFile(_url.default.format(appUrl), appExt);
    } catch (err) {
      throw new Error(`Problem downloading app from url ${app}: ${err}`);
    }

    return downloadedApp;
  });
  return _downloadApp.apply(this, arguments);
}

function downloadFile(_x7, _x8) {
  return _downloadFile.apply(this, arguments);
}

function _downloadFile() {
  _downloadFile = (0, _asyncToGenerator2.default)(function* (sourceUrl, suffix) {
    let targetPath = yield _appiumSupport.tempDir.path({
      prefix: 'appium-app',
      suffix
    });
    let contentType;
    yield new _bluebird.default((resolve, reject) => {
      (0, _request.default)(sourceUrl).on('error', reject).on('response', function (res) {
        if (res.statusCode >= 400) {
          return reject(`Error downloading file: ${res.statusCode}`);
        }

        contentType = res.headers['content-type'];
      }).pipe(_fs2.default.createWriteStream(targetPath)).on('error', reject).on('close', resolve);
    });

    _logger.default.debug(`'${sourceUrl}' downloaded to '${targetPath}'`);

    _logger.default.debug(`Downloaded file type '${contentType}'`);

    return {
      targetPath,
      contentType
    };
  });
  return _downloadFile.apply(this, arguments);
}

function copyLocalZip(_x9) {
  return _copyLocalZip.apply(this, arguments);
}

function _copyLocalZip() {
  _copyLocalZip = (0, _asyncToGenerator2.default)(function* (localZipPath) {
    _logger.default.debug('Copying local zip to tmp dir');

    if (!(yield _appiumSupport.fs.exists(localZipPath))) {
      throw new Error('Local zip did not exist');
    }

    let fileInfo = yield _appiumSupport.tempDir.open({
      prefix: 'appium-app',
      suffix: '.zip'
    });

    let infile = _fs2.default.createReadStream(localZipPath);

    let outfile = _fs2.default.createWriteStream(fileInfo.path);

    return new _bluebird.default((resolve, reject) => {
      infile.pipe(outfile).on('close', () => {
        resolve(fileInfo.path);
      }).on('error', err => {
        reject(err);
      });
    });
  });
  return _copyLocalZip.apply(this, arguments);
}

function unzipApp(_x10, _x11) {
  return _unzipApp.apply(this, arguments);
}

function _unzipApp() {
  _unzipApp = (0, _asyncToGenerator2.default)(function* (zipPath, appExt) {
    let _ref2 = yield (0, _teen_process.exec)('find', [_path.default.dirname(zipPath), '-type', 'd', '-name', `*${appExt}`]),
        stdout = _ref2.stdout;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = stdout.trim().split('\n').filter(Boolean)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;
        yield _appiumSupport.fs.rimraf(line);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    yield _appiumSupport.fs.rimraf(_path.default.resolve(_path.default.dirname(zipPath), 'Payload*'));
    let output = yield unzipFile(zipPath);
    let relaxedRegStr = `(?:creating|inflating|extracting): (.+${appExt})/?`;
    let strictReg = new RegExp(`${relaxedRegStr}$`, 'm');
    let relaxedReg = new RegExp(relaxedRegStr, 'm');
    let strictMatch = strictReg.exec(output);
    let relaxedMatch = relaxedReg.exec(output);

    let getAppPath = function getAppPath(match) {
      return _path.default.resolve(_path.default.dirname(zipPath), match[1]);
    };

    if (strictMatch) {
      return getAppPath(strictMatch);
    }

    if (relaxedMatch) {
      _logger.default.debug('Got a relaxed match for app in zip, be careful for app match errors');

      return getAppPath(relaxedMatch);
    }

    throw new Error(`App zip unzipped OK, but we could not find a ${appExt} bundle ` + `in it. Make sure your archive contains the ${appExt} package ` + `and nothing else`);
  });
  return _unzipApp.apply(this, arguments);
}

function unzipFile(_x12) {
  return _unzipFile.apply(this, arguments);
}

function _unzipFile() {
  _unzipFile = (0, _asyncToGenerator2.default)(function* (zipPath) {
    _logger.default.debug(`Unzipping ${zipPath}`);

    let valid = yield testZipArchive(zipPath);

    if (!valid) {
      throw new Error(`Zip archive ${zipPath} did not test valid`);
    }

    if (_appiumSupport.system.isWindows()) {
      yield _appiumSupport.zip.extractAllTo(zipPath, _path.default.dirname(zipPath));

      _logger.default.debug('Unzip successful');

      return;
    }

    let execEnv = _lodash.default.clone(process.env);

    delete execEnv.UNZIP;
    let execOpts = {
      cwd: _path.default.dirname(zipPath),
      env: execEnv
    };

    try {
      let _ref3 = yield (0, _teen_process.exec)('unzip', ['-o', zipPath], execOpts),
          stdout = _ref3.stdout;

      return stdout;
    } catch (err) {
      _logger.default.error(`Unzip threw error ${err}`);

      _logger.default.error(`Stderr: ${err.stderr}`);

      _logger.default.error(`Stdout: ${err.stdout}`);

      throw new Error('Archive could not be unzipped, check appium logs.');
    }
  });
  return _unzipFile.apply(this, arguments);
}

function testZipArchive(_x13) {
  return _testZipArchive.apply(this, arguments);
}

function _testZipArchive() {
  _testZipArchive = (0, _asyncToGenerator2.default)(function* (zipPath) {
    _logger.default.debug(`Testing zip archive: ${zipPath}`);

    if (_appiumSupport.system.isWindows()) {
      if (yield _appiumSupport.fs.exists(zipPath)) {
        _logger.default.debug('Zip archive tested clean');

        return true;
      } else {
        _logger.default.debug('Zip archive not found');

        return false;
      }
    }

    let execEnv = _lodash.default.clone(process.env);

    delete execEnv.UNZIP;
    let execOpts = {
      cwd: _path.default.dirname(zipPath),
      env: execEnv
    };
    let output;

    try {
      output = yield (0, _teen_process.exec)('unzip', ['-tq', zipPath], execOpts);

      if (/No errors detected/.exec(output.stdout)) {
        return true;
      }

      _logger.default.error(`Zip file ${zipPath} was not valid`);

      _logger.default.error(`Stderr: ${output.stderr}`);

      _logger.default.error(`Stdout: ${output.stdout}`);

      _logger.default.error('Zip archive did not test successfully, check appium server ' + 'logs for output');

      return false;
    } catch (err) {
      _logger.default.error(`Test zip archive threw error ${err}`);

      _logger.default.error(`Stderr: ${err.stderr}`);

      _logger.default.error(`Stdout: ${err.stdout}`);

      throw new Error('Error testing zip archive, are you sure this is a zip file?');
    }
  });
  return _testZipArchive.apply(this, arguments);
}

function copyFromWindowsNetworkShare(_x14, _x15, _x16, _x17, _x18) {
  return _copyFromWindowsNetworkShare.apply(this, arguments);
}

function _copyFromWindowsNetworkShare() {
  _copyFromWindowsNetworkShare = (0, _asyncToGenerator2.default)(function* (app, appExt, mountRoot, windowsUserName, windowsPassword) {
    if (_appiumSupport.system.isWindows()) {
      return yield copyLocallyFromWindowsShare(app, appExt);
    } else {
      return yield mountWindowsShareOnMac(app, mountRoot, windowsUserName, windowsPassword);
    }
  });
  return _copyFromWindowsNetworkShare.apply(this, arguments);
}

function mountWindowsShareOnMac(_x19, _x20, _x21, _x22) {
  return _mountWindowsShareOnMac.apply(this, arguments);
}

function _mountWindowsShareOnMac() {
  _mountWindowsShareOnMac = (0, _asyncToGenerator2.default)(function* (app, mountRoot, windowsUserName, windowsPassword) {
    let pathSplit = app.split("\\");
    let networkShare = pathSplit[2];
    let rootFolder = pathSplit[3];
    app = app.replace(/\\/g, "/");
    app = app.replace(`/${networkShare}`, mountRoot);
    let mountPath = `/${mountRoot}/${rootFolder}`;

    let mountNetworkShare = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        yield _appiumSupport.fs.mkdir(mountPath);
        let mountArgs = [`-t`, `smbfs`, `//${windowsUserName}:${windowsPassword}@${networkShare}/${rootFolder}`, mountPath];

        try {
          yield (0, _teen_process.exec)('mount', mountArgs);
        } catch (err) {
          _logger.default.errorAndThrow(`Error mounting: ${err.message}`);
        }
      });

      return function mountNetworkShare() {
        return _ref4.apply(this, arguments);
      };
    }();

    if (yield _appiumSupport.fs.exists(mountPath)) {
      if (yield _appiumSupport.fs.exists(app)) {
        return app;
      }

      let umountArgs = [mountPath];

      try {
        yield (0, _teen_process.exec)('umount', umountArgs);
      } catch (err) {
        _logger.default.error(`Error Unmounting :${err.message}`);
      }

      yield _appiumSupport.fs.rimraf(mountRoot);
    }

    yield mountNetworkShare();
    return app;
  });
  return _mountWindowsShareOnMac.apply(this, arguments);
}

function copyLocallyFromWindowsShare(_x23, _x24) {
  return _copyLocallyFromWindowsShare.apply(this, arguments);
}

function _copyLocallyFromWindowsShare() {
  _copyLocallyFromWindowsShare = (0, _asyncToGenerator2.default)(function* (app, appExt) {
    let fileInfo = yield _appiumSupport.tempDir.open({
      prefix: 'appium-app',
      suffix: appExt
    });
    return yield _appiumSupport.fs.copyFile(app, fileInfo.path);
  });
  return _copyLocallyFromWindowsShare.apply(this, arguments);
}

function isPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

function getCoordDefault(val) {
  return _appiumSupport.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  let duration = 0.8;

  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;

    if (duration === 0) {
      duration = 0.1;
    }
  }

  return duration;
}

function renameKey(input, inKey, outKey) {
  if (_lodash.default.isArray(input)) {
    return input.map(item => renameKey(item, inKey, outKey));
  } else if (_lodash.default.isPlainObject(input)) {
    return _lodash.default.reduce(input, (resultObj, value, key) => (0, _objectSpread2.default)({}, resultObj, {
      [key === inKey ? outKey : key]: renameKey(value, inKey, outKey)
    }), {});
  }

  return input;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
