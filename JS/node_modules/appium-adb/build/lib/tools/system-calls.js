"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _helpers = require("../helpers");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _shellQuote = require("shell-quote");

let systemCallMethods = {};
const DEFAULT_ADB_EXEC_TIMEOUT = 20000;
const DEFAULT_ADB_REBOOT_RETRIES = 90;
const LINKER_WARNING_REGEXP = /^WARNING: linker.+$/m;
const PROTOCOL_FAULT_ERROR_REGEXP = new RegExp('protocol fault \\(no status\\)', 'i');
const DEVICE_NOT_FOUND_ERROR_REGEXP = new RegExp(`error: device ('.+' )?not found`, 'i');
const DEVICE_CONNECTING_ERROR_REGEXP = new RegExp('error: device still connecting', 'i');
const CERTS_ROOT = '/system/etc/security/cacerts';
systemCallMethods.getSdkBinaryPath = _lodash.default.memoize(function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (binaryName) {
    _logger.default.info(`Checking whether ${binaryName} is present`);

    if (this.sdkRoot) {
      return yield this.getBinaryFromSdkRoot(binaryName);
    }

    _logger.default.warn(`The ANDROID_HOME environment variable is not set to the Android SDK ` + `root directory path. ANDROID_HOME is required for compatibility ` + `with SDK 23+. Checking along PATH for ${binaryName}.`);

    return yield this.getBinaryFromPath(binaryName);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
systemCallMethods.getCommandForOS = _lodash.default.memoize(function () {
  return _appiumSupport.system.isWindows() ? 'where' : 'which';
});
systemCallMethods.getBinaryNameForOS = _lodash.default.memoize(function (binaryName) {
  if (!_appiumSupport.system.isWindows()) {
    return binaryName;
  }

  if (['android', 'apksigner', 'apkanalyzer'].indexOf(binaryName) >= 0 && !binaryName.toLowerCase().endsWith('.bat')) {
    return `${binaryName}.bat`;
  }

  if (!binaryName.toLowerCase().endsWith('.exe')) {
    return `${binaryName}.exe`;
  }

  return binaryName;
});
systemCallMethods.getBinaryFromSdkRoot = _lodash.default.memoize(function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (binaryName) {
    let binaryLoc = null;
    binaryName = this.getBinaryNameForOS(binaryName);
    let binaryLocs = [_path.default.resolve(this.sdkRoot, "platform-tools", binaryName), _path.default.resolve(this.sdkRoot, "emulator", binaryName), _path.default.resolve(this.sdkRoot, "tools", binaryName), _path.default.resolve(this.sdkRoot, "tools", "bin", binaryName)];

    _lodash.default.forEach((yield (0, _helpers.getBuildToolsDirs)(this.sdkRoot)), dir => binaryLocs.push(_path.default.resolve(dir, binaryName)));

    for (var _i = 0; _i < binaryLocs.length; _i++) {
      let loc = binaryLocs[_i];

      if (yield _appiumSupport.fs.exists(loc)) {
        binaryLoc = loc;
        break;
      }
    }

    if (_lodash.default.isNull(binaryLoc)) {
      throw new Error(`Could not find ${binaryName} in ${binaryLocs}. ` + `Do you have the Android SDK installed at '${this.sdkRoot}'?`);
    }

    binaryLoc = binaryLoc.trim();

    _logger.default.info(`Using ${binaryName} from ${binaryLoc}`);

    return binaryLoc;
  });

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

systemCallMethods.getBinaryFromPath = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (binaryName) {
    let binaryLoc = null;
    let cmd = this.getCommandForOS();

    try {
      let _ref4 = yield (0, _teen_process.exec)(cmd, [binaryName]),
          stdout = _ref4.stdout;

      _logger.default.info(`Using ${binaryName} from ${stdout}`);

      binaryLoc = stdout.trim();
      return binaryLoc;
    } catch (e) {
      throw new Error(`Could not find ${binaryName} Please set the ANDROID_HOME ` + `environment variable with the Android SDK root directory path.`);
    }
  });

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();

systemCallMethods.getConnectedDevices = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Getting connected devices...");

  try {
    let _ref6 = yield (0, _teen_process.exec)(this.executable.path, this.executable.defaultArgs.concat(['devices'])),
        stdout = _ref6.stdout;

    let startingIndex = stdout.indexOf("List of devices");

    if (startingIndex === -1) {
      throw new Error(`Unexpected output while trying to get devices. output was: ${stdout}`);
    }

    stdout = stdout.slice(startingIndex);
    let devices = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = stdout.split("\n")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;

        if (line.trim() !== "" && line.indexOf("List of devices") === -1 && line.indexOf("adb server") === -1 && line.indexOf("* daemon") === -1 && line.indexOf("offline") === -1) {
          let lineInfo = line.split("\t");
          devices.push({
            udid: lineInfo[0],
            state: lineInfo[1]
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _logger.default.debug(`${devices.length} device(s) connected`);

    return devices;
  } catch (e) {
    throw new Error(`Error while getting connected devices. Original error: ${e.message}`);
  }
});

systemCallMethods.getDevicesWithRetry = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (timeoutMs = 20000) {
    var _this = this;

    let start = Date.now();

    _logger.default.debug("Trying to find a connected android device");

    let getDevices = function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* () {
        if (Date.now() - start > timeoutMs) {
          throw new Error("Could not find a connected Android device.");
        }

        try {
          let devices = yield _this.getConnectedDevices();

          if (devices.length < 1) {
            _logger.default.debug("Could not find devices, restarting adb server...");

            yield _this.restartAdb();
            yield (0, _asyncbox.sleep)(200);
            return yield getDevices();
          }

          return devices;
        } catch (e) {
          _logger.default.debug("Could not find devices, restarting adb server...");

          yield _this.restartAdb();
          yield (0, _asyncbox.sleep)(200);
          return yield getDevices();
        }
      });

      return function getDevices() {
        return _ref8.apply(this, arguments);
      };
    }();

    return yield getDevices();
  });

  return function () {
    return _ref7.apply(this, arguments);
  };
}();

systemCallMethods.restartAdb = (0, _asyncToGenerator2.default)(function* () {
  if (this.suppressKillServer) {
    _logger.default.debug(`Not restarting abd since 'suppressKillServer' is on`);

    return;
  }

  _logger.default.debug('Restarting adb');

  try {
    yield this.killServer();
  } catch (e) {
    _logger.default.error("Error killing ADB server, going to see if it's online anyway");
  }
});
systemCallMethods.killServer = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug(`Killing adb server on port ${this.adbPort}`);

  yield (0, _teen_process.exec)(this.executable.path, [...this.executable.defaultArgs, 'kill-server']);
});
systemCallMethods.resetTelnetAuthToken = _lodash.default.memoize((0, _asyncToGenerator2.default)(function* () {
  const homeFolderPath = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];

  if (!homeFolderPath) {
    _logger.default.warn(`Cannot find the path to user home folder. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  const dstPath = _path.default.resolve(homeFolderPath, '.emulator_console_auth_token');

  _logger.default.debug(`Overriding ${dstPath} with an empty string to avoid telnet authentication for emulator commands`);

  try {
    yield _appiumSupport.fs.writeFile(dstPath, '');
  } catch (e) {
    _logger.default.warn(`Error ${e.message} while resetting the content of ${dstPath}. Ignoring resetting of emulator's telnet authentication token`);

    return false;
  }

  return true;
}));

systemCallMethods.adbExecEmu = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (cmd) {
    yield this.verifyEmulatorConnected();
    yield this.resetTelnetAuthToken();
    yield this.adbExec(['emu', ...cmd]);
  });

  return function (_x4) {
    return _ref12.apply(this, arguments);
  };
}();

systemCallMethods.adbExec = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (cmd, opts = {}) {
    var _this2 = this;

    if (!cmd) {
      throw new Error("You need to pass in a command to adbExec()");
    }

    opts.timeout = opts.timeout || this.execTimeout || DEFAULT_ADB_EXEC_TIMEOUT;

    let execFunc = function () {
      var _ref14 = (0, _asyncToGenerator2.default)(function* () {
        try {
          if (!(cmd instanceof Array)) {
            cmd = [cmd];
          }

          let args = _this2.executable.defaultArgs.concat(cmd);

          _logger.default.debug(`Running '${_this2.executable.path} ${(0, _shellQuote.quote)(args)}'`);

          let _ref15 = yield (0, _teen_process.exec)(_this2.executable.path, args, opts),
              stdout = _ref15.stdout;

          stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
          return stdout;
        } catch (e) {
          const errText = `${e.message}, ${e.stdout}, ${e.stderr}`;
          const protocolFaultError = PROTOCOL_FAULT_ERROR_REGEXP.test(errText);
          const deviceNotFoundError = DEVICE_NOT_FOUND_ERROR_REGEXP.test(errText);
          const deviceConnectingError = DEVICE_CONNECTING_ERROR_REGEXP.test(errText);

          if (protocolFaultError || deviceNotFoundError || deviceConnectingError) {
            _logger.default.info(`Error sending command, reconnecting device and retrying: ${cmd}`);

            yield (0, _asyncbox.sleep)(1000);
            yield _this2.getDevicesWithRetry();
          }

          if (e.code === 0 && e.stdout) {
            let stdout = e.stdout;
            stdout = stdout.replace(LINKER_WARNING_REGEXP, '').trim();
            return stdout;
          }

          throw new Error(`Error executing adbExec. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`);
        }
      });

      return function execFunc() {
        return _ref14.apply(this, arguments);
      };
    }();

    return yield (0, _asyncbox.retry)(2, execFunc);
  });

  return function (_x5) {
    return _ref13.apply(this, arguments);
  };
}();

systemCallMethods.shell = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (cmd, opts = {}) {
    return yield this.adbExec(_lodash.default.isArray(cmd) ? ['shell', ...cmd] : ['shell', cmd], opts);
  });

  return function (_x6) {
    return _ref16.apply(this, arguments);
  };
}();

systemCallMethods.createSubProcess = function (args = []) {
  args = this.executable.defaultArgs.concat(args);

  _logger.default.debug(`Creating ADB subprocess with args: ${JSON.stringify(args)}`);

  return new _teen_process.SubProcess(this.getAdbPath(), args);
};

systemCallMethods.getAdbServerPort = function () {
  return this.adbPort;
};

systemCallMethods.getEmulatorPort = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Getting running emulator port");

  if (this.emulatorPort !== null) {
    return this.emulatorPort;
  }

  try {
    let devices = yield this.getConnectedDevices();
    let port = this.getPortFromEmulatorString(devices[0].udid);

    if (port) {
      return port;
    } else {
      throw new Error(`Emulator port not found`);
    }
  } catch (e) {
    throw new Error(`No devices connected. Original error: ${e.message}`);
  }
});

systemCallMethods.getPortFromEmulatorString = function (emStr) {
  let portPattern = /emulator-(\d+)/;

  if (portPattern.test(emStr)) {
    return parseInt(portPattern.exec(emStr)[1], 10);
  }

  return false;
};

systemCallMethods.getConnectedEmulators = (0, _asyncToGenerator2.default)(function* () {
  _logger.default.debug("Getting connected emulators");

  try {
    let devices = yield this.getConnectedDevices();
    let emulators = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = devices[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let device = _step2.value;
        let port = this.getPortFromEmulatorString(device.udid);

        if (port) {
          device.port = port;
          emulators.push(device);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    _logger.default.debug(`${emulators.length} emulator(s) connected`);

    return emulators;
  } catch (e) {
    throw new Error(`Error getting emulators. Original error: ${e.message}`);
  }
});

systemCallMethods.setEmulatorPort = function (emPort) {
  this.emulatorPort = emPort;
};

systemCallMethods.setDeviceId = function (deviceId) {
  _logger.default.debug(`Setting device id to ${deviceId}`);

  this.curDeviceId = deviceId;
  let argsHasDevice = this.executable.defaultArgs.indexOf('-s');

  if (argsHasDevice !== -1) {
    this.executable.defaultArgs.splice(argsHasDevice, 2);
  }

  this.executable.defaultArgs.push('-s', deviceId);
};

systemCallMethods.setDevice = function (deviceObj) {
  let deviceId = deviceObj.udid;
  let emPort = this.getPortFromEmulatorString(deviceId);
  this.setEmulatorPort(emPort);
  this.setDeviceId(deviceId);
};

systemCallMethods.getRunningAVD = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (avdName) {
    _logger.default.debug(`Trying to find ${avdName} emulator`);

    try {
      let emulators = yield this.getConnectedEmulators();
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = emulators[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          let emulator = _step3.value;
          this.setEmulatorPort(emulator.port);
          let runningAVDName = yield this.sendTelnetCommand("avd name");

          if (avdName === runningAVDName) {
            _logger.default.debug(`Found emulator ${avdName} in port ${emulator.port}`);

            this.setDeviceId(emulator.udid);
            return emulator;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      _logger.default.debug(`Emulator ${avdName} not running`);

      return null;
    } catch (e) {
      throw new Error(`Error getting AVD. Original error: ${e.message}`);
    }
  });

  return function (_x7) {
    return _ref19.apply(this, arguments);
  };
}();

systemCallMethods.getRunningAVDWithRetry = function () {
  var _ref20 = (0, _asyncToGenerator2.default)(function* (avdName, timeoutMs = 20000) {
    var _this3 = this;

    let runningAvd;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          runningAvd = yield _this3.getRunningAVD(avdName.replace('@', ''));
          return runningAvd;
        } catch (e) {
          _logger.default.debug(e.message);

          return false;
        }
      }), {
        waitMs: timeoutMs,
        intervalMs: 1000
      });
    } catch (e) {
      throw new Error(`Error getting AVD with retry. Original error: ${e.message}`);
    }

    return runningAvd;
  });

  return function (_x8) {
    return _ref20.apply(this, arguments);
  };
}();

systemCallMethods.killAllEmulators = (0, _asyncToGenerator2.default)(function* () {
  let cmd, args;

  if (_appiumSupport.system.isWindows()) {
    cmd = 'TASKKILL';
    args = ['TASKKILL', '/IM', 'emulator.exe'];
  } else {
    cmd = '/usr/bin/killall';
    args = ['-m', 'emulator*'];
  }

  try {
    yield (0, _teen_process.exec)(cmd, args);
  } catch (e) {
    throw new Error(`Error killing emulators. Original error: ${e.message}`);
  }
});

systemCallMethods.killEmulator = function () {
  var _ref23 = (0, _asyncToGenerator2.default)(function* (avdName = null, timeout = 60000) {
    var _this4 = this;

    if (_appiumSupport.util.hasValue(avdName)) {
      _logger.default.debug(`Killing avd '${avdName}'`);

      const device = yield this.getRunningAVD(avdName);

      if (!device) {
        _logger.default.info(`No avd with name '${avdName}' running. Skipping kill step.`);

        return false;
      }
    } else {
      _logger.default.debug(`Killing avd with id '${this.curDeviceId}'`);

      if (!(yield this.isEmulatorConnected())) {
        _logger.default.debug(`Emulator with id '${this.curDeviceId}' not connected. Skipping kill step`);

        return false;
      }
    }

    yield this.adbExec(['emu', 'kill']);

    _logger.default.debug(`Waiting up to ${timeout}ms until the emulator '${avdName ? avdName : this.curDeviceId}' is killed`);

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          return _appiumSupport.util.hasValue(avdName) ? !(yield _this4.getRunningAVD(avdName)) : !(yield _this4.isEmulatorConnected());
        } catch (ign) {}

        return false;
      }), {
        waitMs: timeout,
        intervalMs: 2000
      });
    } catch (e) {
      throw new Error(`The emulator '${avdName ? avdName : this.curDeviceId}' is still running after being killed ${timeout}ms ago`);
    }

    _logger.default.info(`Successfully killed the '${avdName ? avdName : this.curDeviceId}' emulator`);

    return true;
  });

  return function () {
    return _ref23.apply(this, arguments);
  };
}();

systemCallMethods.launchAVD = function () {
  var _ref25 = (0, _asyncToGenerator2.default)(function* (avdName, avdArgs, language, country, avdLaunchTimeout = 60000, avdReadyTimeout = 60000, retryTimes = 1) {
    var _this5 = this;

    _logger.default.debug(`Launching Emulator with AVD ${avdName}, launchTimeout ` + `${avdLaunchTimeout}ms and readyTimeout ${avdReadyTimeout}ms`);

    let emulatorBinaryPath = yield this.getSdkBinaryPath("emulator");

    if (avdName[0] === "@") {
      avdName = avdName.substr(1);
    }

    yield this.checkAvdExist(avdName);
    let launchArgs = ["-avd", avdName];

    if (_lodash.default.isString(language)) {
      _logger.default.debug(`Setting Android Device Language to ${language}`);

      launchArgs.push("-prop", `persist.sys.language=${language.toLowerCase()}`);
    }

    if (_lodash.default.isString(country)) {
      _logger.default.debug(`Setting Android Device Country to ${country}`);

      launchArgs.push("-prop", `persist.sys.country=${country.toUpperCase()}`);
    }

    let locale;

    if (_lodash.default.isString(language) && _lodash.default.isString(country)) {
      locale = language.toLowerCase() + "-" + country.toUpperCase();
    } else if (_lodash.default.isString(language)) {
      locale = language.toLowerCase();
    } else if (_lodash.default.isString(country)) {
      locale = country;
    }

    if (_lodash.default.isString(locale)) {
      _logger.default.debug(`Setting Android Device Locale to ${locale}`);

      launchArgs.push("-prop", `persist.sys.locale=${locale}`);
    }

    if (!_lodash.default.isEmpty(avdArgs)) {
      launchArgs.push(...(_lodash.default.isArray(avdArgs) ? avdArgs : avdArgs.split(' ')));
    }

    _logger.default.debug(`Running '${emulatorBinaryPath}' with args: ${JSON.stringify(launchArgs)}`);

    let proc = new _teen_process.SubProcess(emulatorBinaryPath, launchArgs);
    yield proc.start(0);
    proc.on('output', (stdout, stderr) => {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = (stdout || stderr || '').split('\n').filter(Boolean)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          let line = _step4.value;

          _logger.default.info(`[AVD OUTPUT] ${line}`);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    });
    proc.on('die', (code, signal) => {
      _logger.default.warn(`Emulator avd ${avdName} exited with code ${code}${signal ? `, signal ${signal}` : ''}`);
    });
    yield (0, _asyncbox.retry)(retryTimes, (0, _asyncToGenerator2.default)(function* () {
      return yield _this5.getRunningAVDWithRetry(avdName, avdLaunchTimeout);
    }));
    yield this.waitForEmulatorReady(avdReadyTimeout);
    return proc;
  });

  return function (_x9, _x10, _x11, _x12) {
    return _ref25.apply(this, arguments);
  };
}();

systemCallMethods.getAdbVersion = _lodash.default.memoize((0, _asyncToGenerator2.default)(function* () {
  try {
    let adbVersion = (yield this.adbExec('version')).replace(/Android\sDebug\sBridge\sversion\s([\d.]*)[\s\w-]*/, "$1");
    let parts = adbVersion.split('.');
    return {
      versionString: adbVersion,
      versionFloat: parseFloat(adbVersion),
      major: parseInt(parts[0], 10),
      minor: parseInt(parts[1], 10),
      patch: parts[2] ? parseInt(parts[2], 10) : undefined
    };
  } catch (e) {
    throw new Error(`Error getting adb version. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`);
  }
}));

systemCallMethods.checkAvdExist = function () {
  var _ref28 = (0, _asyncToGenerator2.default)(function* (avdName) {
    let cmd, result;

    try {
      cmd = yield this.getSdkBinaryPath('emulator');
      result = yield (0, _teen_process.exec)(cmd, ['-list-avds']);
    } catch (e) {
      let unknownOptionError = new RegExp("unknown option: -list-avds", "i").test(e.stderr);

      if (!unknownOptionError) {
        throw new Error(`Error executing checkAvdExist. Original error: '${e.message}'; ` + `Stderr: '${(e.stderr || '').trim()}'; Code: '${e.code}'`);
      }

      const sdkVersion = yield (0, _helpers.getSdkToolsVersion)();
      let binaryName = 'android';

      if (sdkVersion) {
        if (sdkVersion.major >= 25) {
          binaryName = 'avdmanager';
        }
      } else {
        _logger.default.warn(`Defaulting binary name to '${binaryName}', because SDK version cannot be parsed`);
      }

      cmd = yield this.getSdkBinaryPath(binaryName);
      result = yield (0, _teen_process.exec)(cmd, ['list', 'avd', '-c']);
    }

    if (result.stdout.indexOf(avdName) === -1) {
      let existings = `(${result.stdout.trim().replace(/[\n]/g, '), (')})`;
      throw new Error(`Avd '${avdName}' is not available. please select your avd name from one of these: '${existings}'`);
    }
  });

  return function (_x13) {
    return _ref28.apply(this, arguments);
  };
}();

systemCallMethods.waitForEmulatorReady = function () {
  var _ref29 = (0, _asyncToGenerator2.default)(function* (timeoutMs = 20000) {
    var _this6 = this;

    try {
      yield (0, _asyncbox.waitForCondition)((0, _asyncToGenerator2.default)(function* () {
        try {
          if (!(yield _this6.shell(['getprop', 'init.svc.bootanim'])).includes('stopped')) {
            return false;
          }

          return /\d+\[\w+\]/.test((yield _this6.shell(['pm', 'get-install-location'])));
        } catch (err) {
          _logger.default.debug(`Waiting for emulator startup. Intermediate error: ${err.message}`);

          return false;
        }
      }), {
        waitMs: timeoutMs,
        intervalMs: 3000
      });
    } catch (e) {
      throw new Error(`Emulator is not ready within ${timeoutMs}ms`);
    }
  });

  return function () {
    return _ref29.apply(this, arguments);
  };
}();

systemCallMethods.waitForDevice = function () {
  var _ref31 = (0, _asyncToGenerator2.default)(function* (appDeviceReadyTimeout = 30) {
    var _this7 = this;

    this.appDeviceReadyTimeout = appDeviceReadyTimeout;
    const retries = 3;
    const timeout = parseInt(this.appDeviceReadyTimeout, 10) / retries * 1000;
    yield (0, _asyncbox.retry)(retries, (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _this7.adbExec('wait-for-device', {
          timeout
        });
        yield _this7.ping();
      } catch (e) {
        yield _this7.restartAdb();
        yield _this7.getConnectedDevices();
        throw new Error(`Error in waiting for device. Original error: '${e.message}'. ` + `Retrying by restarting ADB`);
      }
    }));
  });

  return function () {
    return _ref31.apply(this, arguments);
  };
}();

systemCallMethods.reboot = function () {
  var _ref33 = (0, _asyncToGenerator2.default)(function* (retries = DEFAULT_ADB_REBOOT_RETRIES) {
    var _this8 = this;

    try {
      try {
        yield this.shell(['stop']);
      } catch (err) {
        if (err.message.indexOf('must be root') === -1) {
          throw err;
        }

        _logger.default.debug('Device requires adb to be running as root in order to reboot. Restarting daemon');

        yield this.root();
        yield this.shell(['stop']);
      }

      yield _bluebird.default.delay(2000);
      yield this.setDeviceProperty('sys.boot_completed', 0);
      yield this.shell(['start']);
      yield (0, _asyncbox.retryInterval)(retries, 1000, (0, _asyncToGenerator2.default)(function* () {
        let booted = yield _this8.getDeviceProperty('sys.boot_completed');

        if (booted === '1') {
          return;
        } else {
          let msg = 'Waiting for reboot. This takes time';

          _logger.default.debug(msg);

          throw new Error(msg);
        }
      }));
    } finally {
      yield this.unroot();
    }
  });

  return function () {
    return _ref33.apply(this, arguments);
  };
}();

systemCallMethods.root = (0, _asyncToGenerator2.default)(function* () {
  try {
    let _ref36 = yield (0, _teen_process.exec)(this.executable.path, ['root']),
        stdout = _ref36.stdout;

    if (stdout && stdout.indexOf('adbd cannot run as root') !== -1) {
      throw new Error(stdout.trim());
    }

    return true;
  } catch (err) {
    _logger.default.warn(`Unable to root adb daemon: '${err.message}'. Continuing`);

    return false;
  }
});
systemCallMethods.unroot = (0, _asyncToGenerator2.default)(function* () {
  try {
    yield (0, _teen_process.exec)(this.executable.path, ['unroot']);
    return true;
  } catch (err) {
    _logger.default.warn(`Unable to unroot adb daemon: '${err.message}'. Continuing`);

    return false;
  }
});

systemCallMethods.fileExists = function () {
  var _ref38 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    let files = yield this.ls(remotePath);
    return files.length > 0;
  });

  return function (_x14) {
    return _ref38.apply(this, arguments);
  };
}();

systemCallMethods.ls = function () {
  var _ref39 = (0, _asyncToGenerator2.default)(function* (remotePath, opts = []) {
    try {
      let args = ['ls', ...opts, remotePath];
      let stdout = yield this.shell(args);
      let lines = stdout.split("\n");
      return lines.map(l => l.trim()).filter(Boolean).filter(l => l.indexOf("No such file") === -1);
    } catch (err) {
      if (err.message.indexOf('No such file or directory') === -1) {
        throw err;
      }

      return [];
    }
  });

  return function (_x15) {
    return _ref39.apply(this, arguments);
  };
}();

systemCallMethods.fileSize = function () {
  var _ref40 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    try {
      const files = yield this.ls(remotePath, ['-la']);

      if (files.length !== 1) {
        throw new Error(`Remote path is not a file`);
      }

      const match = /[rwxsStT\-+]{10}[\s\d]*\s[^\s]+\s+[^\s]+\s+(\d+)/.exec(files[0]);

      if (!match || _lodash.default.isNaN(parseInt(match[1], 10))) {
        throw new Error(`Unable to parse size from list output: '${files[0]}'`);
      }

      return parseInt(match[1], 10);
    } catch (err) {
      throw new Error(`Unable to get file size for '${remotePath}': ${err.message}`);
    }
  });

  return function (_x16) {
    return _ref40.apply(this, arguments);
  };
}();

systemCallMethods.installMitmCertificate = function () {
  var _ref41 = (0, _asyncToGenerator2.default)(function* (cert) {
    var _this9 = this;

    const openSsl = yield (0, _helpers.getOpenSslForOs)();

    if (!_lodash.default.isBuffer(cert)) {
      cert = Buffer.from(cert, 'base64');
    }

    const tmpRoot = yield _appiumSupport.tempDir.openDir();

    try {
      const srcCert = _path.default.resolve(tmpRoot, 'source.cer');

      yield _appiumSupport.fs.writeFile(srcCert, cert);

      let _ref42 = yield (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', srcCert]),
          stdout = _ref42.stdout;

      const certHash = stdout.trim();

      _logger.default.debug(`Got certificate hash: ${certHash}`);

      _logger.default.debug('Preparing certificate content');

      var _ref43 = yield (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert], {
        isBuffer: true
      });

      stdout = _ref43.stdout;
      let dstCertContent = stdout;

      var _ref44 = yield (0, _teen_process.exec)(openSsl, ['x509', '-in', srcCert, '-text', '-fingerprint', '-noout'], {
        isBuffer: true
      });

      stdout = _ref44.stdout;
      dstCertContent = Buffer.concat([dstCertContent, stdout]);

      const dstCert = _path.default.resolve(tmpRoot, `${certHash}.0`);

      yield _appiumSupport.fs.writeFile(dstCert, dstCertContent);

      _logger.default.debug('Remounting /system in rw mode');

      yield (0, _asyncbox.retryInterval)(5, 2000, (0, _asyncToGenerator2.default)(function* () {
        return yield _this9.adbExec(['remount']);
      }));

      _logger.default.debug(`Uploading the generated certificate from '${dstCert}' to '${CERTS_ROOT}'`);

      yield this.push(dstCert, CERTS_ROOT);

      _logger.default.debug('Remounting /system to confirm changes');

      yield this.adbExec(['remount']);
    } catch (err) {
      throw new Error(`Cannot inject the custom certificate. ` + `Is the certificate properly encoded into base64-string? ` + `Do you have root permissions on the device? ` + `Original error: ${err.message}`);
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }
  });

  return function (_x17) {
    return _ref41.apply(this, arguments);
  };
}();

systemCallMethods.isMitmCertificateInstalled = function () {
  var _ref46 = (0, _asyncToGenerator2.default)(function* (cert) {
    const openSsl = yield (0, _helpers.getOpenSslForOs)();

    if (!_lodash.default.isBuffer(cert)) {
      cert = Buffer.from(cert, 'base64');
    }

    const tmpRoot = yield _appiumSupport.tempDir.openDir();
    let certHash;

    try {
      const tmpCert = _path.default.resolve(tmpRoot, 'source.cer');

      yield _appiumSupport.fs.writeFile(tmpCert, cert);

      const _ref47 = yield (0, _teen_process.exec)(openSsl, ['x509', '-noout', '-hash', '-in', tmpCert]),
            stdout = _ref47.stdout;

      certHash = stdout.trim();
    } catch (err) {
      throw new Error(`Cannot retrieve the certificate hash. ` + `Is the certificate properly encoded into base64-string? ` + `Original error: ${err.message}`);
    } finally {
      yield _appiumSupport.fs.rimraf(tmpRoot);
    }

    const dstPath = _path.default.posix.resolve(CERTS_ROOT, `${certHash}.0`);

    _logger.default.debug(`Checking if the certificate is already installed at '${dstPath}'`);

    return yield this.fileExists(dstPath);
  });

  return function (_x18) {
    return _ref46.apply(this, arguments);
  };
}();

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
