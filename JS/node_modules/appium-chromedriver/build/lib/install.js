"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.installAll = installAll;
exports.conditionalInstall = conditionalInstall;
exports.doInstall = doInstall;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _chromedriver = require("./chromedriver");

var _utils = require("./utils");

var _fancyLog = _interopRequireDefault(require("fancy-log"));

function log(line) {
  (0, _fancyLog.default)(`[Chromedriver Install] ${line}`);
}

const CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
const CD_PLATS = ['linux', 'win', 'mac'];
const CD_ARCHS = ['32', '64'];

function getArchAndPlatform() {
  return _getArchAndPlatform.apply(this, arguments);
}

function _getArchAndPlatform() {
  _getArchAndPlatform = (0, _asyncToGenerator2.default)(function* () {
    let arch = yield _appiumSupport.system.arch();
    let platform = (0, _utils.getCurPlatform)();

    if (platform !== 'linux' && platform !== 'mac' && arch === '64') {
      arch = '32';
    }

    if (platform === 'mac' && parseFloat(_chromedriver.CD_VER) < 2.23) {
      arch = '32';
    }

    return {
      arch,
      platform
    };
  });
  return _getArchAndPlatform.apply(this, arguments);
}

function getDownloadUrl(version, platform, arch) {
  return `${CD_CDN}/${version}/chromedriver_${platform}${arch}.zip`;
}

function validatePlatform(platform, arch) {
  if (!_lodash.default.includes(CD_PLATS, platform)) {
    throw new Error(`Invalid platform: ${platform}`);
  }

  if (!_lodash.default.includes(CD_ARCHS, arch)) {
    throw new Error(`Invalid arch: ${arch}`);
  }

  if (arch === "64" && platform !== "linux" && platform !== 'mac') {
    throw new Error('Only linux has a 64-bit version of Chromedriver');
  }
}

function installForPlatform(_x, _x2, _x3) {
  return _installForPlatform.apply(this, arguments);
}

function _installForPlatform() {
  _installForPlatform = (0, _asyncToGenerator2.default)(function* (version, platform, arch) {
    if (version === 'LATEST') {
      version = (yield _requestPromise.default.get({
        uri: `${CD_CDN}/LATEST_RELEASE`
      })).trim();
    }

    validatePlatform(platform, arch);
    const url = getDownloadUrl(version, platform, arch);
    log(`Installing Chromedriver version '${version}' for platform '${platform}' and architecture '${arch}'`);
    const binarySpec = `chromedriver_${platform}${arch}`;
    log(`Opening temp file to write '${binarySpec}' to...`);
    const tempFile = yield _appiumSupport.tempDir.open({
      prefix: binarySpec,
      suffix: '.zip'
    });
    log(`Opened temp file '${tempFile.path}'`);
    log(`Downloading ${url}...`);
    const body = yield _requestPromise.default.get({
      url,
      encoding: 'binary'
    });
    log(`Writing binary content to ${tempFile.path}...`);
    yield _appiumSupport.fs.writeFile(tempFile.path, body, {
      encoding: 'binary'
    });
    yield _appiumSupport.fs.chmod(tempFile.path, 0o0644);

    const tempUnzipped = _path.default.resolve(_path.default.dirname(tempFile.path), binarySpec);

    log(`Extracting ${tempFile.path} to ${tempUnzipped}`);
    yield (0, _appiumSupport.mkdirp)(tempUnzipped);
    yield _appiumSupport.zip.extractAllTo(tempFile.path, tempUnzipped);

    let extractedBin = _path.default.resolve(tempUnzipped, 'chromedriver');

    if (platform === "win") {
      extractedBin += ".exe";
    }

    log(`Creating ${_path.default.resolve(_utils.CD_BASE_DIR, platform)}...`);
    yield (0, _appiumSupport.mkdirp)(_path.default.resolve(_utils.CD_BASE_DIR, platform));
    const newBin = yield (0, _utils.getChromedriverBinaryPath)(platform, arch);
    log(`Copying unzipped binary, reading from ${extractedBin}...`);
    const binContents = yield _appiumSupport.fs.readFile(extractedBin, {
      encoding: 'binary'
    });
    log(`Writing to ${newBin}...`);
    yield _appiumSupport.fs.writeFile(newBin, binContents, {
      encoding: 'binary',
      mode: 0o755
    });
    log(`${newBin} successfully put in place`);
  });
  return _installForPlatform.apply(this, arguments);
}

function install() {
  return _install.apply(this, arguments);
}

function _install() {
  _install = (0, _asyncToGenerator2.default)(function* () {
    const _ref = yield getArchAndPlatform(),
          arch = _ref.arch,
          platform = _ref.platform;

    yield installForPlatform(_chromedriver.CD_VER, platform, arch);
  });
  return _install.apply(this, arguments);
}

function conditionalInstall() {
  return _conditionalInstall.apply(this, arguments);
}

function _conditionalInstall() {
  _conditionalInstall = (0, _asyncToGenerator2.default)(function* () {
    const _ref2 = yield getArchAndPlatform(),
          arch = _ref2.arch,
          platform = _ref2.platform;

    const binPath = yield (0, _utils.getChromedriverBinaryPath)(platform, arch);

    if (!(yield _appiumSupport.fs.exists(binPath))) {
      yield installForPlatform(_chromedriver.CD_VER, platform, arch);
    } else {
      log(`No need to install chromedriver, ${binPath} exists`);
    }
  });
  return _conditionalInstall.apply(this, arguments);
}

function installAll() {
  return _installAll.apply(this, arguments);
}

function _installAll() {
  _installAll = (0, _asyncToGenerator2.default)(function* () {
    let downloads = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _utils.getPlatforms)()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
            platform = _step$value[0],
            arch = _step$value[1];

        downloads.push(installForPlatform(_chromedriver.CD_VER, platform, arch));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    yield (0, _asyncbox.parallel)(downloads);
  });
  return _installAll.apply(this, arguments);
}

function doInstall() {
  return _doInstall.apply(this, arguments);
}

function _doInstall() {
  _doInstall = (0, _asyncToGenerator2.default)(function* () {
    if (_lodash.default.includes(process.argv, '--all') || process.env.npm_config_chromedriver_install_all) {
      yield installAll();
    } else if (_lodash.default.includes(process.argv, '--conditional')) {
      yield conditionalInstall();
    } else {
      yield install();
    }
  });
  return _doInstall.apply(this, arguments);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
