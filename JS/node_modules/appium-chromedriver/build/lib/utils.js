"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChromeVersion = getChromeVersion;
exports.getChromedriverDir = getChromedriverDir;
exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.getCurPlatform = getCurPlatform;
exports.getPlatforms = getPlatforms;
exports.CD_BASE_DIR = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _chromedriver = require("./chromedriver");

const CD_BASE_DIR = _path.default.resolve(__dirname, '..', '..', 'chromedriver');

exports.CD_BASE_DIR = CD_BASE_DIR;

function getChromeVersion(_x, _x2) {
  return _getChromeVersion.apply(this, arguments);
}

function _getChromeVersion() {
  _getChromeVersion = (0, _asyncToGenerator2.default)(function* (adb, bundleId) {
    const _ref = yield adb.getPackageInfo(bundleId),
          versionName = _ref.versionName;

    return versionName;
  });
  return _getChromeVersion.apply(this, arguments);
}

function getChromedriverDir(platform = getCurPlatform()) {
  return _path.default.resolve(CD_BASE_DIR, platform);
}

function getChromedriverBinaryPath() {
  return _getChromedriverBinaryPath.apply(this, arguments);
}

function _getChromedriverBinaryPath() {
  _getChromedriverBinaryPath = (0, _asyncToGenerator2.default)(function* (platform = getCurPlatform(), arch = null) {
    const baseDir = getChromedriverDir(platform);
    let ext = '';

    if (platform === 'win') {
      ext = '.exe';
    } else if (platform === 'linux') {
      ext = `_${arch || (yield _appiumSupport.system.arch())}`;
    }

    return _path.default.resolve(baseDir, `chromedriver${ext}`);
  });
  return _getChromedriverBinaryPath.apply(this, arguments);
}

function getCurPlatform() {
  return _appiumSupport.system.isWindows() ? 'win' : _appiumSupport.system.isMac() ? 'mac' : 'linux';
}

function getPlatforms() {
  let plats = [['win', '32'], ['linux', '64']];
  const cdVer = parseFloat(_chromedriver.CD_VER);
  plats.push(cdVer < 2.23 ? ['mac', '32'] : ['mac', '64']);

  if (cdVer < 2.34) {
    plats.push(['linux', '32']);
  }

  return plats;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJDRF9CQVNFX0RJUiIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiZ2V0Q2hyb21lVmVyc2lvbiIsImFkYiIsImJ1bmRsZUlkIiwiZ2V0UGFja2FnZUluZm8iLCJ2ZXJzaW9uTmFtZSIsImdldENocm9tZWRyaXZlckRpciIsInBsYXRmb3JtIiwiZ2V0Q3VyUGxhdGZvcm0iLCJnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoIiwiYXJjaCIsImJhc2VEaXIiLCJleHQiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJpc01hYyIsImdldFBsYXRmb3JtcyIsInBsYXRzIiwiY2RWZXIiLCJwYXJzZUZsb2F0IiwiQ0RfVkVSIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFdBQVcsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLGNBQXBDLENBQXBCOzs7O1NBRWVDLGdCOzs7OztzREFBZixXQUFpQ0MsR0FBakMsRUFBc0NDLFFBQXRDLEVBQWdEO0FBQUEsdUJBQ2xCRCxHQUFHLENBQUNFLGNBQUosQ0FBbUJELFFBQW5CLENBRGtCO0FBQUEsVUFDdkNFLFdBRHVDLFFBQ3ZDQSxXQUR1Qzs7QUFFOUMsV0FBT0EsV0FBUDtBQUNELEc7Ozs7QUFFRCxTQUFTQyxrQkFBVCxDQUE2QkMsUUFBUSxHQUFHQyxjQUFjLEVBQXRELEVBQTBEO0FBQ3hELFNBQU9WLGNBQUtDLE9BQUwsQ0FBYUYsV0FBYixFQUEwQlUsUUFBMUIsQ0FBUDtBQUNEOztTQUVjRSx5Qjs7Ozs7K0RBQWYsV0FBMENGLFFBQVEsR0FBR0MsY0FBYyxFQUFuRSxFQUF1RUUsSUFBSSxHQUFHLElBQTlFLEVBQW9GO0FBQ2xGLFVBQU1DLE9BQU8sR0FBR0wsa0JBQWtCLENBQUNDLFFBQUQsQ0FBbEM7QUFDQSxRQUFJSyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxRQUFJTCxRQUFRLEtBQUssS0FBakIsRUFBd0I7QUFDdEJLLE1BQUFBLEdBQUcsR0FBRyxNQUFOO0FBQ0QsS0FGRCxNQUVPLElBQUlMLFFBQVEsS0FBSyxPQUFqQixFQUEwQjtBQUMvQkssTUFBQUEsR0FBRyxHQUFJLElBQUdGLElBQUksV0FBVUcsc0JBQU9ILElBQVAsRUFBVixDQUF3QixFQUF0QztBQUNEOztBQUVELFdBQU9aLGNBQUtDLE9BQUwsQ0FBYVksT0FBYixFQUF1QixlQUFjQyxHQUFJLEVBQXpDLENBQVA7QUFDRCxHOzs7O0FBRUQsU0FBU0osY0FBVCxHQUEyQjtBQUN6QixTQUFPSyxzQkFBT0MsU0FBUCxLQUFxQixLQUFyQixHQUE4QkQsc0JBQU9FLEtBQVAsS0FBaUIsS0FBakIsR0FBeUIsT0FBOUQ7QUFDRDs7QUFFRCxTQUFTQyxZQUFULEdBQXlCO0FBQ3ZCLE1BQUlDLEtBQUssR0FBRyxDQUNWLENBQUMsS0FBRCxFQUFRLElBQVIsQ0FEVSxFQUVWLENBQUMsT0FBRCxFQUFVLElBQVYsQ0FGVSxDQUFaO0FBSUEsUUFBTUMsS0FBSyxHQUFHQyxVQUFVLENBQUNDLG9CQUFELENBQXhCO0FBRUFILEVBQUFBLEtBQUssQ0FBQ0ksSUFBTixDQUFXSCxLQUFLLEdBQUcsSUFBUixHQUFlLENBQUMsS0FBRCxFQUFRLElBQVIsQ0FBZixHQUErQixDQUFDLEtBQUQsRUFBUSxJQUFSLENBQTFDOztBQUVBLE1BQUlBLEtBQUssR0FBRyxJQUFaLEVBQWtCO0FBQ2hCRCxJQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBVyxDQUFDLE9BQUQsRUFBVSxJQUFWLENBQVg7QUFDRDs7QUFDRCxTQUFPSixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENEX1ZFUiB9IGZyb20gJy4vY2hyb21lZHJpdmVyJztcblxuXG5jb25zdCBDRF9CQVNFX0RJUiA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICdjaHJvbWVkcml2ZXInKTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2hyb21lVmVyc2lvbiAoYWRiLCBidW5kbGVJZCkge1xuICBjb25zdCB7dmVyc2lvbk5hbWV9ID0gYXdhaXQgYWRiLmdldFBhY2thZ2VJbmZvKGJ1bmRsZUlkKTtcbiAgcmV0dXJuIHZlcnNpb25OYW1lO1xufVxuXG5mdW5jdGlvbiBnZXRDaHJvbWVkcml2ZXJEaXIgKHBsYXRmb3JtID0gZ2V0Q3VyUGxhdGZvcm0oKSkge1xuICByZXR1cm4gcGF0aC5yZXNvbHZlKENEX0JBU0VfRElSLCBwbGF0Zm9ybSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENocm9tZWRyaXZlckJpbmFyeVBhdGggKHBsYXRmb3JtID0gZ2V0Q3VyUGxhdGZvcm0oKSwgYXJjaCA9IG51bGwpIHtcbiAgY29uc3QgYmFzZURpciA9IGdldENocm9tZWRyaXZlckRpcihwbGF0Zm9ybSk7XG4gIGxldCBleHQgPSAnJztcbiAgaWYgKHBsYXRmb3JtID09PSAnd2luJykge1xuICAgIGV4dCA9ICcuZXhlJztcbiAgfSBlbHNlIGlmIChwbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xuICAgIGV4dCA9IGBfJHthcmNoIHx8IGF3YWl0IHN5c3RlbS5hcmNoKCl9YDtcbiAgfVxuXG4gIHJldHVybiBwYXRoLnJlc29sdmUoYmFzZURpciwgYGNocm9tZWRyaXZlciR7ZXh0fWApO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJQbGF0Zm9ybSAoKSB7XG4gIHJldHVybiBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnd2luJyA6IChzeXN0ZW0uaXNNYWMoKSA/ICdtYWMnIDogJ2xpbnV4Jyk7XG59XG5cbmZ1bmN0aW9uIGdldFBsYXRmb3JtcyAoKSB7XG4gIGxldCBwbGF0cyA9IFtcbiAgICBbJ3dpbicsICczMiddLFxuICAgIFsnbGludXgnLCAnNjQnXSxcbiAgXTtcbiAgY29uc3QgY2RWZXIgPSBwYXJzZUZsb2F0KENEX1ZFUik7XG4gIC8vIGJlZm9yZSAyLjIzIE1hYyB2ZXJzaW9uIHdhcyAzMiBiaXQuIEFmdGVyIGl0IGlzIDY0LlxuICBwbGF0cy5wdXNoKGNkVmVyIDwgMi4yMyA/IFsnbWFjJywgJzMyJ10gOiBbJ21hYycsICc2NCddKTtcbiAgLy8gMi4zNCBhbmQgYWJvdmUgbGludXggaXMgb25seSBzdXBwb3J0aW5nIDY0IGJpdFxuICBpZiAoY2RWZXIgPCAyLjM0KSB7XG4gICAgcGxhdHMucHVzaChbJ2xpbnV4JywgJzMyJ10pO1xuICB9XG4gIHJldHVybiBwbGF0cztcbn1cblxuZXhwb3J0IHtcbiAgZ2V0Q2hyb21lVmVyc2lvbiwgZ2V0Q2hyb21lZHJpdmVyRGlyLCBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoLFxuICBnZXRDdXJQbGF0Zm9ybSwgZ2V0UGxhdGZvcm1zLCBDRF9CQVNFX0RJUixcbn07XG4iXSwiZmlsZSI6ImxpYi91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
